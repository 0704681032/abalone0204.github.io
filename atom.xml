<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>De-bug: 一鍵跑版</title>
  <subtitle>{ web, computer, data }</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://abalone0204.github.com/"/>
  <updated>2016-06-20T07:06:19.207Z</updated>
  <id>http://abalone0204.github.com/</id>
  
  <author>
    <name>Tsung-Chen Ku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寫在 Clairvoyance 發布之後：軟體開發者的社會責任</title>
    <link href="http://abalone0204.github.com/2016/06/16/clv-beta-version/"/>
    <id>http://abalone0204.github.com/2016/06/16/clv-beta-version/</id>
    <published>2016-06-16T01:44:00.000Z</published>
    <updated>2016-06-20T07:06:19.207Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;這篇可能不會講到太多直接跟技術相關的東西，&lt;/p&gt;
&lt;p&gt;如果你對這個東西怎麼寫出來比較有興趣的話，&lt;/p&gt;
&lt;p&gt;可以看這篇：&lt;a href=&quot;http://abalone0204.github.io/2016/06/12/clv-dev-note/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clairvoyance 是怎麼開發的&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是希望這次從開發到現在較多人使用，&lt;/p&gt;
&lt;p&gt;中間受到許多幫助和指點的經驗，能夠被記錄下來，&lt;/p&gt;
&lt;p&gt;假如以後有人遇到一樣的事情能從中借鏡。&lt;/p&gt;
&lt;p&gt;當然，這也是對自己的一個反省。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先還是得先講一下求職天～眼通是什麼。&lt;/p&gt;
&lt;p&gt;它其實就是個 chrome 的 extension，&lt;/p&gt;
&lt;p&gt;裝了它以後，能在人力銀行的職缺下方給評論，以及看到其他人給的評論，&lt;/p&gt;
&lt;p&gt;載點在這裡：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A/mdneakdlnoidknagkamfeambdefhppbi?hl=zh-TW&amp;amp;gl=TW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abalone0204/Clairvoyance/master/chrome-store-available.png&quot; alt=&quot;pic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他說明的話 &lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1465759641.A.E57.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ptt 上的文章&lt;/a&gt;會清楚得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QvYeAmN.png&quot; alt=&quot;Jean Grey and Cyclops from Entertainment Weekly&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jean Grey and Cyclops from Entertainment Weekly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目錄&quot;&gt;&lt;a href=&quot;#目錄&quot; class=&quot;headerlink&quot; title=&quot;目錄&quot;&gt;&lt;/a&gt;目錄&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#在開始動手寫程式之前&quot;&gt;在開始動手寫程式之前&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有這一小段會講到比較多技術相關的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#發布-Beta-版本&quot;&gt;發布 Beta 版本&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#收到回饋之後&quot;&gt;收到回饋之後&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#商業化的迷思以及贊助管道&quot;&gt;商業化的迷思以及贊助管道&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#未來方向&quot;&gt;未來方向&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#一個軟體工作者的反思&quot;&gt;一個軟體工作者的反思&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;求職天～眼通要做的事情很單純，&lt;/p&gt;
&lt;p&gt;就是像前面說的把留言功能加上去而已，&lt;/p&gt;
&lt;p&gt;不過其實就像我們平常在做一件事情一樣，用想的都很簡單。&lt;/p&gt;
&lt;p&gt;但總歸其實只會遇到三個問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;真正做的時候會遇到問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做出來之後有沒有人用會是一個問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有太多人用之後又會是一個問題&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面來說一下從端午連假到今天為止的這一段故事，&lt;/p&gt;
&lt;p&gt;寫程式是這個故事很重要的一部份，&lt;/p&gt;
&lt;p&gt;不過其實還有很多其他眉眉角角可以跟大家分享。&lt;/p&gt;
&lt;h1 id=&quot;在開始動手寫程式之前&quot;&gt;&lt;a href=&quot;#在開始動手寫程式之前&quot; class=&quot;headerlink&quot; title=&quot;在開始動手寫程式之前&quot;&gt;&lt;/a&gt;在開始動手寫程式之前&lt;/h1&gt;&lt;p&gt;在開發前，首要的認知就是知道：&lt;/p&gt;
&lt;p&gt;自己擅長什麼、手上有什麼資源，如果前兩者還不夠還要再準備什麼。&lt;/p&gt;
&lt;p&gt;其實有這個發想是在端午節之前，&lt;/p&gt;
&lt;p&gt;我平常是一個網頁前端工程師。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然也寫寫後端以及對系統感興趣，&lt;/p&gt;
&lt;p&gt;但我知道 full stack 是一個被濫用的職稱。&lt;/p&gt;
&lt;p&gt;這年頭多的是 Database 操作只會 CRUD 的前端工程師稱自己為 full stack，&lt;/p&gt;
&lt;p&gt;或是只會套 bootstrap 的後端工程師稱自己為 full stack。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最常用的語言剛好就是 JavaScript ，可以直接拿來寫 Chrome 的插件，&lt;/p&gt;
&lt;p&gt;但這還不夠，我還需要一個存放資料的 back-end。&lt;/p&gt;
&lt;p&gt;下面這個基本上就是我畫在紙上的草圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/abalone0204/Clairvoyance/raw/master/clv-arc.png&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;本來打算直接在 AWS 上開一個 EC2+RDS 放著，&lt;/p&gt;
&lt;p&gt;後來發現只是單純留言，也沒有要真正 render 一個網頁。&lt;/p&gt;
&lt;p&gt;這個 back-end 需要能達到兩件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;計算的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;資料的持久性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先是單純的運算能力，最終看上了 AWS 的另一個服務 AWS lambda，&lt;/p&gt;
&lt;p&gt;它是以 function 為單位，不會需要我去維護整台機器（serverless），&lt;/p&gt;
&lt;p&gt;而且當運算量變大時，我大 amazon 會自己幫我 scale-out。&lt;/p&gt;
&lt;p&gt;於是稍微研究了一下 serverless 這套 framework，&lt;/p&gt;
&lt;p&gt;也寫了一份筆記在這裡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺析 serverless 架構與實作&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再來則是資料的持久性，我選擇了 DynamoDB，&lt;/p&gt;
&lt;p&gt;是個跟 lambda 搭配很常見的選擇。&lt;/p&gt;
&lt;p&gt;儘管它看起來就是簡單易用，&lt;/p&gt;
&lt;p&gt;但為了這個選擇其實下了不少功夫，&lt;/p&gt;
&lt;p&gt;一開始是因為對「最終一致性」有疑慮，所以去看了 CAP 理論：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brewer’s CAP Theorem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後來再看了這本簡介分散式運算的書：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.mixu.net/distsys/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總歸對系統的架構有個理解後，才開始安心使用，&lt;/p&gt;
&lt;p&gt;儘管現在回頭看這兩份文本都可以跳過，&lt;/p&gt;
&lt;p&gt;但要做能 scale-out 的系統，&lt;/p&gt;
&lt;p&gt;對分散式運算如果一無所知的話，會沒有那個 sense，&lt;/p&gt;
&lt;p&gt;身為一個軟體人就不該對未知的東西姑息或害怕去學它。&lt;/p&gt;
&lt;p&gt;接著一切就緒後，我突然發現我少了一位設計師夥伴，&lt;/p&gt;
&lt;p&gt;基於不想在假日麻煩人，我上了 &lt;a href=&quot;https://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt; 去看他們的 license：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;codepen 是一個讓前端工程師放作品的地方，上面有蠻多好玩的設計以及如何實做的原始碼。&lt;/p&gt;
&lt;p&gt;有人會問跟 pinterest 有什麼差別？&lt;/p&gt;
&lt;p&gt;簡言之 pinterest 是比較偏向純設計師的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codepen.io/legal/licensing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What License Is Code I Post to CodePen?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡單說一句話，就是 public pen 都是 MIT license 的，&lt;/p&gt;
&lt;p&gt;要使用的話，只要包含了他們原本的 license，就可以自由使用。&lt;/p&gt;
&lt;p&gt;雖然最後幾乎都只是參考概念，並沒有真正援用哪個 pen 上的東西，&lt;/p&gt;
&lt;p&gt;但身為一個軟體開發者，就應該遵守這些基本的規定，&lt;/p&gt;
&lt;p&gt;畢竟當真的有人要找你麻煩時，沒有不知者不罪這種事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果對於這些法規方面以及技術有興趣的人，&lt;/p&gt;
&lt;p&gt;可以去 follow Muzik Online 首席工程師 Ant 的臉書，&lt;/p&gt;
&lt;p&gt;上面有許多能讓技術人有一些法規 sense 的文章，&lt;/p&gt;
&lt;p&gt;而且對於 Database 和系統架構，上面也很多東西可以看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，現在我有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端開發能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;back-end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;codepen 上參考的 UI&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再來只是需要時間就能把東西做出來了。&lt;/p&gt;
&lt;h1 id=&quot;發布-Beta-版本&quot;&gt;&lt;a href=&quot;#發布-Beta-版本&quot; class=&quot;headerlink&quot; title=&quot;發布 Beta 版本&quot;&gt;&lt;/a&gt;發布 Beta 版本&lt;/h1&gt;&lt;p&gt;大家看到的版本，其實是有滿滿 bug 的 beta 版本，&lt;/p&gt;
&lt;p&gt;我只有讓身邊幾個朋友測試過，就先 po 在 soft_job 板上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;讓開發者以外的人先測過這一步至關重要，&lt;/p&gt;
&lt;p&gt;因為自己開發的東西一定會有盲點。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;會這樣做的原因是因為我想知道這東西是不是真的有需求，&lt;/p&gt;
&lt;p&gt;當時 po 完文章就去睡覺，早上看到有三十推就覺得蠻開心，&lt;/p&gt;
&lt;p&gt;結果幾個小時候 TonyQ 將它轉到八卦版去，直接一個爆衝。&lt;/p&gt;
&lt;p&gt;但結局讓我又開心又害怕：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開心的是這東西真的有需求，而且很有需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;害怕的是我覺得這東西還不夠成熟，怕一開始太難用就直接被拋棄。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;令我意外的是， aws lambda 和 DynamoDB 完全撐住了流量，&lt;/p&gt;
&lt;p&gt;當初把這些東西交到雲端託管有了成效，&lt;/p&gt;
&lt;p&gt;後來去看 log 發現沒辦法留言，都是原本 code 裡面有 bug，&lt;/p&gt;
&lt;p&gt;跟 AWS 一點關係都沒有 XD&lt;/p&gt;
&lt;p&gt;不過後續就一直修到昨天晚上為止，留言功能才算正式穩定下來。&lt;/p&gt;
&lt;h1 id=&quot;收到回饋之後&quot;&gt;&lt;a href=&quot;#收到回饋之後&quot; class=&quot;headerlink&quot; title=&quot;收到回饋之後&quot;&gt;&lt;/a&gt;收到回饋之後&lt;/h1&gt;&lt;p&gt;接著除了大量的 bug 回報之外，&lt;/p&gt;
&lt;p&gt;也收到許多跟功能上有關的回饋。&lt;/p&gt;
&lt;p&gt;其實大部分的回饋我都認為做了功能絕對會更完善，&lt;/p&gt;
&lt;p&gt;但時間並不允許這樣做，&lt;/p&gt;
&lt;p&gt;所以問題並不在於「現在要做什麼」，而是「現在不做什麼」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡感謝 TonyQ 以及榮尼王給我的許多建議。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為背負著很多人的期待，我並不能想做什麼就亂做什麼，&lt;/p&gt;
&lt;p&gt;必須訂下一個明確開發的方向，&lt;/p&gt;
&lt;p&gt;就現階段而言，讓這個 extension 活下去是至關緊要的事情，&lt;/p&gt;
&lt;p&gt;因為已經有了第一批用戶（已註冊目前大概約四千多人），&lt;/p&gt;
&lt;p&gt;剩下的只是繼續累積。&lt;/p&gt;
&lt;p&gt;太激進、會讓人力銀行對這個 extension 採取行動的事情，&lt;/p&gt;
&lt;p&gt;都不該去做，因為目前還玩不起這個槓桿。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不過 github 上面有許多人提了一些有辦法解決的方法，&lt;/p&gt;
&lt;p&gt;總之，沒有「絕對不做」的事情，只有「現階段不做」而已，&lt;/p&gt;
&lt;p&gt;有興趣的人也可以去看看，集思廣益：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/Clairvoyance/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue 討論區&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;商業化的迷思以及贊助管道&quot;&gt;&lt;a href=&quot;#商業化的迷思以及贊助管道&quot; class=&quot;headerlink&quot; title=&quot;商業化的迷思以及贊助管道&quot;&gt;&lt;/a&gt;商業化的迷思以及贊助管道&lt;/h1&gt;&lt;p&gt;有蠻多人在提到這件事情要商業化，&lt;/p&gt;
&lt;p&gt;也有人覺得只要「不商業化」就先把你貼上「傻傻、不懂事」的標籤。&lt;/p&gt;
&lt;p&gt;但其實我一點都不排斥商業化，我只是單純的覺得這件事不適合，&lt;/p&gt;
&lt;p&gt;或者現在沒想到適合的方式。&lt;/p&gt;
&lt;p&gt;像是如果要在上面硬是建立一個什麼商業模式，（像是廣告什麼的）&lt;/p&gt;
&lt;p&gt;這東西最後看起來只會是一個擾民的垃圾。&lt;/p&gt;
&lt;p&gt;而且當以獲利角度來做這些事情，&lt;/p&gt;
&lt;p&gt;我就不能單純站在勞工的角度去思考了。&lt;/p&gt;
&lt;p&gt;至於要永續經營，後續等真正穩定下來後，&lt;/p&gt;
&lt;p&gt;會放上小額捐款的連結，&lt;/p&gt;
&lt;p&gt;這件事會在擬定如何公布經費的使用以及規劃後才做，&lt;/p&gt;
&lt;p&gt;不在現在就先急著募錢的原因很簡單，&lt;/p&gt;
&lt;p&gt;因為我想讓捐錢的人真正弄清楚他們的錢為何所用，&lt;/p&gt;
&lt;p&gt;畢竟群眾募資不是大乞討，懂？&lt;/p&gt;
&lt;h1 id=&quot;未來方向&quot;&gt;&lt;a href=&quot;#未來方向&quot; class=&quot;headerlink&quot; title=&quot;未來方向&quot;&gt;&lt;/a&gt;未來方向&lt;/h1&gt;&lt;p&gt;這裡不談功能，最終的希望就是所有的勞方都會是天眼通的用戶。&lt;/p&gt;
&lt;p&gt;因為大家並不是一年四季都在找工作，&lt;/p&gt;
&lt;p&gt;但大家卻是一年四季都能上去做評論，&lt;/p&gt;
&lt;p&gt;有時候並不是說一定要面試過或怎樣才能做評論，&lt;/p&gt;
&lt;p&gt;短期內，可以揭露一些根本沒必要去的職缺，&lt;/p&gt;
&lt;p&gt;長期下來，經驗的分享才是這個 extension 最難發揮價值的地方，&lt;/p&gt;
&lt;p&gt;「老馬識途」這種事情，在職場上也是適用的，&lt;/p&gt;
&lt;p&gt;總之，如何吸引大家去做這件事，就會是接下來的主要課題。&lt;/p&gt;
&lt;h1 id=&quot;一個軟體工作者的反思&quot;&gt;&lt;a href=&quot;#一個軟體工作者的反思&quot; class=&quot;headerlink&quot; title=&quot;一個軟體工作者的反思&quot;&gt;&lt;/a&gt;一個軟體工作者的反思&lt;/h1&gt;&lt;p&gt;終於寫到這裡了，前幾天看到了 &lt;a href=&quot;weekly.codetengu.com&quot;&gt;Codetengu&lt;/a&gt; 上分享了這篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://groundbreaking.tw/wordpress/archives/2055&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此處有bug：程序員統治的黑暗世界&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我也想到前陣子 Alpha Go 很夯時，阮一峰所寫的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/03/techonology-vs-equality.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;技术会带来社会平等吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;身為一個軟體開發者，能了解電腦能做到的就是大量自動化、去中介化，&lt;/p&gt;
&lt;p&gt;去取代掉那些機器可以取代的員工，&lt;/p&gt;
&lt;p&gt;企業為了達成這件事情，自然要雇用一堆軟體工程師來幫忙，&lt;/p&gt;
&lt;p&gt;所以軟體工作者也變成一個搶手的職業。&lt;/p&gt;
&lt;p&gt;所謂技術帶來的平等，是指「資訊上」的平等，&lt;/p&gt;
&lt;p&gt;我們的資訊流通因為網路和軟體越來越快，&lt;/p&gt;
&lt;p&gt;舉例像是：歐巴馬總統和我們一樣都能用 google 快速查東西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這年頭不知道還有沒有人記得百科全書這東西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但在財富上卻不盡然，我們拿到越來越多薪水時，也讓越來越多的人失業，&lt;/p&gt;
&lt;p&gt;當此同時，除了繳了多一點點的稅，&lt;/p&gt;
&lt;p&gt;我們大多數人並沒有負起什麼社會責任。&lt;/p&gt;
&lt;p&gt;儘管軟體開發者理應是最有辦法讓想法付諸實現的人才對，&lt;/p&gt;
&lt;p&gt;畢竟軟體能夠運行在電腦這個已經稱霸全球的載體上，&lt;/p&gt;
&lt;p&gt;更別說我們還有了 Internet 這樣鋪天蓋地的通路，&lt;/p&gt;
&lt;p&gt;寫程式這件事雖然有時候我也會因為智商不夠用覺得好難，&lt;/p&gt;
&lt;p&gt;但是比起動不動要砸大錢的製造業，寫程式真的容易實現多了。&lt;/p&gt;
&lt;p&gt;寫程式是世界的潮流沒錯，&lt;/p&gt;
&lt;p&gt;只是許多台灣創業家提到寫程式就很喜歡強調矽谷如何、如何，&lt;/p&gt;
&lt;p&gt;忽略了許多在本質上就有顯著差異的事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;統計學裡面告訴我們：&lt;strong&gt;有顯著差異是要拒絕虛無假設的&lt;/strong&gt;，這句話現在看來蠻有哲理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不會說面對國際市場是一件錯誤的事情，&lt;/p&gt;
&lt;p&gt;在商言商總是有許多額外的考量，&lt;/p&gt;
&lt;p&gt;畢竟連話說的不好聽，要怎麼讓人掏錢投資勒？&lt;/p&gt;
&lt;p&gt;只是很多問題，其實台灣有其因應的解決方式，&lt;/p&gt;
&lt;p&gt;而工程師本來就該是提出 solution 的人，而不是負責說空話的人，&lt;/p&gt;
&lt;p&gt;所以更應該要虛心學習用一個台灣人的角度來看向世界以及台灣，&lt;/p&gt;
&lt;p&gt;才能真正解決台灣的問題。&lt;/p&gt;
&lt;p&gt;舉例來說：這個插件就是解決台灣特有的問題 XD，&lt;/p&gt;
&lt;p&gt;因為國外的求職平台沒有像台灣這樣被壟斷。&lt;/p&gt;
&lt;p&gt;中國那邊的招募平台也幾乎都有開放留言討論這個功能，&lt;/p&gt;
&lt;p&gt;資方跟勞方是積極在&lt;del&gt;爭論&lt;/del&gt;對話的。&lt;/p&gt;
&lt;p&gt;所以這插件只有在這樣子的台灣才會有需求XD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;題外話是其實台灣也有蠻多新的求職平台，&lt;/p&gt;
&lt;p&gt;像是 &lt;a href=&quot;https://sudo.com.tw/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sudo&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;或是 &lt;a href=&quot;https://www.yourator.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yourator&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;都相當不錯，而且在資訊上也相對傳統的人力銀行透明很多，&lt;/p&gt;
&lt;p&gt;不過都是比較以新創或工程師為主。&lt;/p&gt;
&lt;p&gt;特別講到 sudo 是因為他們的留言功能更完整，&lt;/p&gt;
&lt;p&gt;（正因為以前就在那裡工作才更了解這些事情）&lt;/p&gt;
&lt;p&gt;裡面的就職顧問雖然是講話很愛中英交雜的 AIESECer，&lt;/p&gt;
&lt;p&gt;但絕對是真心要幫助工程師求職的：Ｄ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再來雖然現代人生活離不開電腦，&lt;/p&gt;
&lt;p&gt;但其實對於軟體相關的事務都是有疏離和懼怕感的，&lt;/p&gt;
&lt;p&gt;很多時候是因為身為人與機器的 Proxy 的我們沒有做好事情讓其他人有感。&lt;/p&gt;
&lt;p&gt;身為一個在軟體產業工作的人，&lt;/p&gt;
&lt;p&gt;這件事可能會蠻常見的，就是你有時候很難跟不寫程式的人敘述你到底完成了一些什麼 XD&lt;/p&gt;
&lt;p&gt;舉例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把什麼東西做了 cache 讓它更快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或是用了什麼 Design Pattern 提高了維護性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;別人聽一聽常常是：「喔⋯⋯這樣啊⋯⋯」。&lt;/p&gt;
&lt;p&gt;但生活中到處都是我們能夠付出專業能力去改變的地方，&lt;/p&gt;
&lt;p&gt;工作之餘，還要有生活，生活之餘，&lt;/p&gt;
&lt;p&gt;我們還能改善其他人的生活啊 :D&lt;/p&gt;
&lt;p&gt;當認為有正確的事情該做，&lt;/p&gt;
&lt;p&gt;就該運用系統化的角度去設計和解決，&lt;/p&gt;
&lt;p&gt;因為假如做出來不小心規模化，你的系統又扛得住的話，&lt;/p&gt;
&lt;p&gt;那可能就不小心改變世界了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;題外話是天眼通本來是個我跟別人講，&lt;/p&gt;
&lt;p&gt;別人只會說：「喔～聽起來還不錯啊」的 Project。XDD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再說我們身在這個年代，&lt;/p&gt;
&lt;p&gt;有各種雲端服務幫你搞定基礎建設（IaaS、SaaS、PaaS），&lt;/p&gt;
&lt;p&gt;還有各種框架幫你搞定 UI。&lt;/p&gt;
&lt;p&gt;基本上你只要有想法、計畫，再加上一段時間穩紮穩打的學習、練習，&lt;/p&gt;
&lt;p&gt;幾乎就能解開各種 Issue 了，&lt;/p&gt;
&lt;p&gt;不覺得很讚嗎？&lt;/p&gt;
&lt;p&gt;讚讚讚！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/Clairvoyance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github repo: Clairvoyance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/clairvoyance4job/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;facebook 粉絲專頁&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也期許自己未來是真正的 RD 工程師，&lt;/p&gt;
&lt;p&gt;而不是出現 bug 只會 XD 的 XD 工程師：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lwFbW4l.jpg&quot; alt=&quot;XD&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺析 serverless 架構與實作&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brewer’s CAP Theorem&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/03/techonology-vs-equality.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;技术会带来社会平等吗？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://groundbreaking.tw/wordpress/archives/2055&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此處有bug：程序員統治的黑暗世界&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;這篇可能不會講到太多直接跟技術相關的東西，&lt;/p&gt;
&lt;p&gt;如果你對這個東西怎麼寫出來比較有興趣的話，&lt;/p&gt;
&lt;p&gt;可以看這篇：&lt;a href=&quot;http://abalone0204.github.io/2016/06/12/clv-dev-note/&quot;&gt;Clairvoyance 是怎麼開發的&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是希望這次從開發到現在較多人使用，&lt;/p&gt;
&lt;p&gt;中間受到許多幫助和指點的經驗，能夠被記錄下來，&lt;/p&gt;
&lt;p&gt;假如以後有人遇到一樣的事情能從中借鏡。&lt;/p&gt;
&lt;p&gt;當然，這也是對自己的一個反省。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先還是得先講一下求職天～眼通是什麼。&lt;/p&gt;
&lt;p&gt;它其實就是個 chrome 的 extension，&lt;/p&gt;
&lt;p&gt;裝了它以後，能在人力銀行的職缺下方給評論，以及看到其他人給的評論，&lt;/p&gt;
&lt;p&gt;載點在這裡：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A/mdneakdlnoidknagkamfeambdefhppbi?hl=zh-TW&amp;amp;gl=TW&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abalone0204/Clairvoyance/master/chrome-store-available.png&quot; alt=&quot;pic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他說明的話 &lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1465759641.A.E57.html&quot;&gt;ptt 上的文章&lt;/a&gt;會清楚得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QvYeAmN.png&quot; alt=&quot;Jean Grey and Cyclops from Entertainment Weekly&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jean Grey and Cyclops from Entertainment Weekly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目錄&quot;&gt;&lt;a href=&quot;#目錄&quot; class=&quot;headerlink&quot; title=&quot;目錄&quot;&gt;&lt;/a&gt;目錄&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#在開始動手寫程式之前&quot;&gt;在開始動手寫程式之前&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有這一小段會講到比較多技術相關的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#發布-Beta-版本&quot;&gt;發布 Beta 版本&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#收到回饋之後&quot;&gt;收到回饋之後&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#商業化的迷思以及贊助管道&quot;&gt;商業化的迷思以及贊助管道&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#未來方向&quot;&gt;未來方向&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#一個軟體工作者的反思&quot;&gt;一個軟體工作者的反思&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="serverless" scheme="http://abalone0204.github.com/tags/serverless/"/>
    
      <category term="clairvoyance" scheme="http://abalone0204.github.com/tags/clairvoyance/"/>
    
      <category term="chrome-extension" scheme="http://abalone0204.github.com/tags/chrome-extension/"/>
    
  </entry>
  
  <entry>
    <title>Clairvoyance 是怎麼開發的</title>
    <link href="http://abalone0204.github.com/2016/06/12/clv-dev-note/"/>
    <id>http://abalone0204.github.com/2016/06/12/clv-dev-note/</id>
    <published>2016-06-12T19:07:33.000Z</published>
    <updated>2016-06-20T07:06:19.207Z</updated>
    
    <content type="html">&lt;p&gt;我寫了一個 chrome 的插件，&lt;/p&gt;
&lt;p&gt;能夠讓求職者在人力銀行的職缺下面留言討論。&lt;/p&gt;
&lt;p&gt;聽起來是很平常的需求，不過各大人力銀行就是不做這個功能，&lt;/p&gt;
&lt;p&gt;所以我想看看假如有這個功能會不會對求職有正向的幫助。&lt;/p&gt;
&lt;p&gt;下載的連結在這裡： &lt;a href=&quot;https://chrome.google.com/webstore/detail/clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A/mdneakdlnoidknagkamfeambdefhppbi?hl=zh-TW&amp;amp;gl=TW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clairvoyance - 求職天眼通&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前還在 beta 階段，可能會有些 bug，&lt;/p&gt;
&lt;p&gt;可以到&lt;a href=&quot;https://www.facebook.com/Clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A-1084564708284768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;粉絲頁&lt;/a&gt;留言，&lt;/p&gt;
&lt;p&gt;或是在 &lt;a href=&quot;https://github.com/abalone0204/Clairvoyance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 上直接發 issue。&lt;/p&gt;
&lt;p&gt;下面就來筆記一下為什麼要做這件事，以及怎麼做到的。&lt;/p&gt;
&lt;p&gt;用的技術就是以下列的這些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;front-end: reactjs、redux、redux-saga&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;back-end: aws-lambda, dynamodb, serverless-framework&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只支援 104 和 1111，至於 yes123，後面會再提到為什麼暫時沒做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面來簡介一下是怎麼做出來、以及為什麼要做。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abalone0204/Clairvoyance/master/static/intro.jpg&quot; alt=&quot;clv intro&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;為什麼要做這件事情？&lt;/p&gt;
&lt;p&gt;其實我比較想問的問題是：為什麼不要做這件事情呢？&lt;/p&gt;
&lt;p&gt;我們買商品的時候，在拍賣網站上就可以看到買家對店家的評價、對商品的評價，&lt;/p&gt;
&lt;p&gt;而求職的時候，卻一定要到其他討論區、其他網站，&lt;/p&gt;
&lt;p&gt;才能看到其他人對於該職缺或公司的評價，&lt;/p&gt;
&lt;p&gt;這其實是一件很不自然的事情，&lt;/p&gt;
&lt;p&gt;再說種種擔心對手黑函還是求職者亂抹黑什麼的，&lt;/p&gt;
&lt;p&gt;嗯⋯⋯電商其實也會遇到這樣的事情，&lt;/p&gt;
&lt;p&gt;總之想不到一個很合理的解釋，&lt;/p&gt;
&lt;p&gt;唯一能想得到的解釋就是&lt;strong&gt;「盈利模式」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;目前我們在人力銀行上找工作，其實是不用付錢的，&lt;/p&gt;
&lt;p&gt;但是企業卻是要付費用才能張貼職缺。&lt;/p&gt;
&lt;p&gt;合理的推斷，&lt;/p&gt;
&lt;p&gt;其實我們這些求職方就是人力銀行的商品，&lt;/p&gt;
&lt;p&gt;真正的使用者是那些企業用戶（資方），&lt;/p&gt;
&lt;p&gt;而讓使用者能夠留言討論的功能，&lt;/p&gt;
&lt;p&gt;可能會讓部分企業用戶不想使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看各大人力銀行上，許多職缺都喜歡「面議」&lt;/p&gt;
&lt;p&gt;就知道資訊不對稱對於資方來說是一件多麼正常的事情&lt;/p&gt;
&lt;p&gt;我不會認為敘薪是簡單的，&lt;/p&gt;
&lt;p&gt;但給個底價，避免浪費彼此時間這件事，&lt;/p&gt;
&lt;p&gt;真心不應該難道哪裡去。&lt;/p&gt;
&lt;p&gt;否則騙人去面試的行為，其實跟詐騙集團一樣可恥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;無論背後的動機是什麼，&lt;/p&gt;
&lt;p&gt;既然人力銀行有其考量不做這件事、我又認為有需要的話，&lt;/p&gt;
&lt;p&gt;那與其動嘴巴抱怨台灣的求職平台不好用，&lt;/p&gt;
&lt;p&gt;不如自己來做做看，看能不能為台灣險峻的就業環境帶來一些幫助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在做這個 side project 之前，&lt;/p&gt;
&lt;p&gt;其實我自己找工作從來都沒有用過各大人力銀行，&lt;/p&gt;
&lt;p&gt;這次還花蠻多時間在探究自己到底為什麼不用這些平台，&lt;/p&gt;
&lt;p&gt;以及他們到底缺少了什麼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;What-is-clairvoyance&quot;&gt;&lt;a href=&quot;#What-is-clairvoyance&quot; class=&quot;headerlink&quot; title=&quot;What is clairvoyance&quot;&gt;&lt;/a&gt;What is clairvoyance&lt;/h1&gt;&lt;p&gt;為什麼是這個名字？ &lt;/p&gt;
&lt;p&gt;命名一直是蠻困難的一件事情，&lt;/p&gt;
&lt;p&gt;本來有想過要叫什麼 job-bar in in der。&lt;/p&gt;
&lt;p&gt;不過後來還是靈光一現跑出這個單字：&lt;/p&gt;
&lt;p&gt;Clairvoyance。&lt;/p&gt;
&lt;p&gt;為什麼要取這個名字有兩個版本的故事：&lt;/p&gt;
&lt;h2 id=&quot;高級版本&quot;&gt;&lt;a href=&quot;#高級版本&quot; class=&quot;headerlink&quot; title=&quot;高級版本&quot;&gt;&lt;/a&gt;高級版本&lt;/h2&gt;&lt;p&gt;Clairvoyance，可以翻作洞察力或是透視，&lt;/p&gt;
&lt;p&gt;主要是希望透過求職者彼此分享經驗，&lt;/p&gt;
&lt;p&gt;來透視一個職缺的好壞，或是否適合他。&lt;/p&gt;
&lt;h2 id=&quot;真實版本&quot;&gt;&lt;a href=&quot;#真實版本&quot; class=&quot;headerlink&quot; title=&quot;真實版本&quot;&gt;&lt;/a&gt;真實版本&lt;/h2&gt;&lt;p&gt;其實就是 google 天眼通，&lt;/p&gt;
&lt;p&gt;翻譯的第一個單字就是 Clairvoyance，&lt;/p&gt;
&lt;p&gt;然後我蠻喜歡周星馳的賭聖，所以就這樣命名了。&lt;/p&gt;
&lt;h1 id=&quot;Why-is-Clairvoyance&quot;&gt;&lt;a href=&quot;#Why-is-Clairvoyance&quot; class=&quot;headerlink&quot; title=&quot;Why is Clairvoyance&quot;&gt;&lt;/a&gt;Why is Clairvoyance&lt;/h1&gt;&lt;p&gt;其實會做這個 project ，&lt;/p&gt;
&lt;p&gt;有一部分是因為自己最近開始接觸分散式運算，&lt;/p&gt;
&lt;p&gt;開始了解去中心化的想法，&lt;/p&gt;
&lt;p&gt;我認為與其把所有對平台上職缺的評論給「集中」起來，&lt;/p&gt;
&lt;p&gt;不如將它分散到各自原本的職缺下方，&lt;/p&gt;
&lt;p&gt;然後再將相同職缺的評論同步。（Consistency）&lt;/p&gt;
&lt;p&gt;這樣的做法是更合理，而且使用起來更有效率的。&lt;/p&gt;
&lt;h1 id=&quot;Architecture&quot;&gt;&lt;a href=&quot;#Architecture&quot; class=&quot;headerlink&quot; title=&quot;Architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;假如說一開始我知道會這麼搞剛的話，&lt;/p&gt;
&lt;p&gt;應該就會放棄了⋯⋯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整個 project 主要分成三塊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/Clairvoyance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gui&lt;/a&gt;：Chrome extension 的 UI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/serverless-clairvoyance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serverless-clv-backend&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;處理後端的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/serverless-clv-oauth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serverless-clv-auth&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;問題：chrome 的插件是明碼的，假如要在上面做認證，就要在 chrome 上面直接放 secret key，這樣做一點都不 secret&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解法：開了一個 serverless 的 api 專門來做這件事情，在 repo 的 README 裡面蠻詳細的紀錄如何做到，所以這篇裡面不會贅述這一點。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這裡畫了個很粗略的圖，看一下會比較有概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clv = clairvoyance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abalone0204/Clairvoyance/master/clv-arc.png&quot; alt=&quot;clv arc&quot;&gt;&lt;/p&gt;
&lt;p&gt;其實 backend 就是處理留言、工作、使用者，&lt;/p&gt;
&lt;p&gt;而我並不想自己維護一台機器做這些事情，&lt;/p&gt;
&lt;p&gt;所以我用了 serverless 的方式去解決，&lt;/p&gt;
&lt;p&gt;想要瞭解更多關於 serverless 基礎的人，&lt;/p&gt;
&lt;p&gt;可以看一下這篇舊文：&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺析 serverless 架構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是我剛學習 serverless 時做的筆記，&lt;/p&gt;
&lt;p&gt;同時也是繁體中文裡面最詳細的新手教學。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就算簡體中文其實也是啦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前端的話，有一些比較討厭的部分就是非同步的處理，&lt;/p&gt;
&lt;p&gt;但這裡 saga 很簡單的幫我 handle 處理好了，&lt;/p&gt;
&lt;p&gt;而且還給了相當好的測試性，&lt;/p&gt;
&lt;p&gt;這點非常非常重要，&lt;/p&gt;
&lt;p&gt;測試省掉了我不少 debug 的時間。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中間大概重構了一兩次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Back-end&quot;&gt;&lt;a href=&quot;#Back-end&quot; class=&quot;headerlink&quot; title=&quot;Back-end&quot;&gt;&lt;/a&gt;Back-end&lt;/h1&gt;&lt;p&gt;首先就是要先訂好 schema，以及各個資料相互的關聯性，&lt;/p&gt;
&lt;p&gt;這裡有用到 GSI 來建立查詢的 index，&lt;/p&gt;
&lt;p&gt;雖然我們會用公司名稱以及職缺名稱來查詢，&lt;/p&gt;
&lt;p&gt;但這兩樣東西都不適合拿來當作 Primary Key，&lt;/p&gt;
&lt;p&gt;我覺得看完這篇官方的&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/BestPractices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最佳實踐&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;就已經差不多能掌握怎樣去設計一個拿 dynamodb 當作資料庫服務的心法，&lt;/p&gt;
&lt;p&gt;剩下的只是把資料長怎樣想清楚而已。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 DyanmoDB 時，會考慮到資料一致性的問題。&lt;/p&gt;
&lt;p&gt;但畢竟這不是一個非常要求即時性的服務，&lt;/p&gt;
&lt;p&gt;所以我對於最終一致性這件事情是有相當高的容忍度的 :D&lt;/p&gt;
&lt;p&gt;什麼是最終一致性呢？&lt;/p&gt;
&lt;p&gt;就是我們不保證每個節點讀取資料時，資料都會是相同的，（強一致性）&lt;/p&gt;
&lt;p&gt;但隨著時間過去，每個節點上的數據會回歸一致。&lt;/p&gt;
&lt;p&gt;這只是很粗略的說法，接下來幾個禮拜可能會寫一些和分散式有關的，&lt;/p&gt;
&lt;p&gt;就會提到這一點。因為一致性對於分散式運算來說一直是一個很頭痛的問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Front-end&quot;&gt;&lt;a href=&quot;#Front-end&quot; class=&quot;headerlink&quot; title=&quot;Front-end&quot;&gt;&lt;/a&gt;Front-end&lt;/h1&gt;&lt;p&gt;我選擇使用 React 及 Redux 的原因蠻單純的，&lt;/p&gt;
&lt;p&gt;因為我最近常在工作上用到它們。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reactjs+ CSS Module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS 的命名一直是一個很難解的問題，這裡我的想法是無論再怎麼有效的規範，都是軟性的，CSS 的特性讓全域污染這件事情變得難以避免。但 CSS Module 卻可以讓所有的 class 都變成 local 的，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React 以 component 為主的開發模式，跟 CSS Module 搭配起來相當不錯&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redux Saga&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;處理非同步的資料流（像是從 backend fetch 資料）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些 UI 上的 transaction 都可以在 saga 處理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 saga 的重點是「測試」，effect 的概念讓測試變得簡單很多，少了各種 mock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其實這裡本來想用 Rx 搞定，但工作上真的用了太多 Saga，現在有點回不去了⋯⋯&lt;/p&gt;
&lt;p&gt;假如你未曾瞭解過 saga，可以看一下我的這篇文章 &lt;a href=&quot;http://abalone0204.github.io/2016/05/14/redux-saga/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Saga Pattern 在前端的應用&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;UX&quot;&gt;&lt;a href=&quot;#UX&quot; class=&quot;headerlink&quot; title=&quot;UX&quot;&gt;&lt;/a&gt;UX&lt;/h1&gt;&lt;p&gt;這裡不是要說有著多精美的 UI，&lt;/p&gt;
&lt;p&gt;是自己開發時，總覺得我開發的東西，真他媽怎麼用怎麼順手啊！&lt;/p&gt;
&lt;p&gt;實際上別人一看到時，卻常常完全不是這麼一回事。&lt;/p&gt;
&lt;p&gt;最好的方法就是請朋友幫忙用一下，&lt;/p&gt;
&lt;p&gt;然後什麼都不要跟他說，也不要有任何預先的假設。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒錯，就算你有說明書，User 就是死都不會看（我也是）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很常發生的事情就是 User 完全不知道你想幹什麼，&lt;/p&gt;
&lt;p&gt;留言區塊那邊一開始就是這麼一回事，&lt;/p&gt;
&lt;p&gt;所以如果有人說你做的東西「太工程師」、「太 geek」，&lt;/p&gt;
&lt;p&gt;大概就是這個樣子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感謝我的幾個被我巴著幫忙測試的朋友。 &lt;code&gt;m (_ _) m&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;目前只支援 1111 以及 104，&lt;/p&gt;
&lt;p&gt;yes123 的 url，有那麼一點難以預測⋯⋯&lt;/p&gt;
&lt;p&gt;不過也是因為這個 Project ，可以感覺到各個求職平台是否用心，&lt;/p&gt;
&lt;p&gt;未來要加入的功能應該有以下幾項：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;個人留言職缺的追蹤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Facebook 粉絲頁的機器人&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;幫忙發布熱門討論的職缺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重構&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比較有問題的應該是建立職缺那裡的 code 很醜 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實我知道這個 beta 版本還有許多可以更好的地方，&lt;/p&gt;
&lt;p&gt;不過我更想瞭解這個插件是不是真的能解決一些問題，&lt;/p&gt;
&lt;p&gt;所以就先釋出這個 beta 版了！&lt;/p&gt;
&lt;p&gt;假如有什麼想問的問題也可以留言、發 issue 或直接跟問我，&lt;/p&gt;
&lt;p&gt;對我來說，不只是想 build 一個小小的插件，&lt;/p&gt;
&lt;p&gt;我想造出一個對求職者來說真正透明友善的環境，&lt;/p&gt;
&lt;p&gt;我知道一定會有蠻多人覺得這真是 too young, too naive 的想法，&lt;/p&gt;
&lt;p&gt;不過不試試看，怎麼會知道結果怎樣勒？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下載位置：&lt;a href=&quot;https://chrome.google.com/webstore/detail/clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A/mdneakdlnoidknagkamfeambdefhppbi?hl=zh-TW&amp;amp;gl=TW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clairvoyance - 求職天眼通&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/BestPractices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DynamoDB 的最佳實踐&lt;/a&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我寫了一個 chrome 的插件，&lt;/p&gt;
&lt;p&gt;能夠讓求職者在人力銀行的職缺下面留言討論。&lt;/p&gt;
&lt;p&gt;聽起來是很平常的需求，不過各大人力銀行就是不做這個功能，&lt;/p&gt;
&lt;p&gt;所以我想看看假如有這個功能會不會對求職有正向的幫助。&lt;/p&gt;
&lt;p&gt;下載的連結在這裡： &lt;a href=&quot;https://chrome.google.com/webstore/detail/clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A/mdneakdlnoidknagkamfeambdefhppbi?hl=zh-TW&amp;amp;gl=TW&quot;&gt;Clairvoyance - 求職天眼通&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前還在 beta 階段，可能會有些 bug，&lt;/p&gt;
&lt;p&gt;可以到&lt;a href=&quot;https://www.facebook.com/Clairvoyance-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A-1084564708284768&quot;&gt;粉絲頁&lt;/a&gt;留言，&lt;/p&gt;
&lt;p&gt;或是在 &lt;a href=&quot;https://github.com/abalone0204/Clairvoyance&quot;&gt;github&lt;/a&gt; 上直接發 issue。&lt;/p&gt;
&lt;p&gt;下面就來筆記一下為什麼要做這件事，以及怎麼做到的。&lt;/p&gt;
&lt;p&gt;用的技術就是以下列的這些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;front-end: reactjs、redux、redux-saga&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;back-end: aws-lambda, dynamodb, serverless-framework&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只支援 104 和 1111，至於 yes123，後面會再提到為什麼暫時沒做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面來簡介一下是怎麼做出來、以及為什麼要做。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/abalone0204/Clairvoyance/master/static/intro.jpg&quot; alt=&quot;clv intro&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="serverless" scheme="http://abalone0204.github.com/tags/serverless/"/>
    
      <category term="chrome-extension" scheme="http://abalone0204.github.com/tags/chrome-extension/"/>
    
      <category term="career" scheme="http://abalone0204.github.com/tags/career/"/>
    
      <category term="job" scheme="http://abalone0204.github.com/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>實作 Serverless 的 facebook messenger bot</title>
    <link href="http://abalone0204.github.com/2016/05/29/sls-fb-bot/"/>
    <id>http://abalone0204.github.com/2016/05/29/sls-fb-bot/</id>
    <published>2016-05-29T11:55:40.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;上禮拜簡單介紹了一下 serverless 的起手式後，&lt;/p&gt;
&lt;p&gt;我想再舉個更接近實際應用的例子，&lt;/p&gt;
&lt;p&gt;儘管並不是所有的應用都適合 serverless 的架構，&lt;/p&gt;
&lt;p&gt;但聊天機器人(chat bot)是一個相當好的例子，&lt;/p&gt;
&lt;p&gt;且讓我稍後再說明為什麼。&lt;/p&gt;
&lt;p&gt;今天就結合一下很實用的粉絲頁回覆機器人以及 serverless 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以把聊天機器人想成是你粉絲頁自動回覆的員工&lt;/p&gt;
&lt;p&gt;或是進行一些簡單的操作&lt;/p&gt;
&lt;p&gt;而聊天機器人流行起來的原因正是因為 mobile 裝置上的介面，&lt;/p&gt;
&lt;p&gt;並不能滿足於現代人操作的所有需求，&lt;/p&gt;
&lt;p&gt;聊天的介面解放了我們在小框框裡做事的限制。&lt;/p&gt;
&lt;p&gt;或者是你是小小公司的開發者，需要一個助理來幫你做很無腦或繁瑣的事情，&lt;/p&gt;
&lt;p&gt;再講下去可能要一篇了，如果你對這個主題有興趣，&lt;/p&gt;
&lt;p&gt;可以看看 &lt;a href=&quot;https://wanqu.co/blog/2015-05-24-behind-the-scenes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;灣區日報是如何運作的&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JmVfjQ5.png&quot; alt=&quot;bot&quot;&gt;&lt;/p&gt;
&lt;p&gt;微軟、line、slack 都出了，&lt;/p&gt;
&lt;p&gt;臉書當然也要 bot 來幫我們處理一些事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相當不建議直接照著貼，可以先看看我的前一篇文章，&lt;/p&gt;
&lt;p&gt;至少現在敢大膽的說是目前最詳盡的 serverless 繁體中文入門教學：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺析 serverless 架構與實作&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這一篇筆記裡面會介紹如何把一個 facebook 粉絲專頁的 bot，&lt;/p&gt;
&lt;p&gt;用 serverless 的方式架起來。&lt;/p&gt;
&lt;p&gt;這個 bot 能夠：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;處理粉絲專頁接收到訊息的 events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;執行對應的動作或回傳訊息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為了保持簡單，並且專注在 messenger bot 本身，&lt;/p&gt;
&lt;p&gt;我不會用到其他服務的 events，像是 DynamoDB 或是 S3 之類的，&lt;/p&gt;
&lt;p&gt;但其實只要能掌握收訊息，以及對應訊息做出動作，&lt;/p&gt;
&lt;p&gt;基本上就掌握了搭配其他功能的 interface 了 :D&lt;/p&gt;
&lt;p&gt;假如你是個懶得看文章的人，我一樣把 code 放在 github 上面了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abalone0204/serverless-facebook-messenger-bot-starter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serverless-facebook-messenger-bot-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有幫助到你的話給星星打賞，有問題的話也歡迎提 issue 或直接告訴我。&lt;/p&gt;
&lt;h1 id=&quot;Catalogue&quot;&gt;&lt;a href=&quot;#Catalogue&quot; class=&quot;headerlink&quot; title=&quot;Catalogue&quot;&gt;&lt;/a&gt;Catalogue&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Why-serverless&quot;&gt;Why serverless&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Implementation&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#申請作業&quot;&gt;申請作業&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Serverless-環境建構&quot;&gt;Serverless 環境建構&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#https&quot;&gt;https&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Deployment-部署&quot;&gt;Deployment 部署&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Subscribe-to-fan-page&quot;&gt;Subscribe to fan page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Reply-回覆訊息&quot;&gt;Reply - 回覆訊息&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#更複雜的回覆訊息格式&quot;&gt;更複雜的回覆訊息格式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Why-serverless&quot;&gt;&lt;a href=&quot;#Why-serverless&quot; class=&quot;headerlink&quot; title=&quot;Why serverless&quot;&gt;&lt;/a&gt;Why serverless&lt;/h1&gt;&lt;p&gt;為什麼我認為 chat bot 是一個非常適合 serverless 架構的運用？&lt;/p&gt;
&lt;p&gt;想想我們平常聊天，訊息也都不會馬上回嘛！&lt;/p&gt;
&lt;p&gt;所以我們其實不需要那麼真正的「real time」，&lt;/p&gt;
&lt;p&gt;而且只有在有人丟訊息時，lambda 才會幫我們運算，&lt;/p&gt;
&lt;p&gt;省下了不少機器閒置在那的費用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;對於延遲時間的容忍度高：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容忍了 serverless 的缺點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有使用才收費：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;省錢、加上使用情境相當符合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;簡單的運算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS lambda 運算時間不能超過五分鐘，否則會被強制結束，但這種簡單的文字回覆，通常處理不會超過五分鐘…吧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;當然如果你要跑什麼類神經網路，那我會建議那些運算邏輯可以放在真正的 server 上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;題外話是這篇 &lt;a href=&quot;http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;面試遇到 用 deep learning 解 fizzbuzz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到後面超好笑 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https&lt;/code&gt;: facebook 的 bot 會需要有 https ，通常可以透過 CloudFlare 免費申請一個，但假如你使用 lambda 的話，原生給你的連結就是 https 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h1&gt;&lt;p&gt;同樣的，因為我認為介面隨時會改變，&lt;/p&gt;
&lt;p&gt;所以我不做截圖的 step by step 。&lt;/p&gt;
&lt;h2 id=&quot;申請作業&quot;&gt;&lt;a href=&quot;#申請作業&quot; class=&quot;headerlink&quot; title=&quot;申請作業&quot;&gt;&lt;/a&gt;申請作業&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申請 facebook app、一個要用到的粉絲頁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;申請的類型有 ios、android 什麼的，&lt;/p&gt;
&lt;p&gt;先選網頁，然後網址可以亂打一通，這對之後沒有影響&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;到 facebook 的 app 控制台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在控制列選擇新增產品&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;選 Messenger Expression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;會看到一個新的 Messenger 跑出來了，選它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接著可以選擇你要把你的 bot 安置的粉絲頁，選擇後會得到一個權杖。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得權杖是一個一聽會覺得「啥？」的命名，&lt;/p&gt;
&lt;p&gt;不過它的意思就是你能夠讓 bot 藉由這個「權杖」，&lt;/p&gt;
&lt;p&gt;取得在你粉絲頁發文或是發訊息的「權利」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;接下來選擇 setup webhooks&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什麼是 Webhook？&lt;/p&gt;
&lt;p&gt;你可以把它看成是一種 back-end 到 back-end 之間的通知，&lt;/p&gt;
&lt;p&gt;最常見的例子就是 CI 了&lt;/p&gt;
&lt;p&gt;e.q：今天在 github 上送了一個 commit，&lt;/p&gt;
&lt;p&gt;webhook 就會把這邊更新的訊息帶去給 CI server，&lt;/p&gt;
&lt;p&gt;CI server 收到後就會開始跑後續的流程&lt;/p&gt;
&lt;p&gt;hook，就是鉤子，在網路上把訊息以及收到訊息要執行的行為鉤住，&lt;/p&gt;
&lt;p&gt;帶到別的地方(callback url)去的就是 webhook&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;到這裡我們就可以去設置一下環境了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Serverless-環境建構&quot;&gt;&lt;a href=&quot;#Serverless-環境建構&quot; class=&quot;headerlink&quot; title=&quot;Serverless 環境建構&quot;&gt;&lt;/a&gt;Serverless 環境建構&lt;/h2&gt;&lt;p&gt;為了驗證我們的 callback 是不是正確的，&lt;/p&gt;
&lt;p&gt;facebook 這邊會去做驗證，&lt;/p&gt;
&lt;p&gt;確認它送來的&lt;code&gt;hub.verify_token&lt;/code&gt;跟你粉絲專頁的權杖一樣時，&lt;/p&gt;
&lt;p&gt;就會把 request 中的&lt;code&gt;hub.challenge&lt;/code&gt;送回來。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡有個小雷是我們要送回來的值是 integer，不是 string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方的例子大概長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Node.js Example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/webhook&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.query[&lt;span class=&quot;string&quot;&gt;&#39;hub.verify_token&#39;&lt;/span&gt;] === &amp;lt;YOUR_VERIFY_TOKEN&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send(req.query[&#39;hub.challenge&#39;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send(&#39;Error, wrong validation token&#39;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著就一如往常的開一個 serverless 專案，&lt;/p&gt;
&lt;p&gt;建立一個 handler function。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;參考這邊&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/#Setup-開發環境的建置&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serverless setup 開發環境的建置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverless function create functions/bot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然後在來看程式的進入點：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; operation = event.operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;verify&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; secret = event.secret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; verifyToken = event[&lt;span class=&quot;string&quot;&gt;&quot;verify_token&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (secret === verifyToken) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.succeed(&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(event[&lt;span class=&quot;string&quot;&gt;&quot;challenge&quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unmatch&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unrecognized operation &quot;&#39;&lt;/span&gt; + operation + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;operation&lt;/code&gt;這個屬性是為了後續的動作，&lt;/p&gt;
&lt;p&gt;不管對這個 callback url 呼叫東西，&lt;/p&gt;
&lt;p&gt;都會進入這個 &lt;code&gt;handler.js&lt;/code&gt; 但是我們必須有不同的動作，&lt;/p&gt;
&lt;p&gt;我認為這裡都是屬於在 bot 執行動作的邏輯之下，&lt;/p&gt;
&lt;p&gt;所以將它們放在同一個 handler.js 中，你完全可以有不同的編排方式 :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;event&lt;/code&gt; 裡的東西哪裡來呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;event&lt;/code&gt;其實就是 request，serverless 是個 event-driven 的架構，&lt;/p&gt;
&lt;p&gt;我們可以在 &lt;code&gt;s-templates&lt;/code&gt; 裡面去設置 template，&lt;/p&gt;
&lt;p&gt;這裡有個 tricky 的問題，就是要怎麼處理權杖？&lt;/p&gt;
&lt;p&gt;有兩種方法，&lt;/p&gt;
&lt;p&gt;一種是在本地端用 module export 的方式解決，&lt;/p&gt;
&lt;p&gt;另一種則是用 aws 的 env variable。&lt;/p&gt;
&lt;p&gt;首先先看用 aws 的 variable 怎麼解決&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sls variables set -k KEY -v VALUE -s STAGE -r REGION&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然後我們就可以在 template 中使用 ${KEY} 的語法來拿到 variable，&lt;/p&gt;
&lt;p&gt;這裡要注意你是不是在每個不一樣的 stage 以及 region 都設置了 variable。&lt;/p&gt;
&lt;p&gt;要檢查的話可以進去自動生成的 &lt;code&gt;_meta&lt;/code&gt; 資料夾看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;_meta&lt;/code&gt; 是自動被 git 給忽略的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下來到 &lt;code&gt;s-function.json&lt;/code&gt; 裡面設定 request 的 template，&lt;/p&gt;
&lt;p&gt;把 callback&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot;requestTemplates&quot;: &quot;$$&amp;#123;apiGetCallbackTemplate&amp;#125;&quot;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來看 &lt;code&gt;template&lt;/code&gt; 長什麼樣子：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;apiGetCallbackTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;verify&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;fb_secret_key&amp;#125;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;verify_token&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.params(&#39;hub.verify_token&#39;)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;challenge&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;$input.params(&#39;hub.challenge&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如你還不太熟悉 serverless，&lt;/p&gt;
&lt;p&gt;這裡就是在描述剛剛 &lt;code&gt;handler&lt;/code&gt; 中&lt;code&gt;event&lt;/code&gt;的長相：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;FB_SECRET_KEY&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;verify_token&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;VERIFY_TOKEN&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;challenge&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;CHALLENGE_CODE&quot;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能會覺得對方如果知道你的 callback url 那不就顯示出你的 secret 了嗎？&lt;/p&gt;
&lt;p&gt;其一是這個連結不會對外，而你也可以限制 request 的來源，&lt;/p&gt;
&lt;p&gt;而這也是為什麼要加上這一段的原因：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (secret === verifyToken) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.succeed(&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(event[&lt;span class=&quot;string&quot;&gt;&quot;challenge&quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unmatch&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果沒有 secret 跟 verifyToken 沒有相等的話，&lt;/p&gt;
&lt;p&gt;會直接結束，並且返回 error。&lt;/p&gt;
&lt;p&gt;假如你不熟悉 aws 也不想接受這樣的做法的話，&lt;/p&gt;
&lt;p&gt;你可以在本地新建一個&lt;code&gt;secret.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; secret = &lt;span class=&quot;string&quot;&gt;&quot;FB_SECRET_KEY&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然後把這支檔案 &lt;code&gt;.gitignore&lt;/code&gt; 就行了，&lt;/p&gt;
&lt;p&gt;不過這其實算是一種 hack 的方式，並不是一個很漂亮的做法。&lt;/p&gt;
&lt;h2 id=&quot;https&quot;&gt;&lt;a href=&quot;#https&quot; class=&quot;headerlink&quot; title=&quot;https&quot;&gt;&lt;/a&gt;https&lt;/h2&gt;&lt;p&gt;假如你要自己 host 一個服務來放 bot 的話，&lt;/p&gt;
&lt;p&gt;還要去額外申請 https，但如果你用 serverless，&lt;/p&gt;
&lt;p&gt;搭配 api gateway 就直接幫你避免掉了這個問題&lt;/p&gt;
&lt;h2 id=&quot;Deployment-部署&quot;&gt;&lt;a href=&quot;#Deployment-部署&quot; class=&quot;headerlink&quot; title=&quot;Deployment 部署&quot;&gt;&lt;/a&gt;Deployment 部署&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverless dash deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;function - callback&lt;/code&gt; 跟 &lt;code&gt;endpoint - callback&lt;/code&gt; 都選起來，&lt;/p&gt;
&lt;p&gt;部署上去之後會返回一個網址，&lt;/p&gt;
&lt;p&gt;當我們對這個網址送一個帶有 http method 為 GET 的 Requst 時，&lt;/p&gt;
&lt;p&gt;就會進入我們剛剛看到的 &lt;code&gt;handler.js&lt;/code&gt; 中執行東西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup wehook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後就是把返回的那個網址貼在 callback url 那裡，&lt;/p&gt;
&lt;p&gt;再把權杖給貼上去：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-tpe1-1.xx.fbcdn.net/t39.2178-6/12057143_211110782612505_894181129_n.png&quot; alt=&quot;webhook setup&quot;&gt;&lt;/p&gt;
&lt;p&gt;(下面的欄位我都會全勾起來 XD)&lt;/p&gt;
&lt;p&gt;正確的方式應該是在 back-end 上放上 secret（這裡指權杖），&lt;/p&gt;
&lt;p&gt;facebook 會送個 request 到你的 callbakc url 去，&lt;/p&gt;
&lt;p&gt;並且看看在 params 中的 &lt;code&gt;hub.verify_token&lt;/code&gt; 是不是等於你放上去的 secret，&lt;/p&gt;
&lt;p&gt;如果是的話，再把 params 中的 &lt;code&gt;hub.challenge&lt;/code&gt; 當作 response 丟回來，&lt;/p&gt;
&lt;p&gt;facebook 就會判定你這個 webhook 通過認證，&lt;/p&gt;
&lt;p&gt;後續才能繼續進行下去。&lt;/p&gt;
&lt;h2 id=&quot;Subscribe-to-fan-page&quot;&gt;&lt;a href=&quot;#Subscribe-to-fan-page&quot; class=&quot;headerlink&quot; title=&quot;Subscribe to fan page&quot;&gt;&lt;/a&gt;Subscribe to fan page&lt;/h2&gt;&lt;p&gt;有兩種方法可以去「監聽」粉絲專頁收到訊息的 event。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以在 facebook app 操作的後台上選擇你要訂閱哪個粉絲專頁收到的訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如你寫過 rx，會知道 subscribe 可以監聽 event 是否進來，&lt;/p&gt;
&lt;p&gt;接著我們會去做對應的動作。&lt;/p&gt;
&lt;p&gt;假如你沒寫過 rx，&lt;del&gt;那你應該去學一下&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;簡單說就是當我們監聽的粉絲專頁收到訊息時，&lt;/p&gt;
&lt;p&gt;剛剛設定的 webhook 會送一個 post method 的 request，&lt;/p&gt;
&lt;p&gt;而我們可以做出對應的行為，這裡通常就是返回一些訊息，&lt;/p&gt;
&lt;p&gt;facebook 的 messenger 還可以回傳附件之類的。&lt;/p&gt;
&lt;p&gt;官方給的 demo code 長這個樣子，先只要大略掃過一遍就好，&lt;/p&gt;
&lt;p&gt;後面會更詳細解說這裡在幹什麼，&lt;/p&gt;
&lt;p&gt;畢竟第一次看到的時候我也不知道這到底在幹嘛：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/webhook/&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  messaging_events = req.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging; &lt;span class=&quot;comment&quot;&gt;// 拿到 request 中的訊息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; messaging_events.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event = req.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = event.sender.id; &lt;span class=&quot;comment&quot;&gt;// 送訊息人的 id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.message &amp;amp;&amp;amp; event.message.text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      text = event.message.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Handle a text message from this sender&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.sendStatus(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;唯一知道的是我們送訊息時，會丟一個 POST reqeust 給 webhook，&lt;/p&gt;
&lt;p&gt;雖然最後得到了一個 &lt;code&gt;sender&lt;/code&gt;（訊息的發送者），以及傳送的&lt;code&gt;text&lt;/code&gt;訊息，&lt;/p&gt;
&lt;p&gt;還是有點搞不懂到底在做什麼，像遇到這種情形時，&lt;/p&gt;
&lt;p&gt;把東西 log 出來就對了。&lt;/p&gt;
&lt;p&gt;所以第一個目標就是來觀察一下 facebook 到底會送一些什麼東西過來。&lt;/p&gt;
&lt;p&gt;先把 post method 的 template 建出來&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;apiPostCallbackTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;reply&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.json(&#39;$&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;handler.js&lt;/code&gt; 中其實 succeed 傳回的結果是什麼都沒差，&lt;/p&gt;
&lt;p&gt;重要的是我們能看到傳過來的 request，要把它 log 出來&lt;/p&gt;
&lt;p&gt;這是我們在寫 code 時常做的 debug 方法，&lt;/p&gt;
&lt;p&gt;就算 serverless 其實也沒有不同 XD&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// inside the handler function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;object&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(object, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Event: &#39;&lt;/span&gt;, display(event))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;reply&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.succeed(event)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著我們到 facebook 上丟給我們剛剛創的粉絲專頁一些訊息，&lt;/p&gt;
&lt;p&gt;假設我們密他然後說個：「Hello bot 」&lt;/p&gt;
&lt;p&gt;到 AWS Cloud Watch 上面就可以看到返回的 body 長這個樣子，&lt;/p&gt;
&lt;p&gt;可以快速的掃過一次（大寫的是是代表一些 id，你懂的）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;page&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;entry&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: ENTRY_ID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1464447058752&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;messaging&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;sender&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: SENDER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;recipient&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: RECIPIENT_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1464447058667&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;mid&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mid.1464447058507:7548866c81ec168b21&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;seq&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Hello bot&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到這個之後，比較能知道 facebook 的 sample code 在幹嘛，&lt;/p&gt;
&lt;p&gt;而不是單純的 copy and paste。&lt;/p&gt;
&lt;p&gt;再上一次 sample code 來對照一下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/webhook/&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  messaging_events = req.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; messaging_events.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event = req.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = event.sender.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.message &amp;amp;&amp;amp; event.message.text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      text = event.message.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Handle a text message from this sender&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.sendStatus(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起來 facebook 的工程師為了保留開發上的彈性，&lt;/p&gt;
&lt;p&gt;所以加上了一些目前看起來有點冗的東西，&lt;/p&gt;
&lt;p&gt;我們可以選擇一開始就把 &lt;code&gt;messaging_events&lt;/code&gt; 在 template 裡面拿出來，&lt;/p&gt;
&lt;p&gt;或者是一樣拿回整個 body，不過為了說明方便，&lt;/p&gt;
&lt;p&gt;還是照它原本的格式走。&lt;/p&gt;
&lt;p&gt;總之，理解後就能開始試著把它改成 serverless 的模式了：&lt;/p&gt;
&lt;p&gt;（真的是幾乎長得一模一樣）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;reply&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messagingEvents = event.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    messagingEvents.forEach((messagingEvent) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sender = messagingEvent.sender.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (messagingEvent.message &amp;amp;&amp;amp; messagingEvent.message.text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; text = messagingEvent.message.text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Handle a text message from this sender&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;為什麼要拿 &lt;code&gt;sender&lt;/code&gt; 以及 &lt;code&gt;text&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;原因就是待會回覆訊息會需要用到。&lt;/p&gt;
&lt;h2 id=&quot;Reply-回覆訊息&quot;&gt;&lt;a href=&quot;#Reply-回覆訊息&quot; class=&quot;headerlink&quot; title=&quot;Reply - 回覆訊息&quot;&gt;&lt;/a&gt;Reply - 回覆訊息&lt;/h2&gt;&lt;p&gt;回覆訊息要用到我們之前的能登入粉絲頁的「密碼權杖」，&lt;/p&gt;
&lt;p&gt;假如你是用 variable 解決的話，這部分會簡單很多。&lt;/p&gt;
&lt;p&gt;只要把剛剛在 callback url 的 &lt;code&gt;fb_secret_key&lt;/code&gt; copy 過去就好了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;apiPostCallbackTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;fb_secret_key&amp;#125;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;reply&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.json(&#39;$&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一樣先來看一下 sample code 是怎麼做的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;page_access_token&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendTextMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sender, text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  messageData = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text:text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&#39;https://graph.facebook.com/v2.6/me/messages&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    qs: &amp;#123;access_token:token&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    json: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      recipient: &amp;#123;id:sender&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      message: messageData,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, response, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error sending message: &#39;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.body.error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;, response.body.error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 實際傳送訊息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendTextMessage(sender, &lt;span class=&quot;string&quot;&gt;&quot;Text received, echo: &quot;&lt;/span&gt;+ text.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;沒錯，這裡根本就可以直接拿來用了，&lt;/p&gt;
&lt;p&gt;我們先求有再求好：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; operation = event.operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; secret = event.secret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendTextMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sender, text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messageData = &amp;#123;text: text&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        request(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url: &lt;span class=&quot;string&quot;&gt;&#39;https://graph.facebook.com/v2.6/me/messages&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            qs: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                access_token: secret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            json: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                recipient: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    id: sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                message: messageData,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, (error, response, body) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;GET response&#39;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.succeed(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.fail(&lt;span class=&quot;string&quot;&gt;&#39;Error sending message: &#39;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.body.error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.fail(&lt;span class=&quot;string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;, response.body.error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;reply&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messagingEvents = event.body.entry[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].messaging;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            messagingEvents.forEach((messagingEvent) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sender = messagingEvent.sender.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (messagingEvent.message &amp;amp;&amp;amp; messagingEvent.message.text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; text = messagingEvent.message.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sendTextMessage(sender, &lt;span class=&quot;string&quot;&gt;&quot;Text received, echo: &quot;&lt;/span&gt;+ text.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unrecognized operation &quot;&#39;&lt;/span&gt; + operation + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在執行 &lt;code&gt;sendTextMessage&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;裡面的 &lt;code&gt;request&lt;/code&gt; 會是非同步的，&lt;/p&gt;
&lt;p&gt;也就是說在後續的流程裡如果你讓整個 function 提早結束的話，&lt;/p&gt;
&lt;p&gt;訊息將不會被傳送。&lt;/p&gt;
&lt;p&gt;不過 user 一進來，其實不會知道 bot 有哪些功能，&lt;/p&gt;
&lt;p&gt;我們可以設定對話剛開始的開場白，只要在執行這行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;apos;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;setting_type&amp;quot;:&amp;quot;call_to_actions&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;thread_state&amp;quot;:&amp;quot;new_thread&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;call_to_actions&amp;quot;:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;message&amp;quot;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;text&amp;quot;:&amp;quot;Hi, 歡迎來到 Serverless Maniac。我是機器人，輸入 help 來看有什麼指令可以用吧&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&amp;apos; &amp;quot;https://graph.facebook.com/v2.6/&amp;lt;PAGE_ID&amp;gt;/thread_settings?access_token=&amp;lt;FB_SECRET_KEY&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;FB_SECRET_KEY&lt;/code&gt;就是前面提到的密碼權杖，&lt;code&gt;PAGE_ID&lt;/code&gt; 是你粉絲頁對應的 id，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出來結果大概就是這樣子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hruiXeO.jpg&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更複雜的回覆訊息格式&quot;&gt;&lt;a href=&quot;#更複雜的回覆訊息格式&quot; class=&quot;headerlink&quot; title=&quot;更複雜的回覆訊息格式&quot;&gt;&lt;/a&gt;更複雜的回覆訊息格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;facebook 也提供一些更 fancy 的訊息格式 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;針對特定的訊息去做動作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比起一般的小編回覆訊息，這裡能夠藉由 messenger platform 提供的 API，&lt;/p&gt;
&lt;p&gt;回覆一個更像 app 的訊息模板、提供更棒的 UX，&lt;/p&gt;
&lt;p&gt;啊！這樣講好抽象，直接看一下成果的話大概是這樣子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/xT4uQAs24rrYQDjNuw/giphy.gif&quot; alt=&quot;struc demo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒錯，就是做了一個自己 blog 的 feeds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剛剛在 &lt;code&gt;sendTextMessage&lt;/code&gt; 裡面會把 &lt;code&gt;text&lt;/code&gt;再額外包一層處理，&lt;/p&gt;
&lt;p&gt;可見這裡是保留了其他彈性，&lt;/p&gt;
&lt;p&gt;往後翻一下文件就會看到我們可以自訂訊息的模板。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; text = messagingEvent.message.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messageData = genMessageData(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendTextMessage(sender, messageData)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;genMessageData&lt;/code&gt; 裡面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要被長度嚇到了，你可以對照圖片中的字，&lt;/p&gt;
&lt;p&gt;跟下面程式碼做對照，其實都只是在處理 elements 裡面一個個 object 而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (text === &lt;span class=&quot;string&quot;&gt;&#39;feeds&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;attachment&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;template&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;template_type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;generic&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;elements&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;淺析 serverless 架構與實作&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;May 22, 2016&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;image_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://i.imgur.com/lP3wcnh.jpg&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;buttons&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;web_url&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Saga Pattern 在前端的應用&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;May 14, 2016&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;image_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://upload.wikimedia.org/wikipedia/zh/3/37/Adventure_Time_-_Title_card.png&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;buttons&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;web_url&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://abalone0204.github.io/2016/05/14/redux-saga/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;淺入淺出 Generator Function&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;May 8, 2016&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;image_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://www.rumproast.com/images/uploads/shallow_end_thumb.jpg&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;buttons&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;web_url&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://abalone0204.github.io/2016/05/08/es6-generator-func/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Super tiny compiler&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Apr 25, 2016&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;image_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://cloud.githubusercontent.com/assets/952783/14413766/134c4068-ff39-11e5-996e-9452973299c2.png&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;buttons&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;web_url&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://abalone0204.github.io/2016/04/25/Super-tiny-compiler/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;截至目前為止，我們已經理解了怎麼接收和傳送訊息，&lt;/p&gt;
&lt;p&gt;對我來說這是一個比 slack 更輕量的小助理，&lt;/p&gt;
&lt;p&gt;其實搭配 DynamoDB 或是其他 backend 就可以做到 schedule 的效果。&lt;/p&gt;
&lt;p&gt;同時我認為 bot 並不是拿來取代小編的，&lt;/p&gt;
&lt;p&gt;可以將一些常問的問題和解答建在 bot 裡面，&lt;/p&gt;
&lt;p&gt;讓小編不用再去回一些重複的問題，專注在寫出更好的文案，&lt;/p&gt;
&lt;p&gt;以及更急迫需要回應的客戶上面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以選擇搭配 &lt;a href=&quot;https://hubot.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hubot&lt;/a&gt; 來處理各種訊息，&lt;/p&gt;
&lt;p&gt;以及對應的動作。&lt;/p&gt;
&lt;p&gt;不過仍然要強調一下，這篇筆記著重在如何建立一個這樣的 interface：&lt;code&gt;收訊息 =&amp;gt; 執行動作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，把程式邏輯全部都放在 &lt;code&gt;handelr.js&lt;/code&gt;，只是為了說明方便，&lt;/p&gt;
&lt;p&gt;你可以選擇自己喜歡的方式來建構 bot。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最後，額外提醒一下 XD&lt;/p&gt;
&lt;p&gt;目前完成的 bot 只能夠跟你個人通話而已，&lt;/p&gt;
&lt;p&gt;假如你想讓其他人也看到的話，&lt;/p&gt;
&lt;p&gt;必須到 facebook app 的控制台通過 facebook 的審核後才行，&lt;/p&gt;
&lt;p&gt;希望大家能做出許多好玩的粉絲專頁應用 XD&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/docs/messenger-platform&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook Messenger Platform&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://abalone0204.github.io/2016/05/22/serverless-simple-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺析 serverless 架構與實作&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上禮拜簡單介紹了一下 serverless 的起手式後，&lt;/p&gt;
&lt;p&gt;我想再舉個更接近實際應用的例子，&lt;/p&gt;
&lt;p&gt;儘管並不是所有的應用都適合 serverless 的架構，&lt;/p&gt;
&lt;p&gt;但聊天機器人(chat bot)是一個相當好的例子，&lt;/p&gt;
&lt;p&gt;且讓我稍後再說明為什麼。&lt;/p&gt;
&lt;p&gt;今天就結合一下很實用的粉絲頁回覆機器人以及 serverless 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以把聊天機器人想成是你粉絲頁自動回覆的員工&lt;/p&gt;
&lt;p&gt;或是進行一些簡單的操作&lt;/p&gt;
&lt;p&gt;而聊天機器人流行起來的原因正是因為 mobile 裝置上的介面，&lt;/p&gt;
&lt;p&gt;並不能滿足於現代人操作的所有需求，&lt;/p&gt;
&lt;p&gt;聊天的介面解放了我們在小框框裡做事的限制。&lt;/p&gt;
&lt;p&gt;或者是你是小小公司的開發者，需要一個助理來幫你做很無腦或繁瑣的事情，&lt;/p&gt;
&lt;p&gt;再講下去可能要一篇了，如果你對這個主題有興趣，&lt;/p&gt;
&lt;p&gt;可以看看 &lt;a href=&quot;https://wanqu.co/blog/2015-05-24-behind-the-scenes.html&quot;&gt;灣區日報是如何運作的&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="serverless" scheme="http://abalone0204.github.com/tags/serverless/"/>
    
      <category term="fb" scheme="http://abalone0204.github.com/tags/fb/"/>
    
      <category term="bot" scheme="http://abalone0204.github.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>淺析 serverless 架構與實作</title>
    <link href="http://abalone0204.github.com/2016/05/22/serverless-simple-crud/"/>
    <id>http://abalone0204.github.com/2016/05/22/serverless-simple-crud/</id>
    <published>2016-05-22T03:32:31.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;Serverless ，不是沒有 server，而是不用去擔心維護 server 這件事，&lt;/p&gt;
&lt;p&gt;不管是在部署還是開發，都是以一個個 function 為單位，&lt;/p&gt;
&lt;p&gt;這帶來了程式碼上的高度 decoupling，但同時也因為過大的彈性，&lt;/p&gt;
&lt;p&gt;常常搞的我們無所適從，就像這張圖一樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lP3wcnh.jpg&quot; alt=&quot;howto&quot;&gt;&lt;/p&gt;
&lt;p&gt;serverless 更考驗著我們對系統設計的思維，&lt;/p&gt;
&lt;p&gt;這是一篇非常粗淺的文章，&lt;/p&gt;
&lt;p&gt;目的在帶領對 serverless 有興趣的人無痛的入門，&lt;/p&gt;
&lt;p&gt;不管是在概念上，還是在實務的使用上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如你是懶得看文章的人，可以直接到我的 &lt;a href=&quot;https://github.com/abalone0204/serverless-demo-with-dynamodb-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github repo&lt;/a&gt; 上面看&lt;/p&gt;
&lt;p&gt;有哪裡寫錯的話可以提個 issue，覺得讚讚讚的話也可以給星星以茲鼓勵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;試想當你是一個單槍匹馬的開發者時，你絕對會希望能真正專心在開發，&lt;/p&gt;
&lt;p&gt;而不是一天到晚擔心機器有沒有死掉，或者配置環境就花了大半時間。&lt;/p&gt;
&lt;p&gt;我只是一個前端工程師，對於後端的知識甚是淺薄，&lt;/p&gt;
&lt;p&gt;serverless 對我而言是個很合理的選擇，&lt;/p&gt;
&lt;p&gt;但這不代表我不在乎任何後端的專業性，&lt;/p&gt;
&lt;p&gt;更不代表著後端工程師使用 serverless 架構就是代表實力不夠。&lt;/p&gt;
&lt;p&gt;相反的，我認為後端工程師如果能從管理機器中解放，&lt;/p&gt;
&lt;p&gt;設計出更好的 serverless 架構以及更專注在程式本身的邏輯上，&lt;/p&gt;
&lt;p&gt;那從 serverless 上能獲得的增益一定也是相當驚人的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看著我們虛擬化的趨勢 =&amp;gt; VM =&amp;gt; Container =&amp;gt; Docker 的興起&lt;/p&gt;
&lt;p&gt;儘管做法略有不同，但方向是一致的，&lt;/p&gt;
&lt;p&gt;都是想讓程式開發者更能專注在程式本身，而不是管理機器上&lt;/p&gt;
&lt;p&gt;話說回來，前端後端的分界點一直都是個有爭議的問題，&lt;/p&gt;
&lt;p&gt;不過就不在這裡去討論了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這篇會需要用到數個 aws 的服務，不過為了讓事情更單純，&lt;/p&gt;
&lt;p&gt;我只會用到 IAM, DynamoDB, API Gateway, CloudWatch 以及 Lambda，&lt;/p&gt;
&lt;p&gt;都不熟悉這些也沒有關係，因為我在寫完這一段之前， &lt;/p&gt;
&lt;p&gt;也只是大略的把文件掃過去，也不用擔心縮寫令人看不懂，&lt;/p&gt;
&lt;p&gt;因為我最討厭的就是這種縮來縮去的東西，&lt;/p&gt;
&lt;p&gt;所以接下來都會在提到的地方解釋我們正在處理的是什麼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以往都是直接用 EC2 開一台機器，&lt;/p&gt;
&lt;p&gt;要用什麼直接當自己家的在上面裝就是了。&lt;/p&gt;
&lt;p&gt;（當然可以學一些東西自動化這流程： chef，不過這不是這篇的重點）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Catalogue&quot;&gt;&lt;a href=&quot;#Catalogue&quot; class=&quot;headerlink&quot; title=&quot;Catalogue&quot;&gt;&lt;/a&gt;Catalogue&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#優點&quot;&gt;優點&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#限制與風險&quot;&gt;限制與風險&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Why-serverless-framework&quot;&gt;Why serverless framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Setup-開發環境的建置&quot;&gt;Setup 開發環境的建置&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#為你的-api-建立一個「role」&quot;&gt;為你的 api 建立一個「role」&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Create-Project&quot;&gt;Create Project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Create-First-function&quot;&gt;Create First function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Deployment&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Abstraction&quot;&gt;Abstraction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Source event&quot;&gt;Source event&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Context&quot;&gt;Context&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#handler-js&quot;&gt;&lt;code&gt;handler.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Implementation-Simple-RESTful-api&quot;&gt;Implementation: Simple RESTful api: Simple RESTful api&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Why&quot;&gt;Why&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Log&quot;&gt;Log&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Create-an-item&quot;&gt;Create an item&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Read-an-item&quot;&gt;Read an item&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Update-an-item&quot;&gt;Update an item&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Delete-an-item&quot;&gt;Delete an item&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#List-items&quot;&gt;List items&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#References&quot;&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;這篇會著重在比較抽象化的概念上，&lt;/p&gt;
&lt;p&gt;而不是去針對特定的功能作 serverless 的實現，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但不要誤會了，後面還是有一個簡易 restful api 的實作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我認為能掌握以下幾個點，才是針對特定功能實現的基礎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Project 的架構&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;對於設計一套 serverless architecture 的抽象概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各個功能與 api 間對應的關係&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;資料的處理 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;要能永久被儲存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRUD 操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Schedule：定時或是 routine 的去做一些事情(這一篇文章裡面不會提到)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有新功能時我們要能夠部署上去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不然你 debug 是要通靈嗎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於使用的語言會是 nodejs。&lt;/p&gt;
&lt;h2 id=&quot;優點&quot;&gt;&lt;a href=&quot;#優點&quot; class=&quot;headerlink&quot; title=&quot;優點&quot;&gt;&lt;/a&gt;優點&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不需要自己管機器，以及近乎無限能力的 scale-out（你的財力夠的話）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相對便宜。因為我們是有執行 function 才收費&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果只是自己要使用或是小型專案，基本上都會落在 free tier 區間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高度的解耦及靈活的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不管你是想要製作 nano service 還是 micro service 你都能靈活地去組合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有人說過，當你手上只有錘子時，那你看到的所有東西都會是釘子。&lt;/p&gt;
&lt;p&gt;不過對於 &lt;code&gt;function&lt;/code&gt; 這麼 general purpose 的東西來說，&lt;/p&gt;
&lt;p&gt;它的確能拿來解決一切計算相關的問題，端看你組合的方式對不對而已。&lt;/p&gt;
&lt;h2 id=&quot;限制與風險&quot;&gt;&lt;a href=&quot;#限制與風險&quot; class=&quot;headerlink&quot; title=&quot;限制與風險&quot;&gt;&lt;/a&gt;限制與風險&lt;/h2&gt;&lt;p&gt;講了這麼多好處，現在當然要來講它的限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有限的記憶體&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;timeout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前最多只能運算 300 秒，就會被強制結束掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高度的解耦&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這看起來是好處，但必須要用跟以前不一樣的想法來設計程式，因為我們每次 function 運行完之後，就會把所有資源釋放出去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Latency&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因為我們是需要計算時，才會去要資源來運算，每次都算是一個 cold start，所以對 latency 完全無法容忍的服務，可能不適合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;實際上透過 schedule 可以一定程度的解決這問題&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;風險&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scale-out&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坦白說，如果是考慮到有沒有辦法 scale-out，那我想大部分情形，aws 都是沒問題的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API 更換&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為我們以 function 為單位的高解耦，所以更換 API，不是一個讓人全面崩潰的風險&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服務被停用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我說一個字大家就懂了：Parse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;當事情走到這一步的時候，基本上就沒啥救了，這就是我們冒著最大的風險&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但就如同前面所言，我認為 serverless 是未來大勢所趨，也許不會所有的 project 都如此，不過大多數的中小型專案都會轉向朝這一架構邁進。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-serverless-framework&quot;&gt;&lt;a href=&quot;#Why-serverless-framework&quot; class=&quot;headerlink&quot; title=&quot;Why serverless framework&quot;&gt;&lt;/a&gt;Why serverless framework&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;過度的自由，失控的 decoupling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架給了我們更好結構化 project 的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Config 的設置以及部署 function 簡化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件和 plugins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;社群或公司支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Serverless 的官網上有說到，現在是由一群工程師全職在維護這個 framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gitter 上問問題也幾乎馬上就能得到回答&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apex?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TJ 的產品，目前還在觀望中，但 serverless 看起來相對較穩定、成熟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不過光是 TJ 這個名字，就很值得一試&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;就像我前面說的，因為高度解耦的關係，其實要遷移過來「理論上」不是太難的事&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Setup-開發環境的建置&quot;&gt;&lt;a href=&quot;#Setup-開發環境的建置&quot; class=&quot;headerlink&quot; title=&quot;Setup 開發環境的建置&quot;&gt;&lt;/a&gt;Setup 開發環境的建置&lt;/h1&gt;&lt;p&gt;我不認為一個環境的建置，是在把東西裝一裝之後就結束了，&lt;/p&gt;
&lt;p&gt;因為東西裝一裝之後，通常後續只會有更多的問題，&lt;/p&gt;
&lt;p&gt;而且一個 project 本來就需要在一開始就做好 deploy 的準備了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不部署的話幹嘛要用 aws 啊？囧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完整一點的 setup 應該要包含了從 建置基本設定 =&amp;gt; 部署 &lt;/p&gt;
&lt;p&gt;才算是真的結束，&lt;/p&gt;
&lt;p&gt;所以這一小節會從配置到部署都走過一次。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS 的介面可能會因為時間的關係，與下方略有不同，&lt;/p&gt;
&lt;p&gt;但估計變動不會太大，知道要使用什麼功能比較重要，&lt;/p&gt;
&lt;p&gt;故我不會把操作介面的圖片放上來。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;為你的-api-建立一個「role」&quot;&gt;&lt;a href=&quot;#為你的-api-建立一個「role」&quot; class=&quot;headerlink&quot; title=&quot;為你的 api 建立一個「role」&quot;&gt;&lt;/a&gt;為你的 api 建立一個「role」&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跟以往一樣，我認為建環境是最困難的部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先要建一個 &lt;code&gt;IAM&lt;/code&gt; role&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IAM(Identity and Access Management)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAM&lt;/code&gt; 的功用就是讓你能夠管理使用者對於服務和資源所擁有的「權限」&lt;/p&gt;
&lt;p&gt;可以針對不同的使用者，制定不同的角色，&lt;/p&gt;
&lt;p&gt;舉例來說，如果你今天的 api 只想讓 user 從 s3 的 bucket 裡面讀一些靜態資源&lt;/p&gt;
&lt;p&gt;你就不會想要讓他擁有 access DynamoDB 的權限，懂？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IAM 是免費的&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到 aws 選取 services，在拉下來一狗票的服務中，&lt;/p&gt;
&lt;p&gt;選擇 &lt;code&gt;IAM&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;建立一個新的 User，名字就輸入：&lt;code&gt;serverless-admin&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;建立好之後，&lt;/p&gt;
&lt;p&gt;把拿到的 &lt;code&gt;Access Key Id&lt;/code&gt; 跟 &lt;code&gt;Secret Access Key&lt;/code&gt; 給記下來，&lt;/p&gt;
&lt;p&gt;待會會用到。&lt;/p&gt;
&lt;p&gt;接著選擇剛剛建立的那個 user：&lt;code&gt;serverless-admin&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;在 permissions 的地方加上新的 policy，&lt;/p&gt;
&lt;p&gt;這裡 aws 相當貼心的提供我們超大一坨的 policies 可供選擇，&lt;/p&gt;
&lt;p&gt;為了方便，我們直接選擇 &lt;code&gt;AdministratorAccess&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當在 production 環境時，這樣處理 permissions 不會是一個好主意 XD&lt;/p&gt;
&lt;p&gt;坦白說我覺得 permissions 會是一個令人頭痛的點&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Create-Project&quot;&gt;&lt;a href=&quot;#Create-Project&quot; class=&quot;headerlink&quot; title=&quot;Create Project&quot;&gt;&lt;/a&gt;Create Project&lt;/h2&gt;&lt;p&gt;我們選擇了 &lt;code&gt;serverless-framework&lt;/code&gt;這一套 serverless framework。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -g serverless&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serverless project create&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;會要你輸入名字以及剛剛的 access key id 跟 secret access key。&lt;/p&gt;
&lt;p&gt;接著還要選擇你想要你的 project 運行服務在的地區。&lt;/p&gt;
&lt;p&gt;再來稍後三分鐘之後， project 就會建好了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;會生成一大堆東西，下面列出簡易版的解釋，&lt;/p&gt;
&lt;p&gt;看不懂也沒關係，之後在實作中就會碰到很多次了：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── _meta // (.gitignored) 就是個存 meta data 的地方（config 之類的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── admin.env // (.gitignored)剛剛 create function 時的 AWS Profiles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── functions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── function1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── event.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── handler.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── s-function.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json // 就是 npm 的那個&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── s-project.json // serverless 的套件管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── s-resources-cf.json // 就是上述講到 CloudFormation 的描述檔&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Create-First-function&quot;&gt;&lt;a href=&quot;#Create-First-function&quot; class=&quot;headerlink&quot; title=&quot;Create First function&quot;&gt;&lt;/a&gt;Create First function&lt;/h2&gt;&lt;p&gt;先讓我們 focus 在 &lt;code&gt;function&lt;/code&gt; 上，這些 config 真的都可以先放著沒關係。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這不代表他們不重要，只是晚點再回來看他們是在做什麼&lt;/p&gt;
&lt;p&gt;如果你真的現在就等不及，也可以到 serverless 的官方文件看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.serverless.com/docs/project-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project structure&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverless function create functions/posts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;選擇 nodejs =&amp;gt; Create Endpoint&lt;/p&gt;
&lt;p&gt;接著就可以看到多了一個 &lt;code&gt;functions&lt;/code&gt; 資料夾，&lt;/p&gt;
&lt;p&gt;並且裡面跟著一個 &lt;code&gt;posts&lt;/code&gt; 以及一些東西了。&lt;/p&gt;
&lt;p&gt;一樣我們只要知道自己現在建立了一些基礎建設，稍後再來回頭看這是什麼。&lt;/p&gt;
&lt;h2 id=&quot;Deployment&quot;&gt;&lt;a href=&quot;#Deployment&quot; class=&quot;headerlink&quot; title=&quot;Deployment&quot;&gt;&lt;/a&gt;Deployment&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverless dash deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function - posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoint - posts - GET&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這兩個都記得要選才會把東西部署上去 aws-lambda。&lt;/p&gt;
&lt;p&gt;選擇 deploy 之後稍待幾秒鐘，就可以看到回傳一個網址給你。&lt;/p&gt;
&lt;p&gt;這就是能夠執行我們剛剛部屬上去的 &lt;code&gt;posts&lt;/code&gt; 的地方。&lt;/p&gt;
&lt;p&gt;如果你沒做任何更改，點進去後應該能看到&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;message&amp;quot;: &amp;quot;Go Serverless! Your Lambda function executed successfully!&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到這裡為止，我們才能不心虛的說：環境建完，可以繼續了。&lt;/p&gt;
&lt;h1 id=&quot;Abstraction&quot;&gt;&lt;a href=&quot;#Abstraction&quot; class=&quot;headerlink&quot; title=&quot;Abstraction&quot;&gt;&lt;/a&gt;Abstraction&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;前面一直說到 serverless 架構是以 function 為單位去部署和開發，&lt;/p&gt;
&lt;p&gt;現在來對「lambda function」有個具體的抽象概念。（欸？&lt;/p&gt;
&lt;p&gt;先來個大略的概觀，你可以跟剛剛 create 的 project 對照著看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每個 function 可以有許多個 endpoint（進入點）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每個 endpoint 可以有許多個 method( GET, POST…)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handler 則是 aws lambda 執行的進入點(就是 &lt;code&gt;handler.js&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;來看一下 handler.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// empty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;實際上我們運行的 function 就是長下面這個樣子，&lt;/p&gt;
&lt;p&gt;在開始討論其他配置，和 aws 要怎麼運行到這裡之前，&lt;/p&gt;
&lt;p&gt;先搞清楚到底在談論什麼東西：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可以有第三個參數 cabllback，&lt;/p&gt;
&lt;p&gt;不過其實只要這兩項就可以運作的很好了，&lt;/p&gt;
&lt;p&gt;而且 callback 實在不是一個好事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Source-event&quot;&gt;&lt;a href=&quot;#Source-event&quot; class=&quot;headerlink&quot; title=&quot;Source event&quot;&gt;&lt;/a&gt;Source event&lt;/h2&gt;&lt;p&gt;source event，可以是 push 或 pull model。&lt;/p&gt;
&lt;p&gt;假設 S3 上面資料新增，lambda function 會接收到 event 去做事情，&lt;/p&gt;
&lt;p&gt;那這就是一個 push model。&lt;/p&gt;
&lt;p&gt;假設今天是 lamda function 去掃了一遍 DynamoDB ，&lt;/p&gt;
&lt;p&gt;發現有事情要根據上面的資料去做，&lt;/p&gt;
&lt;p&gt;這就是一個 pull model。&lt;/p&gt;
&lt;p&gt;而 source event 也可以很單純的來自 http request。&lt;/p&gt;
&lt;h2 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 是一個 object，&lt;/p&gt;
&lt;p&gt;裡面包含了當前 lambda 運行環境的訊息，&lt;/p&gt;
&lt;p&gt;以及一些 method。&lt;/p&gt;
&lt;p&gt;有三個 methods 是一定要知道的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡的參數是可選的，我們可以只讓 function 做事，&lt;br&gt;沒有一定要強制回傳結果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context.succeed(Object result)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以在執行成功時回傳東西： &lt;code&gt;context.succeed(someObject)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意這裡的 &lt;code&gt;result&lt;/code&gt; 必須要能夠被 JSON.stringifyu 轉成字串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context.fail(Error error)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在失敗時回傳東西&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context.done(Error error, Object result)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;這個就有點奇葩了，有了成功和失敗為什麼還要存在個 done 呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 error 不為 null，這次的 lamda function 就會被認定為執行失敗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再來是可以看到目前執行剩餘時間：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;context.getRemainingTimeInMillis()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這裡所謂的看到當然是指在 function 執行時我們能利用啦！&lt;/p&gt;
&lt;p&gt;不過要注意的是如果歸零，&lt;/p&gt;
&lt;p&gt;AWS lambda 就會強制終止我們的 lambda function 了。&lt;/p&gt;
&lt;h2 id=&quot;handler-js&quot;&gt;&lt;a href=&quot;#handler-js&quot; class=&quot;headerlink&quot; title=&quot;handler.js&quot;&gt;&lt;/a&gt;&lt;code&gt;handler.js&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;前面有提到過這裡就是 aws 運行的進入點，&lt;/p&gt;
&lt;p&gt;要在 &lt;code&gt;s-function.json&lt;/code&gt; 裡面設定，&lt;/p&gt;
&lt;p&gt;這裡看到我們只在 &lt;code&gt;handler&lt;/code&gt; 那個屬性打上 : &lt;code&gt;handler.handler&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;這有兩件事情值得注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對應執行的就是 &lt;code&gt;handler.js&lt;/code&gt; 這個 module 底下的 &lt;code&gt;handler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// in handler.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This be implemented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二件事就是這個 hanlder 屬性還隱含著我們目前能作用的 scope，&lt;/p&gt;
&lt;p&gt;假如我們是：&lt;code&gt;function1/handler.handler&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;就把上層的 parent folder 給包含進去，&lt;/p&gt;
&lt;p&gt;所以他就吃得到我們在根目錄安裝的 npm 套件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如說你安裝了 react，那你就可以：&lt;br&gt;&lt;code&gt;require(&amp;#39;react&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解到這樣的程度，就已經足夠進行下去了，&lt;/p&gt;
&lt;p&gt;直接來實作吧！&lt;/p&gt;
&lt;h1 id=&quot;Implementation-Simple-RESTful-api&quot;&gt;&lt;a href=&quot;#Implementation-Simple-RESTful-api&quot; class=&quot;headerlink&quot; title=&quot;Implementation: Simple RESTful api&quot;&gt;&lt;/a&gt;Implementation: Simple RESTful api&lt;/h1&gt;&lt;p&gt;直接看文件時，總會有種霧裡看花的感覺，&lt;/p&gt;
&lt;p&gt;不過等到實際開始做之後，你會發現其實概念只要 mapping 過去，&lt;/p&gt;
&lt;p&gt;並沒有想像中的困難。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這個是完成後的 &lt;a href=&quot;https://github.com/abalone0204/serverless-demo-with-dynamodb-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github repo&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;如果你中途發現有什麼錯誤的話，可以在上面查看是否有哪裡不一樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;底下會包含基本的 CRUD 以及 list，&lt;/p&gt;
&lt;p&gt;大多數的應用程式都不脫這五種操作，&lt;/p&gt;
&lt;p&gt;就算需要更特殊的操作，&lt;/p&gt;
&lt;p&gt;也總是要熟悉這些基礎後才能繼續前進，&lt;/p&gt;
&lt;p&gt;包含著如何儲存資料以及 debug 的概念。&lt;/p&gt;
&lt;p&gt;至於資料夾的結構或是 workflow 的順序，&lt;/p&gt;
&lt;p&gt;你都可以依照個人的喜好去調整，不一定要照我寫的走。&lt;/p&gt;
&lt;h2 id=&quot;Log&quot;&gt;&lt;a href=&quot;#Log&quot; class=&quot;headerlink&quot; title=&quot;Log&quot;&gt;&lt;/a&gt;Log&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;沒錯，我們先來看看要怎麼找出錯誤，從犯錯中學習，是新手成長最快的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;來修改一下&lt;code&gt;functions/posts/hanlder.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 和 &lt;code&gt;event&lt;/code&gt; 是我們在 lambda 中要好好處理的東西沒錯，&lt;/p&gt;
&lt;p&gt;不過這裡先專注在出 bug 時要怎麼解決：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Loading function&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;object&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(object, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = (event, context) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Event: &#39;&lt;/span&gt;, display(event))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Context: &#39;&lt;/span&gt;, display(context))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  context.succedd(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message: &lt;span class=&quot;string&quot;&gt;&#39;ok, it works&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡的程式碼有個明顯的錯誤，待會我們會除錯並且學習如何看 log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;稍做一些更改之後我們就可以再次部署了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverless dash deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再到剛剛的網址，會發現出現錯誤了！&lt;/p&gt;
&lt;p&gt;幸好這裡加上了許多 &lt;code&gt;console.log&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;假如你曾經寫過 JavaScript 對這樣的除錯技巧一定不陌生，&lt;/p&gt;
&lt;p&gt;但，這裡的 log 不會在 console 印出來，會到哪裡呢？&lt;/p&gt;
&lt;p&gt;這裡就要使用 aws 上的另個服務：CloudWatch 了。&lt;/p&gt;
&lt;p&gt;到 services 點 CloudWatch，選取 logs，&lt;/p&gt;
&lt;p&gt;就會看到這裡有個 log groups 就是我們剛剛建立的 functions。&lt;/p&gt;
&lt;p&gt;選進去後會很神奇地發現我們之前 call 的紀錄都在這裡。&lt;/p&gt;
&lt;p&gt;在 log 中我們可以看到：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...(一些日期和系統資訊) TypeError: context.succedd is not a function at module.exports.handler (/const/task/handler.js:12:11)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們出了一個 typo 的錯誤，改正過來以後就成功啦！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.succeed(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message: &lt;span class=&quot;string&quot;&gt;&#39;ok, it works&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Create-an-item&quot;&gt;&lt;a href=&quot;#Create-an-item&quot; class=&quot;headerlink&quot; title=&quot;Create an item&quot;&gt;&lt;/a&gt;Create an item&lt;/h2&gt;&lt;p&gt;要存資料庫前，必須先在 &lt;code&gt;DynamoDB&lt;/code&gt; 建一張 Table。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DynamoDB 是一個 no sql 的資料庫&lt;/p&gt;
&lt;p&gt;為了 scale-out ，它在使用上有一些限制，&lt;/p&gt;
&lt;p&gt;但在這個簡單的示例中，並不會需要考量到這些，&lt;/p&gt;
&lt;p&gt;假如有興趣深入的話，可以看補充資料的地方&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://history.programmer.com.cn/11081/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解析 DynamoDB&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;到 aws 上選擇 &lt;code&gt;DynamoDB&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;table name 輸入 &lt;code&gt;posts&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;primary key 名稱設定為 &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的 default setting 取消勾選，然後將 Read capacity units 以及 Write capacity units 都調成 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我們就有一個很陽春的 table 了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接著是在 &lt;code&gt;handler&lt;/code&gt; 裡面的更動，&lt;/p&gt;
&lt;p&gt;首先要安裝兩個 package&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -S dynamodb-doc node-uuid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面有說過 lambda function 其實就是根據 source event，&lt;/p&gt;
&lt;p&gt;去執行對應的動作：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOC = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;dynamodb-doc&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dynamo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DOC.DynamoDB()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = (event, context) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Event: &#39;&lt;/span&gt;, display(event))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Context: &#39;&lt;/span&gt;, display(context))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; operation = event.operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.tableName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event.payload.TableName = event.tableName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;create&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; uuid = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;node-uuid&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            event.payload.Item.id = uuid.v1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dynamo.putItem(event.payload, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.succeed(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: event.payload.Item.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unrecognized operation &quot;&#39;&lt;/span&gt; + operation + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;其實蠻像我們平常在&lt;code&gt;redux&lt;/code&gt;中處理對應的 action type 的 &lt;code&gt;reducer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裡建立了一個 &lt;code&gt;DynamoDB&lt;/code&gt; 的 client，簡單的來說，我們會把 &lt;code&gt;event.payload&lt;/code&gt; 這個 object，&lt;/p&gt;
&lt;p&gt;新增成 Table 裡的一個新 item，並且給它一個唯一的 &lt;code&gt;id&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;畢竟是 Primary key 嘛！ &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不熟悉 Database 的基礎理論，Primary key。&lt;/p&gt;
&lt;p&gt;Primary key 就是我們拿來識別這個 item 在這個表中是唯一的「身分證」，&lt;/p&gt;
&lt;p&gt;在這裡我們是用 &lt;code&gt;id&lt;/code&gt;來作為我們的 Primary key。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那這個 &lt;code&gt;event&lt;/code&gt;又是怎麼來的呢？&lt;/p&gt;
&lt;p&gt;首先我們要了解的是 Create 這個動作對應到的 http method 是 &lt;code&gt;POST&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;所以當我們在對同一個 url 執行 &lt;code&gt;GET&lt;/code&gt; 跟 &lt;code&gt;POST&lt;/code&gt;時，&lt;/p&gt;
&lt;p&gt;雖然 call 的是同個 function（或者更精確地說，是同一個 Endpoint）。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;posts&lt;/code&gt; 資料夾底下，可以看到一個 &lt;code&gt;s-function.json&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;這個檔案中放著的是關於我們在進入 &lt;code&gt;handler.js&lt;/code&gt;時相關的 config。&lt;/p&gt;
&lt;p&gt;當然也包括了前面說到的 &lt;code&gt;event&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;先直接看到 &lt;code&gt;endpoints&lt;/code&gt; 這個 attribute，裡面有許多個物件，&lt;/p&gt;
&lt;p&gt;預設的是這個：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;AWS&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;authorizationType&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;authorizerFunction&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;apiKeyRequired&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;requestParameters&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;requestTemplates&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;responses&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;200&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseParameters&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseModels&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;application/jsoncharset=UTF-8&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Empty&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseTemplates&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;application/jsoncharset=UTF-8&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡有好多東西，&lt;/p&gt;
&lt;p&gt;假如我們要在裡面定義我們對每個 endpoint 的長相，誰不發瘋呢？&lt;/p&gt;
&lt;p&gt;眼尖的你應該看到了有 &lt;code&gt;template&lt;/code&gt;這個字眼，&lt;/p&gt;
&lt;p&gt;而剛剛送進來的 &lt;code&gt;event&lt;/code&gt; 正是一個 http request，&lt;/p&gt;
&lt;p&gt;所以我們要做的事情已經呼之欲出了，就是在&lt;code&gt;requestTemplates&lt;/code&gt;加上我們指定的 template 名稱，&lt;/p&gt;
&lt;p&gt;就能根據這個 template 生出我們想要的 event 。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;endpoints&lt;/code&gt; 中加上了這個新的 object：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;AWS&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;authorizationType&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;authorizerFunction&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;apiKeyRequired&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;requestParameters&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;requestTemplates&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$$&amp;#123;requestCreatePostTemplate&amp;#125;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;responses&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;200&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseParameters&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseModels&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;application/jsoncharset=UTF-8&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Empty&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;responseTemplates&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;application/jsoncharset=UTF-8&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;當進入這個 api 時(path 沒有改變)，使用 POST method時，&lt;/p&gt;
&lt;p&gt;我們的 request 會照著&lt;code&gt;requestCreatePostTemplate&lt;/code&gt;這個 template 走&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$${requestCreatePostTemplate} 是特殊的語法，&lt;/p&gt;
&lt;p&gt;讓 serverless 知道這是個 template 名字，而不是一般的 string。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我說，那個 tempalte 呢？&lt;/p&gt;
&lt;p&gt;這裡要在 &lt;code&gt;posts&lt;/code&gt; 底下新增 &lt;code&gt;s-templates.json&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;所有的關於 lambda function 的 template 都會放在這裡。&lt;/p&gt;
&lt;p&gt;接下來我們就可以設計我們的 request（event）的長相了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;requestCreatePostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;create&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;Item&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.json(&#39;$&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡比較讓人疑惑的是 &lt;code&gt;$input.json(&amp;#39;$&amp;#39;)&lt;/code&gt;是什麼，&lt;/p&gt;
&lt;p&gt;這其實是跟 API Gateway 比較有關係的 template 語法，&lt;/p&gt;
&lt;p&gt;而不是 serverless 這個框架底下的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This function evaluates a JSONPath expression and returns the results as a JSON string.&lt;br&gt;For example, $input.json(‘$.pets’) will return a JSON string representing the pets structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;簡單的說，他會將 input 轉成一個 json-like string，&lt;/p&gt;
&lt;p&gt;更棒的地方是他可以像我們平常 access 底下的 attribut 那樣去找底下的東西：&lt;/p&gt;
&lt;p&gt;（就是所謂的 &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;json path&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;像是 &lt;code&gt;$.pets&lt;/code&gt; 就是將我們吃到的 input object底下&lt;code&gt;pets&lt;/code&gt; 對應到的東西，&lt;/p&gt;
&lt;p&gt;轉成 string。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amazon API Gateway: Mapping template reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想瞭解更多關於 Template 的話可以參考 serverless framework 的文件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.serverless.com/docs/application-architectures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Template &amp;amp; Variable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著回到一開始的 &lt;code&gt;handler.js&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;就可以把跟 &lt;code&gt;event&lt;/code&gt; 有關的東西與我們前面 template 裡面所做的 config 連接起來了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.handler = (event, context) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Event: &#39;&lt;/span&gt;, display(event))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Context: &#39;&lt;/span&gt;, display(context))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; operation = event.operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.tableName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event.payload.TableName = event.tableName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;create&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; uuid = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;node-uuid&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            event.payload.Item.id = uuid.v1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Payload: &#39;&lt;/span&gt;, display(event.payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dynamo.putItem(event.payload, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.succeed(event.payload.Item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unrecognized operation &quot;&#39;&lt;/span&gt; + operation + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這時候可以部署了！&lt;/p&gt;
&lt;p&gt;部署完成之後我們需要試試有沒有成功，必須要打開 API Gateway，&lt;/p&gt;
&lt;p&gt;一進去就可以看到對應 project 名稱的 api，&lt;/p&gt;
&lt;p&gt;點進去能看到我們現在有哪幾個 api 可以用（url）。&lt;/p&gt;
&lt;p&gt;可以把 API Gateway 想像成我們平常使用的 &lt;code&gt;router&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;Gateway 會把要執行的 endpoint 接到對應的 url 上。&lt;/p&gt;
&lt;p&gt;點擊 &lt;code&gt;/posts&lt;/code&gt; 底下 &lt;code&gt;POST&lt;/code&gt; method 的 integration request ，&lt;/p&gt;
&lt;p&gt;在 Body Mapping Templates 可以看到對應的 template：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;create&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Item&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;:$input.json(&lt;span class=&quot;string&quot;&gt;&#39;$&#39;&lt;/span&gt;)&amp;#125;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那，要怎麼測試呢？&lt;/p&gt;
&lt;p&gt;我習慣用 postman，算是一個測 api 相當好用的工具，&lt;/p&gt;
&lt;p&gt;找到&lt;code&gt;serverless-demo&lt;/code&gt;這 project 底下對應的 &lt;code&gt;stages&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;選擇當前對應的 stage（預設應該是 dev），&lt;/p&gt;
&lt;p&gt;然後選擇&lt;code&gt;Export as Swagger + Postman Extensions&lt;/code&gt; 這個選項，&lt;/p&gt;
&lt;p&gt;會下載一個 json ，裡面把你所有建立的 request 都包好好的。&lt;/p&gt;
&lt;p&gt;接著就能在 postman 中 import ，就能直接使用了。&lt;/p&gt;
&lt;p&gt;首先當然是先測試原先的 &lt;code&gt;GET&lt;/code&gt; method，理論上來說應該要丟出 error，&lt;/p&gt;
&lt;p&gt;因為送進來的 request(event)，它的 &lt;code&gt;operation&lt;/code&gt;是 &lt;code&gt;undefined&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;errorMessage&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Unrecognized operation \&quot;undefined\&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;errorType&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Error&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;stackTrace&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;module.exports.handler (/const/task/handler.js:28:26)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;非常的好。&lt;/p&gt;
&lt;p&gt;接著是&lt;code&gt;POST&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;errorMessage&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Process exited before completing request&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;居然噴錯了，所以我們要再度到 CloudWatch 去看一下 log，&lt;/p&gt;
&lt;p&gt;看起來 &lt;code&gt;event&lt;/code&gt; 的樣子是對的，但往下一看就找到了這個錯誤：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cannot find module &amp;apos;node-uuid&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們在根目錄雖然有&lt;code&gt;package.json&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;但是目前對於底下的 &lt;code&gt;handler.js&lt;/code&gt; 而言，&lt;/p&gt;
&lt;p&gt;它對根目錄是完全一無所知的，那該怎麼做呢？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;s-function.json&lt;/code&gt; 中的 &lt;code&gt;handler&lt;/code&gt; 改成 &lt;code&gt;functions/posts/handler.handler&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;我們能在這裡決定 function 要對整個 project 的權限到哪裡，&lt;/p&gt;
&lt;p&gt;像這裡就會一直延伸到根目錄，所以我們在根目錄所安裝的 package，&lt;/p&gt;
&lt;p&gt;自然到了&lt;code&gt;posts&lt;/code&gt;底下也吃得到了。&lt;/p&gt;
&lt;p&gt;假如仍然沒有辦法動到 dynamodb 的話，&lt;/p&gt;
&lt;p&gt;就要到 &lt;code&gt;s-resources-cf.json&lt;/code&gt; 更改設定&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;IamPolicyLambda.Properties.PolicyDocument.Statement&lt;/code&gt;底下加上：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Effect&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Action&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Resource&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;arn:aws:dynamodb:$&amp;#123;region&amp;#125;:*:table/*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再去 Postman 執行一次，&lt;/p&gt;
&lt;p&gt;DynamoDB 的 Table 裡面就會出現新一筆的資料了（一個新的 Item）。&lt;/p&gt;
&lt;h2 id=&quot;Read-an-item&quot;&gt;&lt;a href=&quot;#Read-an-item&quot; class=&quot;headerlink&quot; title=&quot;Read an item&quot;&gt;&lt;/a&gt;Read an item&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我們剛剛已經可以在 DynamoDB 裡面新增資料，自然要有辦法拿出來才是。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步一樣是從 &lt;code&gt;handler.js&lt;/code&gt; 裡面直接去做更改：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;為什麼每次都從 &lt;code&gt;handler.js&lt;/code&gt;開始是因為這邊是最符合邏輯的地方，&lt;/p&gt;
&lt;p&gt;其他都比較特定的 config 問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (operation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;create&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; uuid = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;node-uuid&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        event.payload.Item.id = uuid.v1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Payload: &#39;&lt;/span&gt;, display(event.payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dynamo.putItem(event.payload, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.succeed(event.payload.Item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;read&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dynamo.getItem(event.payload, context.done)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.fail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Unrecognized operation &quot;&#39;&lt;/span&gt; + operation + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著要到 &lt;code&gt;s-function.json&lt;/code&gt; 裡面去加上對於 parameter 的設定，&lt;/p&gt;
&lt;p&gt;以及加上 template：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 GET method 的底下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestParameters&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;integration.request.querystring.id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;method.request.querystring.id&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestTemplates&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$$&amp;#123;requestReadPostTemplate&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後則是 template：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestReadPostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;read&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.params(&#39;id&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;假如你好奇為什麼要用&lt;code&gt;Key&lt;/code&gt; 的話，&lt;/p&gt;
&lt;p&gt;可以參考 DynamoDB js sdk 的 &lt;a href=&quot;https://github.com/awslabs/dynamodb-document-js-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;與 mongodb 的 query 非常相似&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為我們在 handler 中用了 &lt;code&gt;context.done&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;這裡其實是個 callback function，等到 &lt;code&gt;getItem&lt;/code&gt; 結束後，&lt;/p&gt;
&lt;p&gt;才會執行 &lt;code&gt;context.done&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;並且會依序傳入 &lt;code&gt;error&lt;/code&gt;、&lt;code&gt;data&lt;/code&gt;兩個 object，&lt;/p&gt;
&lt;p&gt;所以回傳的 response 會是像這樣的一整個 item：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;Item&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;3caaeb80-1ebf-11e6-81a9-21cf9c171332&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Hello world again!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有時候我們並不想讓使用者知道這麼多，&lt;/p&gt;
&lt;p&gt;所以可以使用 response template，&lt;/p&gt;
&lt;p&gt;這裡就能看到前面說的 json path 的用處：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s-function.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;responseTemplates&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$$&amp;#123;responseReadPostTemplate&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s-templates.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;responseReadPostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.path(&#39;$&#39;).Item.id&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.path(&#39;$&#39;).Item.content.message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Update-an-item&quot;&gt;&lt;a href=&quot;#Update-an-item&quot; class=&quot;headerlink&quot; title=&quot;Update an item&quot;&gt;&lt;/a&gt;Update an item&lt;/h2&gt;&lt;p&gt;Update 跟 Read 的做法其實已經大同小異，&lt;/p&gt;
&lt;p&gt;一樣是把查詢用的 Key 放在 &lt;code&gt;params&lt;/code&gt; 中，&lt;/p&gt;
&lt;p&gt;這裡我們一樣把整包 payload 都丟進來。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dynamo.putItem(event.payload, (err, data)=&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.succeed(event.payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起來只是改成使用 &lt;code&gt;putItem&lt;/code&gt; 而已，&lt;/p&gt;
&lt;p&gt;但其實這邊的 template 有點小小的改變。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestUpdatePostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;update&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Item&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.params(&#39;id&#39;)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.json(&#39;$&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這樣子的好處就是在更新時，只要在 params 輸入指定的 &lt;code&gt;id&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;其餘要更新的部分就是放在 &lt;code&gt;body&lt;/code&gt;裡面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡的 &lt;code&gt;PUT&lt;/code&gt; 並不是 partial 的更新，&lt;/p&gt;
&lt;p&gt;而是整個會替換掉，符合它原本 HTTP method 對應的行為&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至於&lt;code&gt;s-function.json&lt;/code&gt; 裡面要怎麼改，這有點太 trivial ，&lt;/p&gt;
&lt;p&gt;就不放上來了。&lt;/p&gt;
&lt;h2 id=&quot;Delete-an-item&quot;&gt;&lt;a href=&quot;#Delete-an-item&quot; class=&quot;headerlink&quot; title=&quot;Delete an item&quot;&gt;&lt;/a&gt;Delete an item&lt;/h2&gt;&lt;p&gt;刪除一個 item，要做的事情比 update 單純多了，&lt;/p&gt;
&lt;p&gt;基本上只要指定好 Key，一切就已經結束了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dynamo.deleteItem(event.payload, context.done)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestDestroyPostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;destroy&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;$input.params(&#39;id&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;List-items&quot;&gt;&lt;a href=&quot;#List-items&quot; class=&quot;headerlink&quot; title=&quot;List items&quot;&gt;&lt;/a&gt;List items&lt;/h2&gt;&lt;p&gt;除了以上的 CRUD 之外，&lt;/p&gt;
&lt;p&gt;列出一定數量的 items 也是一個相當常見的需求。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dynamo.scan(event.payload, context.done)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;requestListPostTemplate&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;operation&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;list&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tableName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後的 Response template 會用到 &lt;code&gt;foreach&lt;/code&gt; 語法，&lt;/p&gt;
&lt;p&gt;坦白說這裡我壓根不想去理解這裡的意義是什麼，&lt;/p&gt;
&lt;p&gt;我寧願在需要的時候再去查文件就好，&lt;/p&gt;
&lt;p&gt;因為我相信這種夭壽的語法遲早會被改掉的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;responseListPostTemplate&amp;quot;: &amp;quot;&amp;#123;\&amp;quot;posts\&amp;quot; : [#foreach($post in $input.path(&amp;apos;$&amp;apos;).Items)&amp;#123;\&amp;quot;id\&amp;quot; : \&amp;quot;$post.id\&amp;quot;,\&amp;quot;content\&amp;quot; : &amp;#123; \&amp;quot;message\&amp;quot;:\&amp;quot;$post.content.message\&amp;quot; &amp;#125;&amp;#125;#if($foreach.hasNext),#end #end ] &amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;現在大概知道，&lt;/p&gt;
&lt;p&gt;為什麼當初開始學的時候網路上沒什麼好的教學文了，&lt;/p&gt;
&lt;p&gt;因為 config 的設置真的是挺複雜的，&lt;/p&gt;
&lt;p&gt;不過我想這一篇這樣記錄下來，應該能讓許多人省下走冤枉路的時間。&lt;/p&gt;
&lt;p&gt;對於一個程式開發者來說，學習東西的時間就是最大的成本，&lt;/p&gt;
&lt;p&gt;我想 serverless 不管對於前後端來說，&lt;/p&gt;
&lt;p&gt;都是一項很超值的投資。&lt;/p&gt;
&lt;p&gt;因為大部分時候，我們都不需要開一整台機器來完成你想做的事情。&lt;/p&gt;
&lt;p&gt;在完成這篇之後，可以做什麼練習呢？&lt;/p&gt;
&lt;p&gt;你可以試著把你原本在 EC2 上 host 的服務，&lt;/p&gt;
&lt;p&gt;轉移成 serverless 架構。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;光想就覺得超難的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者是把一些 routine 的工作，用 serverless 的方式去做，&lt;/p&gt;
&lt;p&gt;當你越過前面那些雞巴毛 config 後，&lt;/p&gt;
&lt;p&gt;你會發現開發和部署上帶來的效率令你吃驚。&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/markusklems/serverless-node-dynamodb-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Serverless node dynamodb example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.serverless.com/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serverless framework document&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://history.programmer.com.cn/11081/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解析 DynamoDB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amazon API Gateway: Mapping template reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://alexfalkowski.blogspot.tw/2013/12/micro-and-nano-services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Micro service and Nano service&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Serverless ，不是沒有 server，而是不用去擔心維護 server 這件事，&lt;/p&gt;
&lt;p&gt;不管是在部署還是開發，都是以一個個 function 為單位，&lt;/p&gt;
&lt;p&gt;這帶來了程式碼上的高度 decoupling，但同時也因為過大的彈性，&lt;/p&gt;
&lt;p&gt;常常搞的我們無所適從，就像這張圖一樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lP3wcnh.jpg&quot; alt=&quot;howto&quot;&gt;&lt;/p&gt;
&lt;p&gt;serverless 更考驗著我們對系統設計的思維，&lt;/p&gt;
&lt;p&gt;這是一篇非常粗淺的文章，&lt;/p&gt;
&lt;p&gt;目的在帶領對 serverless 有興趣的人無痛的入門，&lt;/p&gt;
&lt;p&gt;不管是在概念上，還是在實務的使用上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如你是懶得看文章的人，可以直接到我的 &lt;a href=&quot;https://github.com/abalone0204/serverless-demo-with-dynamodb-node&quot;&gt;github repo&lt;/a&gt; 上面看&lt;/p&gt;
&lt;p&gt;有哪裡寫錯的話可以提個 issue，覺得讚讚讚的話也可以給星星以茲鼓勵。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="serverless" scheme="http://abalone0204.github.com/tags/serverless/"/>
    
      <category term="dynamodb" scheme="http://abalone0204.github.com/tags/dynamodb/"/>
    
      <category term="aws-lambda" scheme="http://abalone0204.github.com/tags/aws-lambda/"/>
    
  </entry>
  
  <entry>
    <title>Saga Pattern 在前端的應用</title>
    <link href="http://abalone0204.github.com/2016/05/14/redux-saga/"/>
    <id>http://abalone0204.github.com/2016/05/14/redux-saga/</id>
    <published>2016-05-14T19:02:18.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;這是篇長文，你可以直接跳到&lt;a href=&quot;/2016/05/14/redux-saga/#Catalogue&quot;&gt;你想看的地方&lt;/a&gt;就好&lt;br&gt;或是直接在 github 上面看我 step by step 的教學&lt;br&gt;&lt;a href=&quot;https://github.com/abalone0204/redux-thunk-to-saga-tutorial/commit/1a4455b23ce6bc434d17a8c2ebcbf9e80e922be5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-thunk-to-saga-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先把結論講在一開始，這並不只是一個 library 的使用方法介紹而已，&lt;/p&gt;
&lt;p&gt;因為學習 saga pattern 對於前端工程師是有幫助的，&lt;/p&gt;
&lt;p&gt;主要不出以下三個概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;好的 UI/UX 該是一個畫面的 transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User 隨時能夠取消 transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滿足上述條件實作出來的資料流是要容易被測試的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那&lt;code&gt;redux-saga&lt;/code&gt;到底是在解決什麼問題呢？&lt;/p&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;讓我們的非同步 action 能夠更好被開發、維護、測試。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讓我們用不同的方式來思考非同步的前端資料流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/zh/3/37/Adventure_Time_-_Title_card.png&quot; alt=&quot;Adventure time&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;saga 的中文翻譯是冒險故事 &lt;/p&gt;
&lt;p&gt;這裡來舉個例子：我們要登入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;送出登入 request =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;畫面進入 loading 畫面 =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (登入成功) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    取得並把 token 快取起來 =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    拿到`username`以及對應的`token` =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    顯示錯誤訊息在首頁上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你會怎樣去設計這個資料流呢？&lt;/p&gt;
&lt;p&gt;畫面要有什麼 state ？&lt;/p&gt;
&lt;p&gt;假如登入要可以取消，你要怎樣改變畫面的 state 呢？&lt;/p&gt;
&lt;p&gt;這個流程看似簡單，&lt;/p&gt;
&lt;p&gt;但要處理的乾淨、又好測試，&lt;/p&gt;
&lt;p&gt;是不是事情就沒有那麼直覺了？&lt;/p&gt;
&lt;p&gt;目前看起來好像很抽象，但瞭解後，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; 並沒有什麼神奇的黑魔法。&lt;/p&gt;
&lt;p&gt;我不認為 &lt;code&gt;redux-saga&lt;/code&gt; 的只是拿來取代 &lt;code&gt;redux-thunk&lt;/code&gt;的工具，&lt;/p&gt;
&lt;p&gt;重要的應該是 saga 這個 pattern 背後的概念，&lt;/p&gt;
&lt;p&gt;給了你新的方式去思考前端資料流。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;送出資料 =&amp;gt; loading 動畫 =&amp;gt; 完成&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其實前端的畫面也隱含著 transaction 的概念在裡面。&lt;/p&gt;
&lt;p&gt;我認為如果有出現以下幾個現象，&lt;/p&gt;
&lt;p&gt;那 &lt;code&gt;redux-saga&lt;/code&gt; 值得你一試：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;學會 generator function 卻無處可應用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;處理非同步的 action 時，總覺得哪裡怪怪的 =&amp;gt; 回傳 promise 時要怎麼測試&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;純粹好奇 &lt;code&gt;redux-saga&lt;/code&gt;能幫助你什麼&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Catalogue&quot;&gt;&lt;a href=&quot;#Catalogue&quot; class=&quot;headerlink&quot; title=&quot;Catalogue&quot;&gt;&lt;/a&gt;Catalogue&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#什麼是-Saga&quot;&gt;什麼是 Saga&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Long-lived-transaction-LLT-有什麼問題&quot;&gt;Long lived transaction (LLT)有什麼問題&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Saga-是一種特殊的-LLT&quot;&gt;Saga 是一種特殊的 LLT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Front-end-perspective&quot;&gt;Front-end perspective (如果你懶得看理論的話可以直接從這裡開始看)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Login-flow&quot;&gt;example: Login flow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Redux-thunk-的解法與問題&quot;&gt;Redux thunk 的解法與問題&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Front-end-中的-saga&quot;&gt;Front-end 中的 saga&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Refactor-with-redux-saga&quot;&gt;Refactor with &lt;code&gt;redux-saga&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Setup&quot;&gt;Setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Effect&quot;&gt;Effect&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Watch-action&quot;&gt;Watch action&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Migrate-Login-Flow-to-saga&quot;&gt;Migrate Login Flow to saga&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Combine-loginFlow-saga&quot;&gt;Combine &lt;code&gt;loginFlow&lt;/code&gt; saga&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Abortable-flow-compensating-transaction&quot;&gt;Abortable flow(compensating transaction)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#fork-and-cancel&quot;&gt;&lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Test-for-cancelable-flow&quot;&gt;Test for cancelable flow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Combine-cancelable-loginFlow&quot;&gt;Combine cancelable &lt;code&gt;loginFlow&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;有些人會說 &lt;code&gt;redux-saga&lt;/code&gt; 的學習曲線比較陡峭，&lt;/p&gt;
&lt;p&gt;其實並不盡然。&lt;/p&gt;
&lt;p&gt;會覺得 &lt;code&gt;redux-saga&lt;/code&gt; 太過困難，&lt;/p&gt;
&lt;p&gt;通常就是因為一次就想直接學會、並應用，&lt;/p&gt;
&lt;p&gt;忽略有些預先知識必須要一步一步學習，&lt;/p&gt;
&lt;p&gt;而且有些情況，必須拉高一點視角會比較好看清楚，&lt;/p&gt;
&lt;p&gt;從概念的角度去看，而不是只關注在前端的實作。&lt;/p&gt;
&lt;p&gt;我認為這裡只有三件事情要掌握&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什麼是 saga？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;saga 跟前端開發有什麼關係？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redux-saga 的基礎用法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;什麼是-Saga&quot;&gt;&lt;a href=&quot;#什麼是-Saga&quot; class=&quot;headerlink&quot; title=&quot;什麼是 Saga&quot;&gt;&lt;/a&gt;什麼是 Saga&lt;/h1&gt;&lt;p&gt;要學一個東西，把名詞搞懂是很重要的。&lt;/p&gt;
&lt;p&gt;像 router 就是個很直覺又常見的名詞，&lt;/p&gt;
&lt;p&gt;saga 是什麼呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; 有提供一些資源供參考，&lt;/p&gt;
&lt;p&gt;包括了最原始提出 saga 這個 pattern 的&lt;a href=&quot;http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;論文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一共 11 頁，不過扣掉 acknowledgment 跟 References ，&lt;/p&gt;
&lt;p&gt;就只有 9 頁半啦！&lt;/p&gt;
&lt;p&gt;不過論文中是從 Database 的角度看，&lt;/p&gt;
&lt;p&gt;另一個影片，是從應用在分散式系統的角度去解釋，&lt;/p&gt;
&lt;p&gt;提高了不少複雜度。&lt;/p&gt;
&lt;p&gt;基於以前端的角度，這篇講解 saga 主要會以 paper 上為主。&lt;/p&gt;
&lt;p&gt;saga 其實是個很簡單的概念，&lt;/p&gt;
&lt;p&gt;要應用它也並不困難，&lt;/p&gt;
&lt;p&gt;這篇論文在 DBMS 上實作的原因，&lt;/p&gt;
&lt;p&gt;主要只是要闡明如何實做一個簡潔、有效率的 sagas，&lt;/p&gt;
&lt;p&gt;所以不要擔心接下來講的例子看起來跟 redux 或前端開發沒有關係，&lt;/p&gt;
&lt;p&gt;稍後會提到要怎樣在前端開發中應用 saga 這個 pattern。&lt;/p&gt;
&lt;p&gt;所以看個幾分鐘之後，腦袋裡會冒出許多的問號：「所以 saga 是⋯⋯？」。&lt;/p&gt;
&lt;p&gt;這裡我試著用最簡單的語言解釋 saga 是什麼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Saga&lt;/strong&gt;，就是個滿足特殊條件的 &lt;strong&gt;LLT&lt;/strong&gt;(Long lived transaction)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待會會說是什麼特殊條件。&lt;/p&gt;
&lt;p&gt;如果你不知道什麼是 Transaction：&lt;/p&gt;
&lt;p&gt;是 Database 上常會用到（但不僅止侷限於 Database）的名詞，&lt;/p&gt;
&lt;p&gt;即是「交易」。&lt;/p&gt;
&lt;p&gt;「交易」聽起來很抽象，&lt;/p&gt;
&lt;p&gt;其實他要敘述的就是銀貨兩訖後，&lt;/p&gt;
&lt;p&gt;一個交易才算是完成，&lt;/p&gt;
&lt;p&gt;假如銀貨不兩訖的話，那要退回最一開始的時候，&lt;/p&gt;
&lt;p&gt;買賣雙方的狀態會退回交易前的狀態，不會有任何改變。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Long-lived-transaction-LLT-有什麼問題&quot;&gt;&lt;a href=&quot;#Long-lived-transaction-LLT-有什麼問題&quot; class=&quot;headerlink&quot; title=&quot;Long lived transaction (LLT)有什麼問題&quot;&gt;&lt;/a&gt;Long lived transaction (LLT)有什麼問題&lt;/h2&gt;&lt;p&gt;Long lived transaction 是什麼呢？&lt;/p&gt;
&lt;p&gt;而 LLT 就是一個長時間的 transaction，&lt;/p&gt;
&lt;p&gt;就算沒有受到其他影響，&lt;/p&gt;
&lt;p&gt;整個完成可能也需要數小時或數天。&lt;/p&gt;
&lt;p&gt;聽起來，似乎是很糟糕的概念對吧？&lt;/p&gt;
&lt;p&gt;因為為了實現 transaction，我們通常會把正在 transaction 中的 object lock 住，&lt;/p&gt;
&lt;p&gt;讓其他人沒辦法更動它。&lt;/p&gt;
&lt;p&gt;（維持資料的 consistency）&lt;/p&gt;
&lt;p&gt;所以這麼長時間的 transaction，&lt;/p&gt;
&lt;p&gt;會造成兩個問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;較高的失敗率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dead lock 造成的長時間 delay&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;舉個很實際的例子，就是江蕙演唱會的訂票。&lt;/p&gt;
&lt;p&gt;購票的時間可能會是某一段時間，&lt;/p&gt;
&lt;p&gt;而我們最終要確認訂票的數，這就會是一個 LLT。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為解決這個問題，&lt;/p&gt;
&lt;p&gt;我們這裡可以假設這個 LLT：&lt;code&gt;T&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以被拆成許多相互獨立的 subtransaction的集合:&lt;br&gt;&lt;code&gt;t_1&lt;/code&gt;~&lt;code&gt;t_n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但如果我們不會希望&lt;code&gt;t_1&lt;/code&gt;~&lt;code&gt;t_n&lt;/code&gt;分別被送進 DB 並且記錄下來。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上述江蕙演唱會的例子，&lt;br&gt;每個小&lt;code&gt;t&lt;/code&gt;就會是每筆訂票紀錄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sUodUqB.jpg&quot; alt=&quot;first state&quot;&gt;&lt;/p&gt;
&lt;p&gt;假如每個 transaction 都一次就成功，&lt;/p&gt;
&lt;p&gt;而且沒有人退票的話，那個 transaction 就會正常的被執行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2P9E1wP.jpg&quot; alt=&quot;all success&quot;&gt;&lt;/p&gt;
&lt;p&gt;因為假如有一個失敗的話，&lt;/p&gt;
&lt;p&gt;那 &lt;code&gt;T&lt;/code&gt; 就不算是完成的 transaction。&lt;/p&gt;
&lt;p&gt;儘管如此，這樣做也比一般的 transaction 帶來了一些彈性，&lt;/p&gt;
&lt;p&gt;我們可以隨意的插入 subtransaction。&lt;/p&gt;
&lt;p&gt;接著就來解釋 saga 運用什麼樣的設計方式來解決這些問題。&lt;/p&gt;
&lt;h2 id=&quot;Saga-是一種特殊的-LLT&quot;&gt;&lt;a href=&quot;#Saga-是一種特殊的-LLT&quot; class=&quot;headerlink&quot; title=&quot;Saga 是一種特殊的 LLT&quot;&gt;&lt;/a&gt;Saga 是一種特殊的 LLT&lt;/h2&gt;&lt;p&gt;第一件要注意到的事就是 saga 仍然是個 LLT。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;saga&lt;/code&gt;: LLT that can be broken up into a collection of subtransactions that can be iterleaved in any way with other transactlons &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作為一個 LLT，&lt;/p&gt;
&lt;p&gt;假如任何一個 saga 中的 subtransaction: &lt;code&gt;t_i&lt;/code&gt; 單獨執行了，&lt;/p&gt;
&lt;p&gt;我們應該要有一個 compensating transaction &lt;code&gt;c_i&lt;/code&gt; 可以將它 undo。&lt;/p&gt;
&lt;p&gt;這裡的 compensating transaction，&lt;/p&gt;
&lt;p&gt;指的是從語意上的觀點來看，&lt;/p&gt;
&lt;p&gt;而不是整個系統都得還原到 &lt;code&gt;t_i&lt;/code&gt; 發生的那個時間點。&lt;/p&gt;
&lt;p&gt;再看一次上面這段話，魔鬼就藏在細節裡，&lt;/p&gt;
&lt;p&gt;這正是 saga 為什麼可以解決 LLT 問題的關鍵。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可能會覺得這兩件事不是差不多嗎？&lt;/p&gt;
&lt;p&gt;舉個例子：&lt;/p&gt;
&lt;p&gt;如果有個 LLT : &lt;code&gt;T&lt;/code&gt; 是要記住所有買江蕙票的座位數，&lt;/p&gt;
&lt;p&gt;底下每個訂票都是一個 subtransaction: &lt;code&gt;t&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;假設 &lt;code&gt;t_i&lt;/code&gt; 要被買票的人取消，&lt;/p&gt;
&lt;p&gt;我們執行 &lt;code&gt;c_i&lt;/code&gt;時，&lt;/p&gt;
&lt;p&gt;只是把買的座位數從 database 裡面減掉&lt;/p&gt;
&lt;p&gt;而不是讓 database 回到 &lt;code&gt;t_i&lt;/code&gt;發生前的時間點&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我們可以得到一個簡單的公式，&lt;/p&gt;
&lt;p&gt;Saga’s gurantee：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果全部都執行成功(Successful saga)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t_1&lt;/code&gt;, &lt;code&gt;t_2&lt;/code&gt;…., &lt;code&gt;t_n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示意圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RNCrTe0.gif&quot; alt=&quot;success gif&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;失敗的話(Unsuccessful saga)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t_1&lt;/code&gt;, &lt;code&gt;t_2&lt;/code&gt;…., &lt;code&gt;t_n&lt;/code&gt;, &lt;code&gt;c_n&lt;/code&gt;…, &lt;code&gt;c_1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/thzgNNg.gif&quot; alt=&quot;failed&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡可以注意到其實 &lt;code&gt;c4&lt;/code&gt; 是沒有做任何事情的，&lt;/p&gt;
&lt;p&gt;在實作時候如果是最後一個 transaction failed 掉的話，可以忽略 &lt;code&gt;c4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不過就算執行了也不應該會出錯&lt;/p&gt;
&lt;p&gt;因為每個執行應該都是 idempotent（冪等）的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此一來我們就掌握了對 saga 的基本知識了！&lt;/p&gt;
&lt;p&gt;在進入&lt;code&gt;redux-saga&lt;/code&gt;前，先來看看我們會遇到什麼問題&lt;/p&gt;
&lt;h1 id=&quot;Front-end-perspective&quot;&gt;&lt;a href=&quot;#Front-end-perspective&quot; class=&quot;headerlink&quot; title=&quot;Front-end perspective&quot;&gt;&lt;/a&gt;Front-end perspective&lt;/h1&gt;&lt;h2 id=&quot;Login-flow&quot;&gt;&lt;a href=&quot;#Login-flow&quot; class=&quot;headerlink&quot; title=&quot;Login flow&quot;&gt;&lt;/a&gt;Login flow&lt;/h2&gt;&lt;p&gt;講了這麼多抽象概念的事情，&lt;/p&gt;
&lt;p&gt;讓我們回到實務上來看，&lt;/p&gt;
&lt;p&gt;來看最開始的這個例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;送出登入 request =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;畫面進入 loading 畫面 =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (登入成功) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    取得並把 token 快取起來 =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    拿到`username`以及對應的`token` =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    顯示錯誤訊息在首頁上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;畫面出來大概是這樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aWm0IqG.gif&quot; alt=&quot;login flow&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下部分你可能必須要熟悉 &lt;code&gt;redux&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;或是任何單向資料流的架構，&lt;/p&gt;
&lt;p&gt;我盡量不預設讀者有任何預備知識來寫以下的文章 XD&lt;/p&gt;
&lt;p&gt;不過真的不行的時候，會放上參考資料&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 redux 中，如果要改變畫面的狀態(state)，&lt;/p&gt;
&lt;p&gt;我們必須 dispatch 一個 action 到 store 去，&lt;/p&gt;
&lt;p&gt;而對應的 reducer 會根據 action 幫我們生出下一個 state，&lt;/p&gt;
&lt;p&gt;並且將 store 中的 state 更新成對應的新 state。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reducer(state , action) =&amp;gt; nextState&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假如還是很模糊的話，可以看看 redux 優秀的文件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;來看一下 &lt;code&gt;login&lt;/code&gt; 的 reducer 會長什麼樣子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裡為了簡化，有刪去一些東西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;login&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    status: &#39;init&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; LOGIN_REQUEST:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;status: &lt;span class=&quot;string&quot;&gt;&#39;loading&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; LOGIN_SUCCESS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                status: &lt;span class=&quot;string&quot;&gt;&#39;logined&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                username: action.response.username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                token: action.response.token&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; LOGIN_ERROR:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                status: &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                error: action.error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;歸類成以下幾個結果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;LOGIN_REQUEST&lt;/code&gt;：當我們送出&lt;code&gt;LOGIN_REQUEST&lt;/code&gt;這個 action 時，會進入 loading 狀態&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;LOGIN_SUCCESS&lt;/code&gt;：登入成功，會拿到 &lt;code&gt;username&lt;/code&gt; 以及對應的 &lt;code&gt;token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;LOGIN_ERROR&lt;/code&gt;：登入失敗，會拿到錯誤訊息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那真正執行的時候該如何執行呢？&lt;/p&gt;
&lt;h2 id=&quot;Redux-thunk-的解法與問題&quot;&gt;&lt;a href=&quot;#Redux-thunk-的解法與問題&quot; class=&quot;headerlink&quot; title=&quot;Redux thunk 的解法與問題&quot;&gt;&lt;/a&gt;Redux thunk 的解法與問題&lt;/h2&gt;&lt;p&gt;Thunk？Is it good to drink?&lt;/p&gt;
&lt;p&gt;來看一下維基百科的解釋：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer programming, &lt;strong&gt;a thunk is a subroutine that is created, often automatically, to assist a call to another subroutine.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只截錄一小段，剩下的多看也只是搞混。&lt;/p&gt;
&lt;p&gt;簡單說就是我們為了把一個 subroutine A 的工作，&lt;/p&gt;
&lt;p&gt;帶到另一個 subroutine B 做完，&lt;/p&gt;
&lt;p&gt;中間需要一個橋樑：subroutine C，&lt;/p&gt;
&lt;p&gt;這個 C 就是 thunk 啦！&lt;/p&gt;
&lt;p&gt;在 redux 中，我們如果要讓一個 action 能夠更新，&lt;/p&gt;
&lt;p&gt;必須要 dispatch 它。&lt;/p&gt;
&lt;p&gt;所以上述的&lt;code&gt;login&lt;/code&gt;流程大概會長這個樣子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loginFlow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123;username, password&amp;#125;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (dispatch) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch(loginRequest())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loginAPI(&amp;#123;username, password&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .then(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dispatch(loginSucess(response))    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .catch(error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dispatch(loginError(error))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;loginRequest&lt;/code&gt; 是一個 action creator，&lt;br&gt;會回傳 &lt;code&gt;{type: LOGIN_REQUEST}&lt;/code&gt;這個 object。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裡回傳的就是一個 thunk，&lt;/p&gt;
&lt;p&gt;因為我們在這個 action 裡面同時得完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;送request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;收到 response data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;處理錯誤&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我們必須把 dispatch 給傳進來，&lt;/p&gt;
&lt;p&gt;完成原本只靠單個 subroutine(一般的 action creator) 無法做到的事情。&lt;/p&gt;
&lt;p&gt;這裡有什麼問題呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你要如何去測試這個一連串的動作？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;這裡回傳的是一個 promise，它無法被 abort，如果我們今天想加上取消按鈕呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更 low level 一點的問法：你要在哪裡 dispatch &lt;code&gt;loginCancel&lt;/code&gt;這個 action 呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然， login 是一個相對簡易的流程，&lt;/p&gt;
&lt;p&gt;假如遇到有更多 state 要處理，&lt;/p&gt;
&lt;p&gt;無法寫出測試以及不那麼直覺的語法，&lt;/p&gt;
&lt;p&gt;將會為我們的開發帶來一些問題。&lt;/p&gt;
&lt;h2 id=&quot;Front-end-中的-saga&quot;&gt;&lt;a href=&quot;#Front-end-中的-saga&quot; class=&quot;headerlink&quot; title=&quot;Front-end 中的 saga&quot;&gt;&lt;/a&gt;Front-end 中的 saga&lt;/h2&gt;&lt;p&gt;這裡的一整個 &lt;code&gt;loginFlow&lt;/code&gt;，其實就是一個 LLT(長時間的 transaction)，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#Long-lived-transaction-LLT-有什麼問題&quot;&gt;Long lived transaction 是什麼？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看完這一段再回到這裡 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;底下的 subtransaction 就是各個 action(request, success, error)。&lt;/p&gt;
&lt;p&gt;有了這樣的概念之後，剩下來的事就簡單多了。&lt;/p&gt;
&lt;p&gt;而且 saga 就是底下每個 transaction 都附帶 compensating transaction 的 LLT，&lt;/p&gt;
&lt;p&gt;也就是說上述的 abort ，在 saga pattern 之下是內建的。&lt;/p&gt;
&lt;h1 id=&quot;Refactor-with-redux-saga&quot;&gt;&lt;a href=&quot;#Refactor-with-redux-saga&quot; class=&quot;headerlink&quot; title=&quot;Refactor with redux-saga&quot;&gt;&lt;/a&gt;Refactor with &lt;code&gt;redux-saga&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;這裡跟概念比較沒關係，&lt;/p&gt;
&lt;p&gt;但環境設定絕對是許多人卡關的第一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要建立一個 sagas 資料夾，&lt;/p&gt;
&lt;p&gt;底下有一個 rootSaga，它會是一個 generator function：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;rootSaga&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to be done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著在 middleware 中將它跑起來。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; rootSaga &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./sagas&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sagaMiddleware = createSagaMiddleware()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = createStore(rootReducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  applyMiddleware(thunkMiddleware, sagaMiddleware)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sagaMiddleware.run(rootSaga)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡的基本設定，其實每次都大同小異，&lt;/p&gt;
&lt;p&gt;所以就不再多著墨底下發生什麼事情。&lt;/p&gt;
&lt;h2 id=&quot;Effect&quot;&gt;&lt;a href=&quot;#Effect&quot; class=&quot;headerlink&quot; title=&quot;Effect&quot;&gt;&lt;/a&gt;Effect&lt;/h2&gt;&lt;p&gt;前面有提到的 subtransaction，可以很粗略的對應到這裡的 &lt;code&gt;effect&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;saga 不出以下幾種情形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;監聽 action 發生 -&amp;gt; take, takeEvery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;執行 transaction -&amp;gt; put &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取消 transaction -&amp;gt; cancel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右邊的就是我們在 redux-saga 中對應到的 helper function，&lt;/p&gt;
&lt;p&gt;他們就是 action creactor 一樣，會回傳一個物件，&lt;/p&gt;
&lt;p&gt;不過這一次是回傳一個 effect ，而不是 action，&lt;/p&gt;
&lt;p&gt;e.q: &lt;code&gt;take({type: LOGIN_REQUEST})&lt;/code&gt; 就是產生一個拿到 loginRequest 的 effect。&lt;/p&gt;
&lt;p&gt;接著就來把 code 改寫吧！&lt;/p&gt;
&lt;h2 id=&quot;Watch-action&quot;&gt;&lt;a href=&quot;#Watch-action&quot; class=&quot;headerlink&quot; title=&quot;Watch action&quot;&gt;&lt;/a&gt;Watch action&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    takeEvery&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux-saga/effects&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGIN_REQUEST,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGIN_SUCCESS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGIN_ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../actions/login.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;watchRequestLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; takeEvery(LOGIN_REQUEST, loginFlow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;loginFlow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// to be done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值得注意的是這裡都是 generator function，&lt;/p&gt;
&lt;p&gt;假如你完全對 generator function 沒有概念的話，&lt;/p&gt;
&lt;p&gt;推薦你看&lt;a href=&quot;http://abalone0204.github.io/2016/05/08/es6-generator-func/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是我寫的 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裡的 code 還蠻語義化的，&lt;/p&gt;
&lt;p&gt;就是當我們遇到一個 &lt;code&gt;LOGIN_REQUEST&lt;/code&gt; 的 action ，&lt;/p&gt;
&lt;p&gt;就會執行 &lt;code&gt;loginFlow&lt;/code&gt; 這個 function。&lt;/p&gt;
&lt;p&gt;接著是前面提到的好測試，&lt;/p&gt;
&lt;p&gt;我們來測試這個 saga 吧！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;&#39;Sagas/ login&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    describe(&lt;span class=&quot;string&quot;&gt;&#39;watchRequestLogin&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = watchRequestLogin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        it(&lt;span class=&quot;string&quot;&gt;&#39;should take every login request&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = takeEvery(LOGIN_REQUEST, loginFlow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next().value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            assert.equal(expected.name, actual.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡比較 tricky 是我們測試的是 effect 的名字，&lt;/p&gt;
&lt;p&gt;為什麼不是直接 deepEqual 兩個 effect？&lt;/p&gt;
&lt;p&gt;我們回傳的 effect 其實就是個 object，長相是下面這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; name: &lt;span class=&quot;string&quot;&gt;&#39;takeEvery(LOGIN_REQUEST, loginFlow)&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  next: [&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;: next],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;: [&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要 name 是對的，我們就知道他在對應的 &lt;code&gt;LOGIN_REQUEST&lt;/code&gt;進來時，&lt;/p&gt;
&lt;p&gt;會執行&lt;code&gt;loginFlow&lt;/code&gt; 這個 function。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而且在JavaScript中會判斷這兩個 next 是不同 function XD&lt;/p&gt;
&lt;p&gt;直接測試名字，是我現在想到比較直觀的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Migrate-Login-Flow-to-saga&quot;&gt;&lt;a href=&quot;#Migrate-Login-Flow-to-saga&quot; class=&quot;headerlink&quot; title=&quot;Migrate Login Flow to saga&quot;&gt;&lt;/a&gt;Migrate Login Flow to saga&lt;/h2&gt;&lt;p&gt;Talk is cheap:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;loginFlow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; call(loginAPI, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username: action.username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password: action.password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; put(&amp;#123;type: LOGIN_SUCCESS&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; put(&amp;#123;type: LOGIN_ERROR, error&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;call 跟我們熟悉的 &lt;code&gt;Function.prototype.call&lt;/code&gt; 很像！&lt;/p&gt;
&lt;p&gt;不一樣的是，這裡的 call 會回傳的是一個 &lt;code&gt;effect&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;這代表什麼？代表我們能夠很好的測試它，&lt;/p&gt;
&lt;p&gt;而不是真的去 call loginAPI，帶來了無止盡的 mock。&lt;/p&gt;
&lt;p&gt;我們把 loginFlow 的 test 拆成四個部分來看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Initialize&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call loginAPI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle login success&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle login error&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面的 watch function 會把 request 這個 action 丟進來這裡，&lt;/p&gt;
&lt;p&gt;所以我們要先製造出一個待會會用到的 iterator：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;執行 Generator function 會返回一個 iterator，&lt;br&gt;然後我們去對這個 iterator 呼叫 &lt;code&gt;next&lt;/code&gt; function&lt;br&gt;感謝 CT 的指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = loginFlow(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: LOGIN_REQUEST,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username: &lt;span class=&quot;string&quot;&gt;&#39;denny&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password: &lt;span class=&quot;string&quot;&gt;&#39;12345678&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來則是 call API，注意我們測試的是 call effect，&lt;/p&gt;
&lt;p&gt;而不是真的去呼叫這個 API：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should call loginAPI&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = call(loginAPI, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        username: &lt;span class=&quot;string&quot;&gt;&#39;denny&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        password: &lt;span class=&quot;string&quot;&gt;&#39;12345678&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next().value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should handle login success&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getResponse = () =&amp;gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        username: &lt;span class=&quot;string&quot;&gt;&#39;denny&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        token: &lt;span class=&quot;string&quot;&gt;&#39;fake token&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = put(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: LOGIN_SUCCESS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        response: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username: &lt;span class=&quot;string&quot;&gt;&#39;denny&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            token: &lt;span class=&quot;string&quot;&gt;&#39;fake token&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next(getResponse()).value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡我們可以運用 generator 的特性來把假 error 丟進去XD&lt;/p&gt;
&lt;p&gt;裡面的 catch 接到 error 之後，就會執行 login error 的流程了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should handle login error&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; error = &lt;span class=&quot;string&quot;&gt;&#39;error message&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = put(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: LOGIN_ERROR,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        error: &lt;span class=&quot;string&quot;&gt;&#39;error message&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = generator.throw(error).value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Combine-loginFlow-saga&quot;&gt;&lt;a href=&quot;#Combine-loginFlow-saga&quot; class=&quot;headerlink&quot; title=&quot;Combine loginFlow saga&quot;&gt;&lt;/a&gt;Combine loginFlow saga&lt;/h2&gt;&lt;p&gt;首先要把 login 的 saga 接到 root saga 去&lt;/p&gt;
&lt;p&gt;接著我們要來把原本 dispatch 的 loginFlow action 換成 loginFlowSaga 了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;watchRequestLogin&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./login.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;rootSaga&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        watchRequestLogin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來我們只要把原本放 loginFlow action 的地方，&lt;/p&gt;
&lt;p&gt;換成 &lt;code&gt;loginRequest&lt;/code&gt; 這個相對簡單的 action creator 就行了。&lt;/p&gt;
&lt;p&gt;這樣也更符合實際在運作的方式，&lt;/p&gt;
&lt;p&gt;他按下這個按鈕做的 action 就只是送出 request 而已，&lt;/p&gt;
&lt;p&gt;剩下的部分就是讓 saga 中的 generator 去管理，&lt;/p&gt;
&lt;p&gt;而且經由這樣的拆分，我們發現接下來能夠實作 &lt;code&gt;cancel&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是 saga 中的 compensating&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裡的 code 就請到 github 上面去看了 XD&lt;/p&gt;
&lt;p&gt;總之我們得到了一樣的效果，但是更容易測試以及維護：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aWm0IqG.gif&quot; alt=&quot;login flow&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Abortable-flow-compensating-transaction&quot;&gt;&lt;a href=&quot;#Abortable-flow-compensating-transaction&quot; class=&quot;headerlink&quot; title=&quot;Abortable flow(compensating transaction)&quot;&gt;&lt;/a&gt;Abortable flow(compensating transaction)&lt;/h1&gt;&lt;p&gt;前面有說到要實作取消這個功能，&lt;/p&gt;
&lt;p&gt;在 promise 中是很困難的，因為 promise 沒有辦法 abort。&lt;/p&gt;
&lt;p&gt;不過我們活用 generator 的，就有辦法很直觀的實作出這個功能來。&lt;/p&gt;
&lt;p&gt;首先當然是先做出 cancel 這個 action，&lt;/p&gt;
&lt;p&gt;以及讓 reducer 根據這個 action 作出對應的改變。&lt;/p&gt;
&lt;p&gt;完成了之後，接下來就是 saga 的重頭戲了。&lt;/p&gt;
&lt;h2 id=&quot;fork-and-cancel&quot;&gt;&lt;a href=&quot;#fork-and-cancel&quot; class=&quot;headerlink&quot; title=&quot;fork and cancel&quot;&gt;&lt;/a&gt;&lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;首先我們要將原本的 loginFlow 拆分成兩部分，&lt;/p&gt;
&lt;p&gt;第一部分是原本的 login 流程：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;authorize&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123;username, password&amp;#125;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; call(loginAPI, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; put(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type: LOGIN_SUCCESS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; put(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type: LOGIN_ERROR,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二部分則是取消 login：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;loginFlow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; task = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; fork(authorize,&amp;#123;username:action.username, password: action.password&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; take(LOGIN_CANCEL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; cancel(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡我們看到兩個新的 effect，第一個是 fork，&lt;/p&gt;
&lt;p&gt;語法基本上跟 call 相同，&lt;/p&gt;
&lt;p&gt;不同的部分是 fork 跟我們在 git 上面的 fork 一樣會開一支 branch出來處理，&lt;/p&gt;
&lt;p&gt;當 yield fork effect 之後，&lt;/p&gt;
&lt;p&gt;就會自動開一條 branch 執行下去，這裡有個 @kuy 做的圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CidrNh4UUAAJuSt.jpg&quot; alt=&quot;process&quot;&gt;&lt;/p&gt;
&lt;p&gt;而如果我們在上述 task 完成之前，就接收到了 &lt;code&gt;loginCancel&lt;/code&gt; 這個 action，&lt;/p&gt;
&lt;p&gt;那所有在 &lt;code&gt;task&lt;/code&gt; 裡面的動作就會被 abort 掉！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是不是覺得有 race condition 的概念在裡面，&lt;br&gt;沒錯，&lt;code&gt;redux-saga&lt;/code&gt;也提供了 &lt;code&gt;race&lt;/code&gt; 這個 effect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Test-for-cancelable-flow&quot;&gt;&lt;a href=&quot;#Test-for-cancelable-flow&quot; class=&quot;headerlink&quot; title=&quot;Test for cancelable flow&quot;&gt;&lt;/a&gt;Test for cancelable flow&lt;/h2&gt;&lt;p&gt;這裡一樣也測試以下幾件事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;是否有 fork 一個新的 task&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否能處理 cancel 這個 function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆分出來的 authorize 是否正常運作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先當然是先看進入 loginFlow 之後有沒有 fork ：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should fork to authorize&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = fork(authorize, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        username: &lt;span class=&quot;string&quot;&gt;&#39;denny&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        password: &lt;span class=&quot;string&quot;&gt;&#39;12345678&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next().value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下來是是否能處裡 cancel，&lt;/p&gt;
&lt;p&gt;這裡我們就需要用到 mock 了，&lt;/p&gt;
&lt;p&gt;在最外層的地方從 &lt;code&gt;redux-saga/utils&lt;/code&gt; 引用 &lt;code&gt;createMockTask&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; task = createMockTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should take cancel login action&#39;&lt;/span&gt;,  () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = take(LOGIN_CANCEL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next(task).value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should cancel the login task&#39;&lt;/span&gt;,  () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; expected = cancel(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; actual = iterator.next().value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert.deepEqual(expected, actual)            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡仍然是運用了 generator 的特性來做 mock，&lt;/p&gt;
&lt;p&gt;因為我們再隔一個動作才能取消 task，&lt;/p&gt;
&lt;p&gt;所以在這之前我們要先把 mock 起來的 task 丟進去。&lt;/p&gt;
&lt;p&gt;最後則是確認原本的 authorize 流程還是能正常運作，&lt;/p&gt;
&lt;p&gt;基本上只是把原本的 test case 丟進另一個 describe 的 block 而已，&lt;/p&gt;
&lt;p&gt;詳情可以去看 repo 裡的 code。&lt;/p&gt;
&lt;h2 id=&quot;Combine-cancelable-loginFlow&quot;&gt;&lt;a href=&quot;#Combine-cancelable-loginFlow&quot; class=&quot;headerlink&quot; title=&quot;Combine cancelable loginFlow&quot;&gt;&lt;/a&gt;Combine cancelable loginFlow&lt;/h2&gt;&lt;p&gt;其實這裡蠻簡單的，&lt;/p&gt;
&lt;p&gt;只是新增一個按鈕，按了會 dispatch&lt;code&gt;cancelLogin&lt;/code&gt;這個action，&lt;/p&gt;
&lt;p&gt;一切就結束了。 &lt;/p&gt;
&lt;p&gt;像是底下這個樣子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CWhs8xi.gif&quot; alt=&quot;cancel&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;結論就是我們現在終於將 saga pattern 應用在前端了，&lt;/p&gt;
&lt;p&gt;每一個好的 UX 都會是一個 transaction，&lt;/p&gt;
&lt;p&gt;而且比起原本的論文中，我們多了一些彈性，&lt;/p&gt;
&lt;p&gt;可以選擇要不要加上 compensating transiction。&lt;/p&gt;
&lt;p&gt;如此一來我們的非同步 action 變得更好測試，&lt;/p&gt;
&lt;p&gt;而且也不用擔心在每次處理過度複雜的資料流時，&lt;/p&gt;
&lt;p&gt;沒有依據可找了，因為我們都是在組合各種 effect 而已XD&lt;/p&gt;
&lt;h1 id=&quot;參考資料&quot;&gt;&lt;a href=&quot;#參考資料&quot; class=&quot;headerlink&quot; title=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sagas original paper by Hector Garcia-Molina &amp;amp; Kenneth Salem&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/abalone0204/redux-thunk-to-saga-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-thunk-to-saga-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;這是篇長文，你可以直接跳到&lt;a href=&quot;/2016/05/14/redux-saga/#Catalogue&quot;&gt;你想看的地方&lt;/a&gt;就好&lt;br&gt;或是直接在 github 上面看我 step by step 的教學&lt;br&gt;&lt;a href=&quot;https://github.com/abalone0204/redux-thunk-to-saga-tutorial/commit/1a4455b23ce6bc434d17a8c2ebcbf9e80e922be5&quot;&gt;redux-thunk-to-saga-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先把結論講在一開始，這並不只是一個 library 的使用方法介紹而已，&lt;/p&gt;
&lt;p&gt;因為學習 saga pattern 對於前端工程師是有幫助的，&lt;/p&gt;
&lt;p&gt;主要不出以下三個概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;好的 UI/UX 該是一個畫面的 transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User 隨時能夠取消 transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滿足上述條件實作出來的資料流是要容易被測試的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那&lt;code&gt;redux-saga&lt;/code&gt;到底是在解決什麼問題呢？&lt;/p&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;讓我們的非同步 action 能夠更好被開發、維護、測試。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讓我們用不同的方式來思考非同步的前端資料流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="redux" scheme="http://abalone0204.github.com/tags/redux/"/>
    
      <category term="saga" scheme="http://abalone0204.github.com/tags/saga/"/>
    
      <category term="redux-saga" scheme="http://abalone0204.github.com/tags/redux-saga/"/>
    
  </entry>
  
  <entry>
    <title>淺入淺出 Generator Function</title>
    <link href="http://abalone0204.github.com/2016/05/08/es6-generator-func/"/>
    <id>http://abalone0204.github.com/2016/05/08/es6-generator-func/</id>
    <published>2016-05-08T21:43:08.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;es 2015 中有一項新的 feature 叫做 &lt;strong&gt;generator function&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;假如熟稔其他語言的人，&lt;/p&gt;
&lt;p&gt;可能都知道 generator function 是什麼，&lt;/p&gt;
&lt;p&gt;不過對於一位平常都在寫原生 JavaScript 的人，這就很新鮮了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當然，generator 就算在 es 裡面也不算是什麼太新鮮的東西。&lt;br&gt;畢竟跟 JavaScript 有關的東西大概超過一個月就算舊的了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Generator function 並不是一件求新求潮的一件事情，&lt;/p&gt;
&lt;p&gt;活用 Generator function 能讓測試以及開發非同步的程式碼都變得更直觀。&lt;/p&gt;
&lt;p&gt;這篇文章就來淺淺的介紹一下 Generator function 究竟是什麼。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;之所以是&lt;strong&gt;淺淺的介紹&lt;/strong&gt;是因為，&lt;/p&gt;
&lt;p&gt;我認為深入介紹太多不同的特性，&lt;/p&gt;
&lt;p&gt;沒有搭配實際的應用，&lt;/p&gt;
&lt;p&gt;那其實只是一篇寫的比較詳細的 document，&lt;/p&gt;
&lt;p&gt;所以這篇只打算介紹到「可以用」的程度而已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.rumproast.com/images/uploads/shallow_end_thumb.jpg&quot; alt=&quot;shallow&quot;&gt;&lt;/p&gt;
&lt;p&gt;這篇文章的圖片就是在提醒你這是一篇淺淺的文章，&lt;/p&gt;
&lt;p&gt;讓我們慢慢跳進去，才不會一開始就把頭撞爛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實本來是要寫關於&lt;code&gt;redux-saga&lt;/code&gt;的，&lt;br&gt;只是不先介紹 generator 真的講不下去 Q_Q&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這篇會包含以下幾個主題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Generator-function-是什麼&quot;&gt;Generator function 是什麼&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#宣告一個-generator-function&quot;&gt;宣告一個 Generator function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#在-next-中傳入參數&quot;&gt;在 &lt;code&gt;next&lt;/code&gt; 中傳入參數&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#for-of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Error-handling-Optional&quot;&gt;Error handling(optional)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#Delegating-Generators-Generator-中的-generator-optional&quot;&gt;Delegating Generators - Generator 中的 generator (optional)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#如何啟用-Generator-function&quot;&gt;如何啟用 Generator function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#實際上的應用&quot;&gt;實際上的應用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Generator-function-是什麼&quot;&gt;&lt;a href=&quot;#Generator-function-是什麼&quot; class=&quot;headerlink&quot; title=&quot;Generator function 是什麼&quot;&gt;&lt;/a&gt;Generator function 是什麼&lt;/h1&gt;&lt;p&gt;先來講講我們熟悉的 function：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;number&quot;&gt;1E10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0, 1, 2.... 1E10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是個 run-to-completion 的 function，&lt;/p&gt;
&lt;p&gt;一旦進去了，就會一直執行到結束，&lt;/p&gt;
&lt;p&gt;看上述的 code 就知道這個東西會執行的非常非常久，&lt;/p&gt;
&lt;p&gt;因為它一旦進入，就要執行到被完成為止。&lt;/p&gt;
&lt;p&gt;generator function 特別的地方就是它可以被暫停，&lt;/p&gt;
&lt;p&gt;等到下次進來時再繼續呼叫它。&lt;/p&gt;
&lt;p&gt;先看下方這個改寫過後的小例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;generatorFoo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;number&quot;&gt;1E10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = generatorFoo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.next() &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.next() &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.next() &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能會有點不熟悉這樣的語法，&lt;/p&gt;
&lt;p&gt;不過可以先感受一下一次拿一個值出來，&lt;/p&gt;
&lt;p&gt;以及可以被暫停的 function 是長什麼樣子。&lt;/p&gt;
&lt;p&gt;下面來更清楚地敘述一下 generator function 的語法。&lt;/p&gt;
&lt;h1 id=&quot;Syntax&quot;&gt;&lt;a href=&quot;#Syntax&quot; class=&quot;headerlink&quot; title=&quot;Syntax&quot;&gt;&lt;/a&gt;Syntax&lt;/h1&gt;&lt;h2 id=&quot;宣告一個-generator-function&quot;&gt;&lt;a href=&quot;#宣告一個-generator-function&quot; class=&quot;headerlink&quot; title=&quot;宣告一個 generator function&quot;&gt;&lt;/a&gt;宣告一個 generator function&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;generatorFoo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;function&lt;/code&gt; 後面或多個 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有人會爭論到底是要放在 function 關鍵字後面，&lt;br&gt;還是直接放在 function 名字前面&lt;br&gt;e.q: &lt;code&gt;function *generatorFoo&lt;/code&gt;&lt;br&gt;兩個都是合格的語法，&lt;br&gt;不過我習慣放在 &lt;code&gt;function&lt;/code&gt; 關鍵字後面，&lt;br&gt;我認為這是個不同的 &lt;code&gt;function&lt;/code&gt;，&lt;br&gt;而且 function name 本身並不該包含 &lt;code&gt;*&lt;/code&gt;&lt;br&gt;至於參考資料裡面有附上 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN 中對於 generator function 的語法介紹&lt;/a&gt;，&lt;br&gt;也將 &lt;code&gt;*&lt;/code&gt; 放在緊接著 &lt;code&gt;function&lt;/code&gt; 關鍵字的後方。&lt;br&gt;這一部份還沒做過更全面的研究，&lt;br&gt;畢竟最近也才在實作中加入 generator function 而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;yield&quot;&gt;&lt;a href=&quot;#yield&quot; class=&quot;headerlink&quot; title=&quot;yield&quot;&gt;&lt;/a&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;這個關鍵字估計就是 generator 中最特別的概念了，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;generatorFoo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;number&quot;&gt;1E10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;當我們呼叫 &lt;code&gt;generatorFoo&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;會得到一個 iterator，&lt;/p&gt;
&lt;p&gt;當我們每次呼叫這個 iterator 的 &lt;code&gt;next&lt;/code&gt; 方法時，&lt;/p&gt;
&lt;p&gt;就會執行 &lt;code&gt;generatorFoo&lt;/code&gt;，一直到出現 &lt;code&gt;yield&lt;/code&gt; 關鍵字的地方，&lt;/p&gt;
&lt;p&gt;接下來會暫停，直到下次呼叫 &lt;code&gt;next&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道還有 &lt;code&gt;yield*&lt;/code&gt;，不過這個概念等後面再說&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;next&quot;&gt;&lt;a href=&quot;#next&quot; class=&quot;headerlink&quot; title=&quot;next&quot;&gt;&lt;/a&gt;&lt;code&gt;next&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = generatorFoo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.next() &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像以上的例子，第一次呼叫 &lt;code&gt;next&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;就會執行到 &lt;code&gt;yield i&lt;/code&gt; 這個位置，接著暫停這個函數，&lt;/p&gt;
&lt;p&gt;直到下次執行&lt;code&gt;next&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt; 返回什麼？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;next&lt;/code&gt; function 會返回一個物件，裡面包含著兩個 properties，&lt;/p&gt;
&lt;p&gt;分別是 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;done&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt;，就是我們在前一段中從 &lt;code&gt;yield&lt;/code&gt; 那個位置，&lt;/p&gt;
&lt;p&gt;接到的「值」。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;done&lt;/code&gt; 是個 boolean 值，&lt;/p&gt;
&lt;p&gt;假如這個 generator function 完全被執行完的話，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;done&lt;/code&gt;就會變成 &lt;code&gt;true&lt;/code&gt;，反之亦然。&lt;/p&gt;
&lt;p&gt;這裡要注意的是當執行到最後一個 &lt;code&gt;yield&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;done&lt;/code&gt; 仍然會是 &lt;code&gt;false&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;再執行一次才會得到 &lt;code&gt;done&lt;/code&gt; 為 &lt;code&gt;true&lt;/code&gt; 的結果。&lt;/p&gt;
&lt;p&gt;而 generator function 仍然是一個 function，&lt;/p&gt;
&lt;p&gt;我們可以在裡面 &lt;code&gt;return&lt;/code&gt; 東西，&lt;/p&gt;
&lt;p&gt;如此在執行到 &lt;code&gt;return&lt;/code&gt; 這一行時，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next&lt;/code&gt; 就會返回 &lt;code&gt;value&lt;/code&gt; 為 &lt;code&gt;return&lt;/code&gt;的東西，&lt;/p&gt;
&lt;p&gt;並且 &lt;code&gt;done&lt;/code&gt; 為 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提醒&lt;/strong&gt;：&lt;br&gt;如果你真的需要 return，那你很可能只需要普通的 function 就足夠&lt;br&gt;在 generator function 裡面 return 東西，&lt;br&gt;容易令人感到困惑，簡言之，沒事別這樣做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在-next-中傳入參數&quot;&gt;&lt;a href=&quot;#在-next-中傳入參數&quot; class=&quot;headerlink&quot; title=&quot;在 next 中傳入參數&quot;&gt;&lt;/a&gt;在 &lt;code&gt;next&lt;/code&gt; 中傳入參數&lt;/h2&gt;&lt;p&gt;我們可以這樣做：&lt;code&gt;next(x)&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;這樣做的結果就是將&lt;code&gt;x&lt;/code&gt;塞入前一個 &lt;code&gt;yield&lt;/code&gt; 產生的地方。&lt;/p&gt;
&lt;p&gt;直接看例子會更有感覺&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// source from:  https://davidwalsh.name/es6-generators&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * (&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; z = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (y / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (x + y + z);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = foo(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(iterator.next());       &lt;span class=&quot;comment&quot;&gt;// &amp;#123; value:6, done:false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( iterator.next( &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; ) );   &lt;span class=&quot;comment&quot;&gt;// &amp;#123; value:8, done:false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( iterator.next( &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; ) );   &lt;span class=&quot;comment&quot;&gt;// &amp;#123; value:42, done:true &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一個 &lt;code&gt;next&lt;/code&gt; 不傳入參數是因為在這之前，&lt;/p&gt;
&lt;p&gt;不會有前面一個 &lt;code&gt;yield&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而第二個 &lt;code&gt;next&lt;/code&gt; 中傳入的 &lt;code&gt;12&lt;/code&gt;完全替代掉了前面 &lt;code&gt;x+1&lt;/code&gt; 的值，&lt;/p&gt;
&lt;p&gt;所以後面的 &lt;code&gt;z&lt;/code&gt; 會等於 &lt;code&gt;12*2/3&lt;/code&gt;，也就是 &lt;code&gt;8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最後一個傳入 &lt;code&gt;13&lt;/code&gt;，是替代掉第二個 &lt;code&gt;yield&lt;/code&gt; 所產生的值，&lt;/p&gt;
&lt;p&gt;這裡已經可以完全忽略 &lt;code&gt;y/3&lt;/code&gt; 是什麼，直接替代成 &lt;code&gt;13&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;將上述的值全部替代進去會長成下面這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;* (&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; z = (&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;看起來很蠢沒錯，&lt;br&gt;不過這樣替代值的方式也許比直接文字描述來的更直觀一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;for-of&quot;&gt;&lt;a href=&quot;#for-of&quot; class=&quot;headerlink&quot; title=&quot;for...of&quot;&gt;&lt;/a&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們一樣可以使用 &lt;code&gt;for&lt;/code&gt; 來遍歷整個 iterator，&lt;/p&gt;
&lt;p&gt;不過要注意的是，我們只會拿出 &lt;code&gt;done&lt;/code&gt;為 &lt;code&gt;false&lt;/code&gt; 的值，&lt;/p&gt;
&lt;p&gt;也就是說上述的 &lt;code&gt;2&lt;/code&gt; 並不會在 &lt;code&gt;for...of&lt;/code&gt; 中被拿到。&lt;/p&gt;
&lt;h2 id=&quot;Error-handling-Optional&quot;&gt;&lt;a href=&quot;#Error-handling-Optional&quot; class=&quot;headerlink&quot; title=&quot;Error handling (Optional)&quot;&gt;&lt;/a&gt;Error handling (Optional)&lt;/h2&gt;&lt;p&gt;雖然說是 optional，&lt;/p&gt;
&lt;p&gt;不過為了在實戰中時寫出更 robust 的程式碼，&lt;/p&gt;
&lt;p&gt;瞭解 error 要如何處理是很重要的，&lt;/p&gt;
&lt;p&gt;畢竟你連丟出來都沒辦法， unit-test 就測不了啦！&lt;/p&gt;
&lt;p&gt;在 generator 中可以用我們熟悉的 try…catch 技法來做到 error handling：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&quot;x: &quot;&lt;/span&gt; + x ); &lt;span class=&quot;comment&quot;&gt;// may never get here!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&quot;Error: &quot;&lt;/span&gt; + err );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不一樣的是我們能在外面直接把 error 丟進去：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.next() &lt;span class=&quot;comment&quot;&gt;// x: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// &amp;#123;value: 3, done: false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator.throw(&lt;span class=&quot;string&quot;&gt;&#39;error messages&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Error: error messages&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裡有個比較 tricky 的地方是我們把 error 給丟進去後，&lt;/p&gt;
&lt;p&gt;如果在 generator 內部沒有catch 到，&lt;/p&gt;
&lt;p&gt;這個 error 就會丟出來外面被 catch 住：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator = foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iterator.throw( &lt;span class=&quot;string&quot;&gt;&quot;error message&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&quot;Error: &quot;&lt;/span&gt; + err ); &lt;span class=&quot;comment&quot;&gt;// Error: error message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Delegating-Generators-Generator-中的-generator-optional&quot;&gt;&lt;a href=&quot;#Delegating-Generators-Generator-中的-generator-optional&quot; class=&quot;headerlink&quot; title=&quot;Delegating Generators - Generator 中的 generator (optional)&quot;&gt;&lt;/a&gt;Delegating Generators - Generator 中的 generator (optional)&lt;/h2&gt;&lt;p&gt;我其實不喜歡用 delegate 這個字來解釋，&lt;/p&gt;
&lt;p&gt;總覺得有點在賣弄的感覺 XD。&lt;/p&gt;
&lt;p&gt;簡言之就是將遍歷 generator 的控制權交（delegate=委託）給內層的 generator。&lt;/p&gt;
&lt;p&gt;Talk is cheap, show me the code:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;* foo() &lt;span class=&quot;comment&quot;&gt;// `yield *` delegates iteration control to `foo()`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; v &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; bar()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;執行到 &lt;code&gt;yield* foo()&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;就會把控制權交到 &lt;code&gt;foo()&lt;/code&gt; 所產生的 iterator 上，&lt;/p&gt;
&lt;p&gt;所以最後那個 &lt;code&gt;for...of&lt;/code&gt; 就會印出 1~5 。&lt;/p&gt;
&lt;p&gt;基本上就是這樣而已，我認為了解到這點就已足夠，&lt;/p&gt;
&lt;p&gt;在這裡敘述太多語法卻沒加上實際應用，&lt;/p&gt;
&lt;p&gt;真的只會搞混而已，&lt;/p&gt;
&lt;p&gt;所以請容我到之後應用篇時再繼續說明 delegating 的好處。&lt;/p&gt;
&lt;p&gt;如果現在就想再鑽下去，可以看下方的參考資料。&lt;/p&gt;
&lt;h1 id=&quot;如何啟用-Generator-function&quot;&gt;&lt;a href=&quot;#如何啟用-Generator-function&quot; class=&quot;headerlink&quot; title=&quot;如何啟用 Generator function&quot;&gt;&lt;/a&gt;如何啟用 Generator function&lt;/h1&gt;&lt;p&gt;假如你是使用 webpack 來做前端資源的打包，&lt;/p&gt;
&lt;p&gt;恭喜你，這是一件再簡單不過的事情；&lt;/p&gt;
&lt;p&gt;假如不是的話，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;學會使用 webpack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或是想辦法跟 Babel 搭起來&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們這裡會運用 babel 來幫我們非常簡便的在專案中啟用 generator function。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://babeljs.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當然，如果要連 webpack 一起介紹會太囉唆，&lt;/p&gt;
&lt;p&gt;以下都假設你已經會實際使用 webpack 的 babel-loader：&lt;/p&gt;
&lt;p&gt;es2015 這個 preset 已經包含了 generator function。&lt;/p&gt;
&lt;p&gt;preset 只幫我們做到 transform 的功能，&lt;/p&gt;
&lt;p&gt;真正要在實際環境中動起來還需要 polyfill 的幫忙：&lt;/p&gt;
&lt;p&gt;所以我們必須要安裝：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-preset-es2015&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save babel-polyfill&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著在 &lt;code&gt;.babelrc&lt;/code&gt; 中&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後在你要用到 generator function 的地方加上 &lt;code&gt;import &amp;#39;babel-polyfill&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實這裡不一定需要用到整包 polyfil，&lt;br&gt;只要有&lt;code&gt;regeneratorRuntime&lt;/code&gt;被定義好就行了&lt;br&gt;有興趣的人可以參考一下 facebook 的 &lt;a href=&quot;https://github.com/facebook/regenerator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;regenerator&lt;/a&gt;&lt;br&gt;babel-polyfill 裡面也是用到這個 project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;實際上的應用&quot;&gt;&lt;a href=&quot;#實際上的應用&quot; class=&quot;headerlink&quot; title=&quot;實際上的應用&quot;&gt;&lt;/a&gt;實際上的應用&lt;/h1&gt;&lt;p&gt;其實這篇文章主要是系統性的介紹 generator 到底是什麼，&lt;/p&gt;
&lt;p&gt;下篇文章會介紹我們實際在應用時，&lt;/p&gt;
&lt;p&gt;generator 能幫助我們做到什麼。&lt;/p&gt;
&lt;p&gt;如果要一言以蔽之的話，&lt;/p&gt;
&lt;p&gt;那就是：&lt;/p&gt;
&lt;p&gt;「能將非同步的程式碼，用同步的語法來呈現。」&lt;/p&gt;
&lt;p&gt;乍看之下很神奇，&lt;/p&gt;
&lt;p&gt;但在了解 generator function 不過就是個能夠暫停、繼續的 function 後，&lt;/p&gt;
&lt;p&gt;就大概能對他能做到的事有最初步的想像了。&lt;/p&gt;
&lt;h1 id=&quot;參考資料&quot;&gt;&lt;a href=&quot;#參考資料&quot; class=&quot;headerlink&quot; title=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://davidwalsh.name/es6-generators&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Basics Of ES6 Generators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://davidwalsh.name/es6-generators-dive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Diving Deeper With ES6 Generators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;function*&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;es 2015 中有一項新的 feature 叫做 &lt;strong&gt;generator function&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;假如熟稔其他語言的人，&lt;/p&gt;
&lt;p&gt;可能都知道 generator function 是什麼，&lt;/p&gt;
&lt;p&gt;不過對於一位平常都在寫原生 JavaScript 的人，這就很新鮮了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當然，generator 就算在 es 裡面也不算是什麼太新鮮的東西。&lt;br&gt;畢竟跟 JavaScript 有關的東西大概超過一個月就算舊的了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Generator function 並不是一件求新求潮的一件事情，&lt;/p&gt;
&lt;p&gt;活用 Generator function 能讓測試以及開發非同步的程式碼都變得更直觀。&lt;/p&gt;
&lt;p&gt;這篇文章就來淺淺的介紹一下 Generator function 究竟是什麼。&lt;/p&gt;
    
    </summary>
    
    
      <category term="es6" scheme="http://abalone0204.github.com/tags/es6/"/>
    
      <category term="generator" scheme="http://abalone0204.github.com/tags/generator/"/>
    
      <category term="function" scheme="http://abalone0204.github.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>Super tiny compiler</title>
    <link href="http://abalone0204.github.com/2016/04/25/Super-tiny-compiler/"/>
    <id>http://abalone0204.github.com/2016/04/25/Super-tiny-compiler/</id>
    <published>2016-04-25T23:04:37.000Z</published>
    <updated>2016-06-20T07:06:19.207Z</updated>
    
    <content type="html">&lt;p&gt;造一個超級小又可愛的 Compiler，&lt;/p&gt;
&lt;p&gt;沒有組語，只有 JavaScript。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img width=&quot;731&quot; alt=&quot;THE SUPER TINY COMPILER&quot; src=&quot;https://cloud.githubusercontent.com/assets/952783/14413766/134c4068-ff39-11e5-996e-9452973299c2.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言：被玩壞的工具鏈&quot;&gt;&lt;a href=&quot;#前言：被玩壞的工具鏈&quot; class=&quot;headerlink&quot; title=&quot;前言：被玩壞的工具鏈&quot;&gt;&lt;/a&gt;前言：被玩壞的工具鏈&lt;/h1&gt;&lt;p&gt;之前看到 react-motion 的作者說了這句話：&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;zh-tw&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Lisp: everything&amp;#39;s data&lt;br&gt;Smalltalk: everything&amp;#39;s an object&lt;br&gt;Haskell: everything&amp;#39;s computation&lt;br&gt;JavaScript: everything&amp;#39;s a library&lt;/p&gt;&amp;mdash; Cheng Lou (@_chenglou) &lt;a href=&quot;https://twitter.com/_chenglou/status/722640025092009986&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016年4月20日&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;老實說，不知道從什麼時候開始，&lt;/p&gt;
&lt;p&gt;我們前端工程師大多都變成工具的使用者，而不是設計者了，&lt;/p&gt;
&lt;p&gt;真正基礎和有價值的事物其實一直都隱藏在我們常使用的工具底下，&lt;/p&gt;
&lt;p&gt;像是我們為了使用 es6 語法的 babel 就是一個很好的例子，&lt;/p&gt;
&lt;p&gt;好好靜下心來寫一個小小的 lisp compiler，瞭解底下發生了什麼事情，&lt;/p&gt;
&lt;p&gt;以及弄懂 compiler 究竟是多麽偉大的想法，&lt;/p&gt;
&lt;p&gt;對於一個前端工程師的身心健康都頗有幫助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;至少對我來說是這樣啦！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Compiler&quot;&gt;&lt;a href=&quot;#Compiler&quot; class=&quot;headerlink&quot; title=&quot;Compiler&quot;&gt;&lt;/a&gt;Compiler&lt;/h1&gt;&lt;p&gt;提到 Compiler 總是讓人望而生卻，&lt;/p&gt;
&lt;p&gt;在 ember conf 上， James Kyle講的這個 &lt;a href=&quot;https://www.youtube.com/watch?v=Tar4WgAfMr4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;talk&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;讓我覺得該記錄一下這篇文章，&lt;/p&gt;
&lt;p&gt;好好推廣一下 Babel 底下發生了什麼事情。&lt;/p&gt;
&lt;p&gt;首先先來談談 Compiler 是在做什麼的，&lt;/p&gt;
&lt;p&gt;Compiler 的工作是將「來源代碼」轉成「目標語言」。&lt;/p&gt;
&lt;p&gt;除了我們熟知的 gcc 之外，還有 Babel，&lt;/p&gt;
&lt;p&gt;沒錯，我們的生活周遭充滿了 compiler，&lt;/p&gt;
&lt;p&gt;就算是寫 JavaScript，&lt;/p&gt;
&lt;p&gt;如果要使用 es6 以上的語法，&lt;/p&gt;
&lt;p&gt;你就必須得用到 Babel 這個 compiler。&lt;/p&gt;
&lt;p&gt;將你寫的 code(來源代碼)轉成現在瀏覽器上跑得動的 JavaScript（目標代碼）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;關於這樣子使用是否合法，已經在 twitter 問過作者，&lt;/p&gt;
&lt;p&gt;相關的 license 也放在最下方了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Prerequisite&quot;&gt;&lt;a href=&quot;#Prerequisite&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite&quot;&gt;&lt;/a&gt;Prerequisite&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;懂 JavaScript(老實說不懂也沒什麼差)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不需要懂 Lisp（沒錯，雖然我很喜歡 Lisp）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有人要一起開 SICP 的讀書會嗎？XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;懂得寫出簡單的遞回函數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regular Expression&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這裡不會使用 ES 6 的語法，&lt;/p&gt;
&lt;p&gt;主要原因只是想讓環境配置盡量單純簡單，&lt;/p&gt;
&lt;p&gt;只要有辦法使用 JavaScript 的人就可以讓這個小 compiler 跑起來。&lt;/p&gt;
&lt;p&gt;這裡要 compile 的不是 babel 或 js，&lt;/p&gt;
&lt;p&gt;而是 lisp，原因是因為語法單純簡單得多，&lt;/p&gt;
&lt;p&gt;能夠讓我們更專注在 compiler 的概念和抽象化上。&lt;/p&gt;
&lt;h1 id=&quot;三個步驟&quot;&gt;&lt;a href=&quot;#三個步驟&quot; class=&quot;headerlink&quot; title=&quot;三個步驟&quot;&gt;&lt;/a&gt;三個步驟&lt;/h1&gt;&lt;p&gt;影片中有提到，要做出一個 compiler，&lt;/p&gt;
&lt;p&gt;基本上只需要三步就完成了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parsing：將 code 轉成抽象化的樹狀格式，方便轉化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trasformation：將 Abastract syntax tree（之後會講到）轉化成好生成 code 的形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code Generation：產生目標的程式碼，這裡是 JavaScript&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;坦白說現在看起來是蠻直觀的想法，&lt;/p&gt;
&lt;p&gt;但這種事情，都碼是你想出來之後就覺得很簡單，&lt;/p&gt;
&lt;p&gt;所以做完一遍之後，反而更能感受到設計 compiler 是一件多麽偉大的事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想當年臉書紅的時候，多少人說過自己當年也想要做一個社群網站呢 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Goal&quot;&gt;&lt;a href=&quot;#Goal&quot; class=&quot;headerlink&quot; title=&quot;Goal&quot;&gt;&lt;/a&gt;Goal&lt;/h1&gt;&lt;p&gt;開始之前，先定義一下我們要完成什麼事情。&lt;/p&gt;
&lt;p&gt;我們要將：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Compile 成：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;add(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;, subtract(&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是這樣而已。&lt;del&gt;應該沒有很難吧？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;綜合一下前面講的，我們要寫的 compiler 會長這個樣子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compiler&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokens = lexer(input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ast = parser(tokens);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAst = transformer(ast);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = codeGenerator(nextAst);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;1-Parsing&quot;&gt;&lt;a href=&quot;#1-Parsing&quot; class=&quot;headerlink&quot; title=&quot;1. Parsing&quot;&gt;&lt;/a&gt;1. Parsing&lt;/h1&gt;&lt;p&gt;Parser（或稱 lexer），&lt;/p&gt;
&lt;p&gt;會將 raw code 先切成一塊一塊後，&lt;/p&gt;
&lt;p&gt;再根據這些小塊的語義來建立一個 &lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt;（以下簡稱 AST）。&lt;/p&gt;
&lt;p&gt;這裡很明顯的分成兩個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lexical Analysis&lt;/strong&gt;：就是分詞啦！把 code 切成一塊塊的 tokens。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syntatic Analysis&lt;/strong&gt;：將上一個步驟的 tokens 轉成 AST&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-a-Parsing-Lexical-Analysis&quot;&gt;&lt;a href=&quot;#1-a-Parsing-Lexical-Analysis&quot; class=&quot;headerlink&quot; title=&quot;1-a Parsing: Lexical Analysis&quot;&gt;&lt;/a&gt;1-a Parsing: Lexical Analysis&lt;/h2&gt;&lt;p&gt;Lisp 的語法相當簡單，而且我們沒有要實作所有的語法 XD&lt;/p&gt;
&lt;p&gt;目前看到的就是分成三種：Letters、Numbers，跟 Paranthesis。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;會將多餘的空白忽略，因為空白的區隔是為了讓開發者好讀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就以這三個去分，先寫出三個 regular expression 來：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; WHITE_SPACE = &lt;span class=&quot;regexp&quot;&gt;/[\s]/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; NUMBERS = &lt;span class=&quot;regexp&quot;&gt;/[0-9]/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; LETTERS = &lt;span class=&quot;regexp&quot;&gt;/[a-z]/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著要 iterate 輸入的 raw code：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; current = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokens = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(current &amp;lt; input.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Lexical analysis&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先第一個就是先略過空白&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (WHITE_SPACE.test(char)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來是括號&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (char === &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt; || char === &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tokens.push(&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;, value: char&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後兩個有點像，分別是 &lt;code&gt;NUMBERS&lt;/code&gt; 和 &lt;code&gt;LETTERS&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (NUMBERS.test(char)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(NUMBERS.test(char)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value += char&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        char = input[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tokens.push(&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: value&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (LETTERS.test(char)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(LETTERS.test(char)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value += char&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        char = input[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tokens.push(&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, value: value&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以數字為例，只要碰到了第一個數字，&lt;/p&gt;
&lt;p&gt;就會接著把剩下遇到連續的數字一起推進去。&lt;/p&gt;
&lt;p&gt;所以這一階段我們會得到一個 tokens：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;22&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;subtract&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;43&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後，如果沒有對應的 type，&lt;/p&gt;
&lt;p&gt;會丟出一個 Type Error：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;I dont know what this character is: &#39;&lt;/span&gt; + char);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完整的 &lt;code&gt;lexer&lt;/code&gt; 在&lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice/blob/master/super-tiny-compiler.js#L1:L56&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這裡&lt;/a&gt;可以看到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;為了方便寫成文章，所以做了一些改寫 XD&lt;/p&gt;
&lt;p&gt;順序也有所調動。&lt;/p&gt;
&lt;p&gt;畢竟原本是在半小時內要講完的事情，&lt;/p&gt;
&lt;p&gt;原作者 James Kyle 也樂見有更多人對 Compiler 有興趣，&lt;/p&gt;
&lt;p&gt;詳細情形見最下方 License，請不要擔心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-b-Parsing-Syntatic-Analysis&quot;&gt;&lt;a href=&quot;#1-b-Parsing-Syntatic-Analysis&quot; class=&quot;headerlink&quot; title=&quot;1-b. Parsing: Syntatic Analysis&quot;&gt;&lt;/a&gt;1-b. Parsing: Syntatic Analysis&lt;/h2&gt;&lt;p&gt;這一階段的任務就是把 tokens 轉成 &lt;strong&gt;AST&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這裡應該是最容易卡關的部分 XD，&lt;/p&gt;
&lt;p&gt;不過讓我們慢慢來，並感受一下為什麼要這樣做。&lt;/p&gt;
&lt;p&gt;這裡會運用到遞迴，減少各種迴圈，大大減低了 code 的數量，&lt;/p&gt;
&lt;p&gt;也提高了可讀性，而且看起來還很帥。&lt;/p&gt;
&lt;p&gt;有句話說得好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「嫩嫩迴圈，大大遞迴。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要能遞迴，就一定要遞迴一下。&lt;/p&gt;
&lt;p&gt;來看一下 parser 的結構是怎麼樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tokens&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; current = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;walk&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Walk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ast = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (current &amp;lt; tokens.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ast.body.push(walk());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ast;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到我們這裡還是會移動 current 來遍歷每個 token，&lt;/p&gt;
&lt;p&gt;只是改成呼叫 &lt;code&gt;walk&lt;/code&gt;函數，利用 JavaScript closure 的特性，&lt;/p&gt;
&lt;p&gt;呼叫並且更改 current。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果對 closure 和 funcitonal programming with js有興趣，&lt;/p&gt;
&lt;p&gt;可以參考一下這篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4#.ggszw4hmu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Two Pillars of JavaScript — Pt 2: Functional Programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;來看看 &lt;code&gt;walk&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;首先當然是先拿到 token：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;walk&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = tokens[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// get token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先看一下比較單純的遇到數字該怎麼辦（以下幾個 type 的確認都在 walk 裡完成）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.type === &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;NumberLiteral&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: token.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來是如果遇到 &lt;code&gt;(&lt;/code&gt; 該做什麼事，&lt;/p&gt;
&lt;p&gt;直接看一整段太長了，所以我將它拆成兩半：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.type === &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.value === &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        token = tokens[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type: &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: token.value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            params: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        token = tokens[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// To be continued with part 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;往後移一個，拿到下一個 token ，按照 lisp 的語法，&lt;/p&gt;
&lt;p&gt;這裡會是一個 expression 的名字（可以想成 function name）。&lt;/p&gt;
&lt;p&gt;建立一個 node object，params 裡面放的就是這個 expression 吃的參數。&lt;/p&gt;
&lt;p&gt;再來繼續往下看下個 token，&lt;/p&gt;
&lt;p&gt;這裡會比較困難一點點：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.type === &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.value === &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 接續前面 part 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (token.type !== &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (token.type === &lt;span class=&quot;string&quot;&gt;&#39;parenthesis&#39;&lt;/span&gt; &amp;amp;&amp;amp; token.value !== &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            node.params.push(walk());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            token = tokens[current];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如不是 &lt;code&gt;)&lt;/code&gt; 的話，就會繼續往下走，&lt;/p&gt;
&lt;p&gt;因為expression 中可能還是會有 expression：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(add (add 2 1) (subtract 1 2))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以假如遇到 &lt;code&gt;(&lt;/code&gt;，就會在執行一次 walk，&lt;/p&gt;
&lt;p&gt;前面已經知道 walk 的功用就是解析一個expression，&lt;/p&gt;
&lt;p&gt;要解析一個 expression 中的 expression 的方法，&lt;/p&gt;
&lt;p&gt;那就在 &lt;code&gt;walk&lt;/code&gt; 裡面再 call 一次 &lt;code&gt;walk&lt;/code&gt; 就好了，&lt;/p&gt;
&lt;p&gt;我想可以人體 compile 一下上面的那行 lisp，&lt;/p&gt;
&lt;p&gt;會更理解這個概念。&lt;/p&gt;
&lt;p&gt;最後在 walk 函數的最後，一樣加上 type error 的 handling&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(token.type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;實作完 &lt;code&gt;walk&lt;/code&gt; 函數以後，要建出 AST 就簡單多了&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tokens&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;walk&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// plz ref to source code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ast = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (current &amp;lt; tokens.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ast.body.push(walk());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ast;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;語法盡量寫的非常淺顯易懂，除了講解容易之外&lt;/p&gt;
&lt;p&gt;在很難設中斷點的 js 裡，寫太聰明的 code 只是在搞自己而已。&lt;/p&gt;
&lt;p&gt;這裡一樣附上完整的原碼: &lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice/blob/master/super-tiny-compiler.js#L58:L116&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parser&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-Transformation&quot;&gt;&lt;a href=&quot;#2-Transformation&quot; class=&quot;headerlink&quot; title=&quot;2. Transformation&quot;&gt;&lt;/a&gt;2. Transformation&lt;/h1&gt;&lt;p&gt;這一階段的目標是要將 AST 轉成專為生成 JavaScript 而生的 &lt;code&gt;nextAST&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;我認為稍微抽象一點的應該就是 Traverser 的部份，&lt;/p&gt;
&lt;p&gt;不過如果你有遍歷各種樹的概念，那以下應該會是非常簡單的事情。&lt;/p&gt;
&lt;p&gt;這裡要分成兩個函數來實作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Traverser：去遍歷我們前面造出來的 AST，並執行我們想要執行在每個節點上的 function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transformer：利用前面做出來的 Traverser 轉化成專為 JavaScript 而生的 &lt;code&gt;nextAst&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為了更清楚知道我們在做什麼，先看一下 transform 的結果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ----------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   Original AST                     |   Transformed AST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ----------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   &amp;#123;                                |   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     type: &#39;Program&#39;,               |     type: &#39;Program&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     body: [&amp;#123;                       |     body: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       type: &#39;CallExpression&#39;,      |       type: &#39;ExpressionStatement&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       name: &#39;add&#39;,                 |       expression: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       params: [&amp;#123;                   |         type: &#39;CallExpression&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         type: &#39;NumberLiteral&#39;,     |         callee: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         value: &#39;22&#39;                 |           type: &#39;Identifier&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       &amp;#125;, &amp;#123;                         |           name: &#39;add&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         type: &#39;CallExpression&#39;,    |         &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         name: &#39;subtract&#39;,          |         arguments: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         params: [&amp;#123;                 |           type: &#39;NumberLiteral&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *           type: &#39;NumberLiteral&#39;,   |           value: &#39;22&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *           value: &#39;43&#39;               |         &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         &amp;#125;, &amp;#123;                       |           type: &#39;CallExpression&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *           type: &#39;NumberLiteral&#39;,   |           callee: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *           value: &#39;2&#39;               |             type: &#39;Identifier&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         &amp;#125;]                         |             name: &#39;subtract&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       &amp;#125;]                           |           &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     &amp;#125;]                             |           arguments: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   &amp;#125;                                |             type: &#39;NumberLiteral&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |             value: &#39;43&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ---------------------------------- |           &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |             type: &#39;NumberLiteral&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |             value: &#39;2&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |           &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  (sorry the other one is longer.)  |         &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |     &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                                    |   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ----------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-a-Traverser&quot;&gt;&lt;a href=&quot;#2-a-Traverser&quot; class=&quot;headerlink&quot; title=&quot;2-a. Traverser&quot;&gt;&lt;/a&gt;2-a. Traverser&lt;/h2&gt;&lt;p&gt;為了要遍歷我們的 AST，&lt;/p&gt;
&lt;p&gt;我們要先寫一個 helper function 來 traverse 每一個 token 的節點。&lt;/p&gt;
&lt;p&gt;以下一樣把 traverser 分成兩部分來看，&lt;/p&gt;
&lt;p&gt;現在先只要專注在最上方的 &lt;code&gt;traverseArray&lt;/code&gt; 就行了：&lt;/p&gt;
&lt;p&gt;traverseArray會做的事情就是對每個子節點執行 traverseNode。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast, visitor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseArray&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;child&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          traverseNode(child, parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseNode&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to be continued&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverseNode(ast, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;traverser 裡面的 &lt;code&gt;visitor&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;面放著我們&lt;strong&gt;「拜訪」&lt;/strong&gt;每個節點時要執行的方法，&lt;/p&gt;
&lt;p&gt;Transform 的工作就是由 visitor 完成的，這裡先不要急，&lt;/p&gt;
&lt;p&gt;到 &lt;code&gt;transform&lt;/code&gt;這個函數時就會看到 visitor 是如何作用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我們根據子節點的 type 呼叫對應執行的 method，&lt;/p&gt;
&lt;p&gt;找到的話執行它，待會一再對子節點要執行的就是這一部份：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast, visitor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseArray&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;child&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          traverseNode(child, parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseNode&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = visitor[node.type];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method(node, parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to be continued&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverseNode(ast, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著再根據子節點的 type，去執行 &lt;code&gt;traverseArray&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;Program 的子節點是 &lt;code&gt;body&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;CallExpression 的事 &lt;code&gt;params&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;而單純的 NumberLiteral 則沒有子節點需要被遍歷。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast, visitor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseArray&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;child&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          traverseNode(child, parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverseNode&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = visitor[node.type];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method(node, parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(node.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                traverseArray(node.body, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                traverseArray(node.params, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;NumberLiteral&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(node.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverseNode(ast, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice/blob/master/super-tiny-compiler.js#L118:L148&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;traverser source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-b-Transformer&quot;&gt;&lt;a href=&quot;#2-b-Transformer&quot; class=&quot;headerlink&quot; title=&quot;2-b. Transformer&quot;&gt;&lt;/a&gt;2-b. Transformer&lt;/h2&gt;&lt;p&gt;再來則是重頭戲： &lt;code&gt;transformer&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transformer&lt;/code&gt;是個相當 powerful 的概念，&lt;/p&gt;
&lt;p&gt;&lt;del&gt;至少在麥考貝拍爛它之前都是&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;將我們一路 parse 過來的東西，轉成跟目標語言非常相近的 &lt;strong&gt;AST&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先先造出一個新的 &lt;code&gt;nextAst&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transformer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAst = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// To be continued&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來這裡是有點 tricky 的部份，&lt;/p&gt;
&lt;p&gt;我們對 ast 底下增加了一個隱藏的屬性：&lt;code&gt;_context&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;下面我們對子節點的操作也會常常用到這個非常 naive 的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實只是在名字前面加上底線，並不是真正的隱藏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再來則是前面有提的的 &lt;code&gt;visitor&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;這裡就能夠看出為什麼選擇 Lisp 了，&lt;/p&gt;
&lt;p&gt;語法非常的簡單且直觀，&lt;/p&gt;
&lt;p&gt;但 &lt;code&gt;transformer&lt;/code&gt;仍然是一個相較之下較為複雜的函數：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transformer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAst = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ast._context = nextAst.body;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; visitor = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NumberLiteral: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent._context.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                type: &lt;span class=&quot;string&quot;&gt;&#39;NumberLiteral&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value: node.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CallExpression: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// to be continued&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverser(ast, visitor)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;NumberLiteral&lt;/code&gt; 這個 method，做的事情並不難，&lt;/p&gt;
&lt;p&gt;只是 push 一個節點到父節點的 &lt;code&gt;_context&lt;/code&gt; 中而已。&lt;/p&gt;
&lt;p&gt;假如今天我們的程式什麼都沒有，只有一個單純的數字：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那 transfomer 會造出來的&lt;code&gt;nextAst&lt;/code&gt;就是這樣&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body: [&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;NumberLiteral&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;跟前面的 ast 幾乎是沒有差的。&lt;/p&gt;
&lt;p&gt;接著看如果遇到 function call 時要怎麼做，&lt;/p&gt;
&lt;p&gt;為了簡潔我省略了其他部分的 code。&lt;/p&gt;
&lt;p&gt;我們同樣先造出一個 expression 的 object，&lt;/p&gt;
&lt;p&gt;包含一個 callee 屬性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;callee 就是被呼叫的 function&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(add 2 3)&lt;/code&gt; 中，被呼叫的就是 &lt;code&gt;add&lt;/code&gt; 這個 expression&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再來同樣在這個節點建立一個 &lt;code&gt;_context&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;並將其指到我們剛剛剛創造的 &lt;code&gt;expression&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;以下是 &lt;code&gt;CallExpression&lt;/code&gt; 這個 method 的 上半部：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transformer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; visitor = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CallExpression: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                type: &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                callee: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    type: &lt;span class=&quot;string&quot;&gt;&#39;Itentifier&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    name: node.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            node._context = expression.arguments;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverser(ast, visitor)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來則是跟 JavaScript 比較相關的部份，&lt;/p&gt;
&lt;p&gt;因為 JavaScript 最上層的 Call Expression 其實是 statement，&lt;/p&gt;
&lt;p&gt;所以在確定該個 expression 的父節點 type 不是 &lt;code&gt;CallExpression&lt;/code&gt; 時，&lt;/p&gt;
&lt;p&gt;要再多加一層 &lt;code&gt;ExpressionStatement&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Statement 就是敘述句，像是 &lt;code&gt;var i = 0&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;Expression 則是會產生值的，像是&lt;code&gt;yo()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但你知道的，有些 Statement 的地方我們仍然可以產生值，&lt;/p&gt;
&lt;p&gt;因此也就有了 &lt;code&gt;Expression Statement&lt;/code&gt; 的存在。&lt;/p&gt;
&lt;p&gt;如此概括是有點草率，不過這裡還是將重點放在我們的 Compiler 上。&lt;/p&gt;
&lt;p&gt;關於 Expression 和 Statement 在下方補充資料有放上一篇我覺得既短小又很不錯的文章！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transformer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ast&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; visitor = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CallExpression: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;node, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                type: &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                callee: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    type: &lt;span class=&quot;string&quot;&gt;&#39;Itentifier&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    name: node.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            node._context = expression.arguments;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (parent.type !== &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                expression = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      type: &lt;span class=&quot;string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      expression: expression&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent._context.push(expression);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverser(ast, visitor)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;於是我們就完成了 &lt;code&gt;transformer&lt;/code&gt; 了！&lt;/p&gt;
&lt;p&gt;下一階段就是根據這個 &lt;code&gt;nextAst&lt;/code&gt; 來生成 code 了。&lt;/p&gt;
&lt;p&gt;一樣附上 &lt;code&gt;transformer&lt;/code&gt; 的 &lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice/blob/master/super-tiny-compiler.js#L150:L192&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-Code-Generator&quot;&gt;&lt;a href=&quot;#3-Code-Generator&quot; class=&quot;headerlink&quot; title=&quot;3. Code Generator&quot;&gt;&lt;/a&gt;3. Code Generator&lt;/h1&gt;&lt;p&gt;終於到最後啦！&lt;/p&gt;
&lt;p&gt;其實有了前一段專為 JavaScript 生成的 &lt;code&gt;nextAst&lt;/code&gt;之後，&lt;/p&gt;
&lt;p&gt;要生成 JavaScript 真的是毫不費力。&lt;/p&gt;
&lt;p&gt;直接來看 &lt;code&gt;codeGenerator&lt;/code&gt; 這個函數，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Program&lt;/code&gt;: 用換行來區分各個小 Program。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Expression&lt;/code&gt;:再來是在每個 Expression 後面加上 &lt;code&gt;;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CallExpression&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;callee&lt;/code&gt; 就是被呼叫的函數，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt; 則會被逗號分開來，如果 argument 是 expression 的話會繼續遞迴的呼叫 &lt;code&gt;codeGenerator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Identifier&lt;/code&gt;: expression （函數）的的名稱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NumberLiteral&lt;/code&gt;: 毫無反應，就是個數字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最後則是不包含以上 type 的 node，就會丟出 type error。&lt;del&gt;真的是非常 robust。&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;codeGenerator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(node.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Program&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node.body.map(codeGenerator)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .join(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                codeGenerator(node.expression) + &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                codeGenerator(node.callee)+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                node.arguments.map(codeGenerator).join(&lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;)+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;NumberLiteral&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(node.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice/blob/master/super-tiny-compiler.js#L194:L217&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Super-Tiny-Compiler&quot;&gt;&lt;a href=&quot;#Super-Tiny-Compiler&quot; class=&quot;headerlink&quot; title=&quot;Super Tiny Compiler&quot;&gt;&lt;/a&gt;Super Tiny Compiler&lt;/h1&gt;&lt;p&gt;將以上的 function 組合起來，&lt;/p&gt;
&lt;p&gt;就是一個 compiler 了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compiler&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokens = lexer(input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ast = parser(tokens);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAst = transformer(ast);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = codeGenerator(nextAst);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;後記&quot;&gt;&lt;a href=&quot;#後記&quot; class=&quot;headerlink&quot; title=&quot;後記&quot;&gt;&lt;/a&gt;後記&lt;/h1&gt;&lt;p&gt;很多時候我們都會覺得有好用的工具，&lt;/p&gt;
&lt;p&gt;幹麻要自己造輪子呢？&lt;/p&gt;
&lt;p&gt;但在造輪子的過程中，我們獲得的往往更多，&lt;/p&gt;
&lt;p&gt;畢竟盲目的 call api 和使用 library 並不能體現一個軟體工作者的價值，&lt;/p&gt;
&lt;p&gt;懂得何時該使用，甚至創造工具才是我們的天職所在。&lt;/p&gt;
&lt;p&gt;能掌握更多知識，就能設計出更有創意的東西，&lt;/p&gt;
&lt;p&gt;因為我們更了解所謂的「極限」在哪裡。&lt;/p&gt;
&lt;p&gt;雖然只是一個「簡單的」from lisp to js compiler，&lt;/p&gt;
&lt;p&gt;但相較於過度困難的屠龍本而言，&lt;/p&gt;
&lt;p&gt;我想這是一個能相對友善了解 compiler 的起點。&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以到我的 repo 去看：&lt;a href=&quot;https://github.com/abalone0204/super-tiny-compiler-practice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Super tiny compiler practice&lt;/a&gt;，也可以看下方原作的XD 有些微妙的不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/thejameskyle/the-super-tiny-compiler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Super tiny compiler&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4#.ggszw4hmu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Two Pillars of JavaScript — Pt 2: Functional Programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2012/09/expressions-vs-statements.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Expressions versus statements in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;License&quot;&gt;&lt;a href=&quot;#License&quot; class=&quot;headerlink&quot; title=&quot;License&quot;&gt;&lt;/a&gt;License&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;licensed through Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;造一個超級小又可愛的 Compiler，&lt;/p&gt;
&lt;p&gt;沒有組語，只有 JavaScript。&lt;/p&gt;
    
    </summary>
    
    
      <category term="compiler" scheme="http://abalone0204.github.com/tags/compiler/"/>
    
      <category term="JavaScript" scheme="http://abalone0204.github.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>搬家到 Hexo</title>
    <link href="http://abalone0204.github.com/2016/04/25/migrate-to-hexo/"/>
    <id>http://abalone0204.github.com/2016/04/25/migrate-to-hexo/</id>
    <published>2016-04-25T01:17:12.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;雖然是在同個 repository，而且也是用 github page 來 host，&lt;/p&gt;
&lt;p&gt;但這次把 travis CI 加進來以後，改部落格變得方便多了！&lt;/p&gt;
&lt;p&gt;這樣就沒有理由阻止自己偷懶不寫文章了吧 XD&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟蠻多 static page generators 一樣，&lt;/p&gt;
&lt;p&gt;可以跟 github page 做很好的搭配，&lt;/p&gt;
&lt;p&gt;只是這一次，把 travis CI 也整進來了。&lt;/p&gt;
&lt;p&gt;原因很簡單，個人的部落格，內容是&lt;strong&gt;公開的&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;而 travis CI 對於 open source 的專案則是永久免費的。&lt;/p&gt;
&lt;p&gt;實在沒有不用的理由 XD&lt;/p&gt;
&lt;p&gt;不過部署的時候，會需要有寫入 repository 的權限，&lt;/p&gt;
&lt;p&gt;我參考了以下這篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用 Travis CI 自動部署網站到 GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫的很清楚 XD&lt;/p&gt;
&lt;p&gt;我自己是另外 gen 了一個 public key 跟 private key，&lt;/p&gt;
&lt;p&gt;所以會需要注意一下命名，&lt;/p&gt;
&lt;p&gt;卡了半小時在那邊處理字打錯的白痴錯誤。&lt;/p&gt;
&lt;p&gt;基本設定這樣就足以，接下來再來把 ga 和 留言功能加進來了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;雖然是在同個 repository，而且也是用 github page 來 host，&lt;/p&gt;
&lt;p&gt;但這次把 travis CI 加進來以後，改部落格變得方便多了！&lt;/p&gt;
&lt;p&gt;這樣就沒有理由阻止自己偷懶不寫文章了吧 XD&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://abalone0204.github.com/categories/DevOps/"/>
    
    
      <category term="hexo" scheme="http://abalone0204.github.com/tags/hexo/"/>
    
      <category term="CI" scheme="http://abalone0204.github.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>做中學 Cycle.js（下）</title>
    <link href="http://abalone0204.github.com/2016/02/01/circle-js-3/"/>
    <id>http://abalone0204.github.com/2016/02/01/circle-js-3/</id>
    <published>2016-02-01T00:00:00.000Z</published>
    <updated>2016-06-20T07:06:19.207Z</updated>
    
    <content type="html">&lt;p&gt;Model-View-Intent &amp;amp; Component&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;我們會希望寫出來的 code 能夠做成被複用的 Component，&lt;/p&gt;
&lt;p&gt;不過首先要來拆解一下越來越肥大的 main function。&lt;/p&gt;
&lt;p&gt;而 main 就可以被拆成 Model、View 、Intent。&lt;/p&gt;
&lt;h1 id=&quot;Model-View-Intent&quot;&gt;&lt;a href=&quot;#Model-View-Intent&quot; class=&quot;headerlink&quot; title=&quot;Model View Intent&quot;&gt;&lt;/a&gt;Model View Intent&lt;/h1&gt;&lt;p&gt;先看一下上次 BMI example 的 main function&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeWeight$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeHeight$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = Rx.Observable.combineLatest(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeWeight$,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeHeight$, (weight, height) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightM = height/&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bmi = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(weight / (heightM * heightM));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bmi, weight, height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: state$.map(state =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Weight: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.weight&amp;#125;&lt;/span&gt;kg`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Height: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.height&amp;#125;&lt;/span&gt;cm`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1(&lt;span class=&quot;string&quot;&gt;`BMI is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.bmi&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這麼大一包看起來絕對不是好事。&lt;/p&gt;
&lt;p&gt;所以我們會把 main 分成三塊，&lt;/p&gt;
&lt;p&gt;分別是 Model, Intent, View&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Intent: to listen to the user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model: to process information &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View: to output back to the user&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Intent&quot;&gt;&lt;a href=&quot;#Intent&quot; class=&quot;headerlink&quot; title=&quot;Intent&quot;&gt;&lt;/a&gt;Intent&lt;/h2&gt;&lt;p&gt;第一塊是「Intent」，&lt;/p&gt;
&lt;p&gt;簡單說就是 User 想對 UI 做什麼事情的 Intent，&lt;/p&gt;
&lt;p&gt;在這裡當然就是指雙方互動的部分：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// input event 就是這個簡單 app 中 User 跟 UI 互動的部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeWeight$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeHeight$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;intent&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;DOMSource&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeWeight$ = DOMSource.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeHeight$ = DOMSource.select(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value).startWith(&lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;changeWeight$,changeHeight$&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Model&quot;&gt;&lt;a href=&quot;#Model&quot; class=&quot;headerlink&quot; title=&quot;Model&quot;&gt;&lt;/a&gt;Model&lt;/h2&gt;&lt;p&gt;model 則是處理資料流的部分：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;changeWeight$, changeHeight$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = Rx.Observable.combineLatest(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeWeight$,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeHeight$, (weight, height) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightM = height/&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bmi = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(weight / (heightM * heightM));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bmi, weight, height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state$;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;View&quot;&gt;&lt;a href=&quot;#View&quot; class=&quot;headerlink&quot; title=&quot;View&quot;&gt;&lt;/a&gt;View&lt;/h2&gt;&lt;p&gt;這裏則是依照 Model 中的資料去建 Virtual DOM tree&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我們不會把最後要 return 給 Driver 的東西也放在這&lt;/p&gt;
&lt;p&gt;僅放跟 UI 生成相關的而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;view&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = state$.map(state =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Weight: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.weight&amp;#125;&lt;/span&gt;kg`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Height: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.height&amp;#125;&lt;/span&gt;cm`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1(&lt;span class=&quot;string&quot;&gt;`BMI is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.bmi&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vtree$;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;MVI&quot;&gt;&lt;a href=&quot;#MVI&quot; class=&quot;headerlink&quot; title=&quot;MVI&quot;&gt;&lt;/a&gt;MVI&lt;/h2&gt;&lt;p&gt;然後我們的 main 變得簡潔許多，&lt;/p&gt;
&lt;p&gt;看起來只是 function 組合起來而已:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;changeWeight$,changeHeight$&amp;#125; = intent(sources.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = model(changeWeight$, changeHeight$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = view(state$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: vtree$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Component&quot;&gt;&lt;a href=&quot;#Component&quot; class=&quot;headerlink&quot; title=&quot;Component&quot;&gt;&lt;/a&gt;Component&lt;/h2&gt;&lt;p&gt;那我們該如何減少重複的 Code 呢？&lt;/p&gt;
&lt;p&gt;當 UI 的操作越變越複雜以後，&lt;/p&gt;
&lt;p&gt;我們不會希望所有事情都能在一個 main 裡面解決，&lt;/p&gt;
&lt;p&gt;這時候我們可以把重複的部分抽出來變成 component。&lt;/p&gt;
&lt;p&gt;egghead 課程裡面有更精簡的怎麼把 main 提煉成 component 的過程，&lt;/p&gt;
&lt;p&gt;不過核心精神蠻簡單的，就是 &lt;strong&gt;props 也是 stream。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因為 props 是會跟著傳下來的「資料」，&lt;/p&gt;
&lt;p&gt;所以很自然的我們就會選擇處理資料的 model 下手。&lt;/p&gt;
&lt;p&gt;而 model 收到的 sources 是從 Drivers 來的，&lt;/p&gt;
&lt;p&gt;第一步就是先更動 drivers&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: makeDOMDriver(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    props: () =&amp;gt; Rx.Observable.of(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label: &lt;span class=&quot;string&quot;&gt;&#39;Height&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unit: &lt;span class=&quot;string&quot;&gt;&#39;cm&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        min: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        max: &lt;span class=&quot;number&quot;&gt;220&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init: &lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來就是把 props 傳進去：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = model(upcomingValue$, sources.props);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;記住： props 也是 Observable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;upcomingValue$, props$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initValue$ = props$.map(props =&amp;gt; props.init).first();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; value$ = initValue$.concat(upcomingValue$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = Rx.Observable.combineLatest(value$, props$, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (value, props) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                label: props.label,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                unit: props.unit,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                min: props.min,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                max: props.max,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value: value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;initial value 的 stream concat 新進來 value 的 stream，&lt;/p&gt;
&lt;p&gt;取代原本的 &lt;code&gt;startWith&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下一步就是把 label 的名字和單位給 return 出來，&lt;/p&gt;
&lt;p&gt;變成一條 UI component 可以吃到的 state stream，&lt;/p&gt;
&lt;p&gt;再把對應的值塞進 view 裡面，就能得到我們想要的 vtree$ 了。&lt;/p&gt;
&lt;h2 id=&quot;Using-component-with-Main-function&quot;&gt;&lt;a href=&quot;#Using-component-with-Main-function&quot; class=&quot;headerlink&quot; title=&quot;Using component with Main function&quot;&gt;&lt;/a&gt;Using component with Main function&lt;/h2&gt;&lt;p&gt;我們現在每個 component 中都會有個 main function，&lt;/p&gt;
&lt;p&gt;事實上我們能把 main 改成這個 component 的名字，&lt;/p&gt;
&lt;p&gt;並且在更上層的 main 中去使用它，&lt;/p&gt;
&lt;p&gt;因為事實上他就是一個 function，在 functional programming 中，&lt;/p&gt;
&lt;p&gt;“composable” 可以說是最重要的概念之一。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelSlider&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; upcomingValue$ = intent(sources.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = model(upcomingValue$, sources.props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = view(state$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: vtree$,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; LabelSlider(sources)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而事實上，我們可以把 props 這件事移到 main 中去做&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; props$ = Rx.Observable.of(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label: &lt;span class=&quot;string&quot;&gt;&#39;Height&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unit: &lt;span class=&quot;string&quot;&gt;&#39;cm&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        min: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        max: &lt;span class=&quot;number&quot;&gt;220&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init: &lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; LabelSlider(&amp;#123;DOM: sources.DOM, props: props$&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: makeDOMDriver(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Multiple-Components&quot;&gt;&lt;a href=&quot;#Multiple-Components&quot; class=&quot;headerlink&quot; title=&quot;Multiple Components&quot;&gt;&lt;/a&gt;Multiple Components&lt;/h2&gt;&lt;p&gt;如果只有ㄧ個 component 的話，那 cycle.js 也太慘，&lt;/p&gt;
&lt;p&gt;我們當然是可以組合多個 components，&lt;/p&gt;
&lt;p&gt;只是該怎麼做呢？&lt;/p&gt;
&lt;p&gt;很簡單，先把 sinks 個別抽出來：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; weightProps$ = Rx.Observable.of(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label: &lt;span class=&quot;string&quot;&gt;&#39;Weight&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unit: &lt;span class=&quot;string&quot;&gt;&#39;kg&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        min: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        max: &lt;span class=&quot;number&quot;&gt;220&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init: &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; weightSinks$ = LabelSlider(&amp;#123;DOM: sources.DOM, props: weightProps$&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightProps$ = Rx.Observable.of(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label: &lt;span class=&quot;string&quot;&gt;&#39;Height&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unit: &lt;span class=&quot;string&quot;&gt;&#39;cm&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        min: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        max: &lt;span class=&quot;number&quot;&gt;220&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init: &lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightSinks$ = LabelSlider(&amp;#123;DOM: sources.DOM, props: heightProps$&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = Rx.Observable.combineLatest(weightSinks$.DOM, heightSinks$.DOM, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (weightVtree, heightVtree) =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weightVtree,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heightVtree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: vtree$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏會發現一個問題，就是當我們移動其中一個 slider 時，&lt;/p&gt;
&lt;p&gt;另一個也會被影響 ，使用者的互動 =&amp;gt; intent&lt;/p&gt;
&lt;p&gt;因為兩個的 class 都是 slider，&lt;/p&gt;
&lt;p&gt;而 intent 中監聽的又是 “.slider” 底下的 input。&lt;/p&gt;
&lt;p&gt;其實我們在 LabelSlider 裡就可以讓兩條 stream 分流，&lt;/p&gt;
&lt;p&gt;因為我們傳進去的 &lt;code&gt;sources.DOM&lt;/code&gt;，是可以只要選取 weight 或 height 就好：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; weightSinks$ = LabelSlider(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        props: weightProps$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏做的事情就等於在 intent 裡面這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;intent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;DOMSource&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; change$ = DOMSource.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;).select(&lt;span class=&quot;string&quot;&gt;&#39;.slider&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; change$;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們 &lt;strong&gt;pre-select&lt;/strong&gt; 了在 DOM 上面 class name 為 ‘.weight’的 stream。&lt;/p&gt;
&lt;h1 id=&quot;Isolate-component&quot;&gt;&lt;a href=&quot;#Isolate-component&quot; class=&quot;headerlink&quot; title=&quot;Isolate component&quot;&gt;&lt;/a&gt;Isolate component&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cyclejs/isolate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Isolate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要隔離開每個 Component 如果都像上面那樣做應該會瘋掉，&lt;br&gt;所以 Cyclejs 其實提供給我們一個 helper function： isolate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用方法是傳入一個 Component function 當作 argument&lt;br&gt;再來會回傳一個 scoped 的 component function，&lt;br&gt;同樣吃 sources 進去，吐 sinks 出來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isolate(dataflowComponent, scope)&lt;/code&gt;：第二個參數是 optional 的，如同看到的一樣&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可能會有人覺得沒什麼差別，但如果單純使用 &lt;code&gt;isolate(dataflowComponent)&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;那會是一個不純的 function ，因為每次呼叫都會 return 一個不一樣的 scoped component function&lt;/p&gt;
&lt;p&gt;但如果我們指定了 scope，那每次回來的就是同一個 scope 下的 component function&lt;/p&gt;
&lt;p&gt;真正的濃醇香！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; WeightSlider = isolate(LabelSlider, &lt;span class=&quot;string&quot;&gt;&#39;weight&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; weightSinks$ = WeightSlider(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: sources.DOM,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    props: weightProps$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; weightVtree$ = weightSinks$.DOM;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此一來又減少了一些 boiler plate&lt;/p&gt;
&lt;h2 id=&quot;Final-BMI&quot;&gt;&lt;a href=&quot;#Final-BMI&quot; class=&quot;headerlink&quot; title=&quot;Final BMI&quot;&gt;&lt;/a&gt;Final BMI&lt;/h2&gt;&lt;p&gt;目前缺的就是把 bmi 給算出來了，&lt;/p&gt;
&lt;p&gt;首先我們知道這個運算會放在 main 裡面，&lt;/p&gt;
&lt;p&gt;因為這就是這個簡單小 App 的主要&lt;strong&gt;邏輯&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bmi$ = Rx.Observable.combineLatest(weightValue$, heightValue$, (weight, height) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightMeters = height * &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bmi = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(weight/(heightMeters*heightMeters))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bmi;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在問題來了：我們要怎樣得到 weightValue$ 以及 heightValue$ 呢？&lt;/p&gt;
&lt;p&gt;從 sources 拿啊！&lt;/p&gt;
&lt;p&gt;概念很簡單，我們從 main 中拿到的 source，&lt;/p&gt;
&lt;p&gt;其實就是從前一層 component 中吐出來的 sinks，&lt;/p&gt;
&lt;p&gt;所以我們自然從前一層 component 中回傳的 sinks 下手：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelSlider&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; upcomingValue$ = intent(sources.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = model(upcomingValue$, sources.props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = view(state$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: vtree$,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: state$.map(state=&amp;gt; state.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;實作起來也是這麼簡單。&lt;/p&gt;
&lt;p&gt;最後我們回到 main 中，&lt;/p&gt;
&lt;p&gt;把 bmi$ 也加進去就成啦！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vtree$ = Rx.Observable.combineLatest(bmi$, weightVtree$, heightVtree$, (bmi, weightVtree, heightVtree) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weightVtree,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heightVtree,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            h1(&lt;span class=&quot;string&quot;&gt;`BMI is: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;bmi&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: vtree$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;總計 21 回的課程算不上太長，很推薦有興趣的人去把它看完，&lt;/p&gt;
&lt;p&gt;儘管實際上要弄懂 Cycle.js 的概念的確需要花點時間，&lt;/p&gt;
&lt;p&gt;但學習 FRP 是值得的，畢竟我們就是在處理 dataflow + UI，&lt;/p&gt;
&lt;p&gt;再加上 pure function 好測試、composable 的特性，&lt;/p&gt;
&lt;p&gt;不由得感慨 Rx 寫起來真是爽。&lt;/p&gt;
&lt;p&gt;相較於 React，Cycle.js 當然更接近 functinoal programming，&lt;/p&gt;
&lt;p&gt;不論這個東西將來會不會用到產品上，&lt;/p&gt;
&lt;p&gt;純函數式的東西總會莫名的吸引我。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要追求 fp，更應該要感受一下 &lt;a href=&quot;http://elm-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這一堂課的影片幾乎都在 jsfiddle 上完成，&lt;/p&gt;
&lt;p&gt;（不曉得作者為啥要這樣XD）&lt;/p&gt;
&lt;p&gt;我中間練習的程式碼有放在 &lt;a href=&quot;https://github.com/abalone0204/Learning-Cycle.js-By-Building-it&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 上面，&lt;/p&gt;
&lt;p&gt;筆記等年假再來好好整理一番。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;參考資料&quot;&gt;&lt;a href=&quot;#參考資料&quot; class=&quot;headerlink&quot; title=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://cycle.js.org/model-view-intent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Official doc: Model View Intent&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.codemag.com/Article/1601071&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Functional Reactive Programming (FRP) is Changing the Face of Web Development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Model-View-Intent &amp;amp; Component&lt;/p&gt;
    
    </summary>
    
    
      <category term="cycle.js" scheme="http://abalone0204.github.com/tags/cycle-js/"/>
    
      <category term="observable" scheme="http://abalone0204.github.com/tags/observable/"/>
    
  </entry>
  
  <entry>
    <title>做中學 Cycle.js（中）</title>
    <link href="http://abalone0204.github.com/2016/01/24/circle-js-2/"/>
    <id>http://abalone0204.github.com/2016/01/24/circle-js-2/</id>
    <published>2016-01-24T00:00:00.000Z</published>
    <updated>2016-06-20T07:06:19.207Z</updated>
    
    <content type="html">&lt;p&gt;Drivers 和一些簡單的例子&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;還沒看過上一篇的可以先去看上一篇了解 Cycle.js，&lt;/p&gt;
&lt;p&gt;這一篇會從 driver 開始講。&lt;/p&gt;
&lt;p&gt;drivers 是在控制畫面的 render，&lt;/p&gt;
&lt;p&gt;但是我們目前的 driver 都是只能回傳字串，&lt;/p&gt;
&lt;p&gt;這一章節我們要真的來認真的操作 DOM，&lt;/p&gt;
&lt;p&gt;並且實作幾個小例子來看看 Cycle.js 這個框架是怎樣改變我們思考資料流的方式。&lt;/p&gt;
&lt;h2 id=&quot;Making-DOM-driver-more-flexible&quot;&gt;&lt;a href=&quot;#Making-DOM-driver-more-flexible&quot; class=&quot;headerlink&quot; title=&quot;Making DOM driver more flexible&quot;&gt;&lt;/a&gt;Making DOM driver more flexible&lt;/h2&gt;&lt;p&gt;這裏要來認真處理一下如何去從 object 去表示一個 DOM，&lt;/p&gt;
&lt;p&gt;假如你之前實作過一個 Virtual DOM 的話，&lt;/p&gt;
&lt;p&gt;我想會相當有幫助。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(obj.tagName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj.children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .filter(c =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; c === &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .map(createElement)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .forEach(c =&amp;gt; element.appendChild(c));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .filter(c =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; c === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .forEach(c =&amp;gt; element.innerHTML += c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; element;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前還只是沒加上 props 的簡化版。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DOMDriver&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj$.subscribe(obj =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = createElement(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Refresh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.appendChild(element);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DOMSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏使用了 appendChild，所以如果不每次都清空的話，&lt;/p&gt;
&lt;p&gt;等於每次都會 append 東西上來。&lt;/p&gt;
&lt;h2 id=&quot;在-DOM-source-掌控更多事情&quot;&gt;&lt;a href=&quot;#在-DOM-source-掌控更多事情&quot; class=&quot;headerlink&quot; title=&quot;在 DOM source 掌控更多事情&quot;&gt;&lt;/a&gt;在 DOM source 掌控更多事情&lt;/h2&gt;&lt;p&gt;回頭看一下我們的 Main，&lt;/p&gt;
&lt;p&gt;發現我們唯一能從 DOM 拿到的 event stream，&lt;/p&gt;
&lt;p&gt;居然只有 click$，這並不符合我們日常的開發情境，&lt;/p&gt;
&lt;p&gt;現在就來解決這個問題。&lt;/p&gt;
&lt;p&gt;解法很簡單，就是在 return DOMSource 的時候，&lt;/p&gt;
&lt;p&gt;給個能夠選取 tag 和 event type 的 interface。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    selectEvents: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tagName, eventType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, eventType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .filter(e =&amp;gt; e.target.tagName === tagName.toUpperCase());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏當然還是不夠 general 的版本，&lt;/p&gt;
&lt;p&gt;不過這樣我們在 main function 裡面就能夠簡單的選取另一個 event 了。&lt;/p&gt;
&lt;h2 id=&quot;h&quot;&gt;&lt;a href=&quot;#h&quot; class=&quot;headerlink&quot; title=&quot;h()&quot;&gt;&lt;/a&gt;h()&lt;/h2&gt;&lt;p&gt;一開始我也很疑惑 h 是啥？&lt;/p&gt;
&lt;p&gt;答案很簡單， “h” stands for html&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function h(tagName, children) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tagName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function h1(children) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return h(&amp;apos;H1&amp;apos;, children);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;讓我們在 main 中要建造 elements 時省去不少力氣。&lt;/p&gt;
&lt;p&gt;而 h1、h2、span⋯⋯等等你想得到的 tag，&lt;/p&gt;
&lt;p&gt;都能藉由 function 來表示，&lt;/p&gt;
&lt;p&gt;並且語法看起來也很簡單，&lt;/p&gt;
&lt;p&gt;連我到後來都不禁思考：「&lt;strong&gt;我們真的需要 jsx 嗎&lt;/strong&gt;？」&lt;/p&gt;
&lt;p&gt;目前只是比較簡單的語法，還沒考慮到 properties，&lt;/p&gt;
&lt;p&gt;在 main 中的長相大概會像這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .map(i =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    span([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;`Seconds elapsed &lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Way-to-Real-Driver&quot;&gt;&lt;a href=&quot;#Way-to-Real-Driver&quot; class=&quot;headerlink&quot; title=&quot;Way to Real Driver&quot;&gt;&lt;/a&gt;Way to Real Driver&lt;/h2&gt;&lt;p&gt;處理完語法後，我們來看看怎樣寫出一個更 serious 一點的 driver。&lt;/p&gt;
&lt;p&gt;第一個發現的問題就是我們又把整個 Component 要 mount 的地方寫死了，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DOMDriver(obj$) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj$.subscribe(obj =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// hard code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = createElement(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            container.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            container.appendChild(element);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            selectEvents: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tagName, eventType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, eventType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .filter(e =&amp;gt; e.target.tagName === tagName.toUpperCase());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DOMSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這樣的寫法讓我們必須要在 DOM 上一定要有 id 為 app 的 element，&lt;/p&gt;
&lt;p&gt;才能夠啟用 DOMDriver。&lt;/p&gt;
&lt;p&gt;DOMDriver 是一個 function，&lt;/p&gt;
&lt;p&gt;所以我們只要能回傳一個「客製化」的 function，&lt;/p&gt;
&lt;p&gt;這件事情不就解決了嗎？&lt;/p&gt;
&lt;p&gt;這裏運用到了 JavaScript 中「閉包(Closure)」的概念，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeDOMDriver&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mountSelector&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (obj$) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj$.subscribe(obj =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(mountSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = createElement(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            container.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            container.appendChild(element);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            selectEvents: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tagName, eventType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, eventType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .filter(e =&amp;gt; e.target.tagName === tagName.toUpperCase());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DOMSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: makeDOMDriver(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log: consoleLogDriver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下一個問題則是：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;container.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如要 bind 到 DOM 上面是一個很大的 object，&lt;/p&gt;
&lt;p&gt;那我們會遭遇到效能的問題。&lt;/p&gt;
&lt;p&gt;再來則是 &lt;code&gt;selectEvents&lt;/code&gt; 這個 function：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;selectEvents: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tagName, eventType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它只能指定 tagName，&lt;/p&gt;
&lt;p&gt;不能用更方便的 selector 來選取想要的 element，&lt;/p&gt;
&lt;p&gt;我們應該要提供一個更聰明一點的 API 來做這件事情。&lt;/p&gt;
&lt;p&gt;關於這兩個問題點該怎麼重構，&lt;/p&gt;
&lt;p&gt;作者並沒有詳細說明，但我們可以直接去看 source code，&lt;/p&gt;
&lt;p&gt;這也是我們要將 CycleDOM import 進來的時候。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小記一下，&lt;/p&gt;
&lt;p&gt;假如我們繼續用舊有版本的 run，&lt;/p&gt;
&lt;p&gt;那 &lt;code&gt;selectEvents&lt;/code&gt; 會沒有被綁進去 source 裡面。&lt;/p&gt;
&lt;p&gt;蠻好玩的，可以想一想要怎麼解這一個問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下來的正式引進 cycle-dom 中的 makeDOMDriver，&lt;/p&gt;
&lt;p&gt;而原本的程式碼也要跟著做變動。&lt;/p&gt;
&lt;p&gt;沒有意外的，首先需要更動的就是 selectEvents &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseover$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;span&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;mouseover&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這底下有一個 virtual dom來 handle 重繪，&lt;/p&gt;
&lt;p&gt;不會像我們先前一樣，每次一有更動，&lt;/p&gt;
&lt;p&gt;就重新 flush 整個畫面。&lt;/p&gt;
&lt;p&gt;而 h1, h 也變得更加強大，可以試試看在第一個參數傳入物件，&lt;/p&gt;
&lt;p&gt;可以自訂 attributes，以及調整 style。&lt;/p&gt;
&lt;h2 id=&quot;Hello-Wolrd&quot;&gt;&lt;a href=&quot;#Hello-Wolrd&quot; class=&quot;headerlink&quot; title=&quot;Hello Wolrd&quot;&gt;&lt;/a&gt;Hello Wolrd&lt;/h2&gt;&lt;p&gt;啊！終於要開始 Hello world 了，&lt;/p&gt;
&lt;p&gt;跟以往不一樣的是我們已經跑了一次的底下大概會發生什麼事情，&lt;/p&gt;
&lt;p&gt;才跟世界說 hello。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// return a sinks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: Rx.Observable.of(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                label(&lt;span class=&quot;string&quot;&gt;&#39;Name:&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                input(&lt;span class=&quot;string&quot;&gt;&#39;.field&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    type: &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hr(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1(&lt;span class=&quot;string&quot;&gt;&#39;Hello !&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在我們用剛剛學到的 select跟 events 來處理一下 input 的 events。&lt;/p&gt;
&lt;p&gt;注意到我們在 input function 那裏的第一個參數寫下 &lt;code&gt;.filed&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;會自動變成帶有 field class 的 input 。&lt;/p&gt;
&lt;p&gt;（準確一點來說應該是 return 一個 virtual dom 的 element）&lt;/p&gt;
&lt;p&gt;長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;tagName: &lt;span class=&quot;string&quot;&gt;&quot;INPUT&quot;&lt;/span&gt;, properties: &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;, children: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], key: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;, namespace: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;…&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來則是把 input event 以及 值給拿出來：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inputEv$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.field&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name$ = inputEv$.map(ev =&amp;gt; ev.target.value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來要做的事情很直觀，&lt;/p&gt;
&lt;p&gt;就是把 name$ 裏的值給 map 到 DOM 上面去……嗎？&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name$.map(name =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            label(&lt;span class=&quot;string&quot;&gt;&#39;Name:&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            input(&lt;span class=&quot;string&quot;&gt;&#39;.field&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                type: &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hr(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            h1(&lt;span class=&quot;string&quot;&gt;&#39;Hello !&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;實際上這樣的作法會讓畫面上什麼都沒有，&lt;/p&gt;
&lt;p&gt;因為 name$ 是 inputEv$ map 過後的結果，&lt;/p&gt;
&lt;p&gt;而一開始 inputEv$ 是空的，自然沒有任何東西會 return 啦！&lt;/p&gt;
&lt;p&gt;但要解決這個問題也很簡單，只需要&lt;code&gt;startWith&lt;/code&gt;這個好用的 operator 即可。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inputEv$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;.field&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name$ = inputEv$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .startWith(&lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// return a sinks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: name$.map(name =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                label(&lt;span class=&quot;string&quot;&gt;&#39;Name:&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                input(&lt;span class=&quot;string&quot;&gt;&#39;.field&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    type: &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hr(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;!`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hello world 完成啦！&lt;/p&gt;
&lt;h2 id=&quot;Counter&quot;&gt;&lt;a href=&quot;#Counter&quot; class=&quot;headerlink&quot; title=&quot;Counter&quot;&gt;&lt;/a&gt;Counter&lt;/h2&gt;&lt;p&gt;在開始之前得提醒一下，&lt;/p&gt;
&lt;p&gt;跟 Redux 在開發之前得先想好 StateTree 的道理有點像，&lt;/p&gt;
&lt;p&gt;在 Cycle 中，我們會體會到要怎樣設計一個 Stream 的流向，&lt;/p&gt;
&lt;p&gt;而 UI 只要跟著這個 Flow 去變化就行了&lt;/p&gt;
&lt;p&gt;（狀態顯示為 Reactive 狂粉）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;來個經典的 Counter example 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;廢話不多說，&lt;/p&gt;
&lt;p&gt;就先把頁面和 increment 以及 decrement 的 click stream 弄出來：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; decrementClick$ = sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;#decrement&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; incrementClick$=sources.DOM.select(&lt;span class=&quot;string&quot;&gt;&#39;#increment&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: Rx.Observable.of(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                button(&lt;span class=&quot;string&quot;&gt;&#39;#decrement&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Decrement&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                button(&lt;span class=&quot;string&quot;&gt;&#39;#increment&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Increment&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;拿到 Stream 之後呢？&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; decrementAction$ = decrementClick$.map(ev =&amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; incrementAction$ = incrementClick$.map(ev =&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; number$ = Rx.Observable.of(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .merge(decrementAction$)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .merge(incrementAction$);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏並沒有得到我們想要的東西，&lt;/p&gt;
&lt;p&gt;來看一下 merge stream 是怎樣運作的，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0---------------- number$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--(-1)-(-1)------ decrementAction$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------1---incrementAction$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [merge]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0-(-1)-(-1)--1---[merged$]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們必須有個東西把 Stream 上所有的值給加總，&lt;/p&gt;
&lt;p&gt;想到 array 的 reduce 了嗎？&lt;/p&gt;
&lt;p&gt;其實 Rx 有提供一個 Operator 給我們做類似的操作：&lt;/p&gt;
&lt;p&gt;它叫做 &lt;code&gt;scan&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; number$ = Rx.Observable.of(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .merge(decrementAction$)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .merge(incrementAction$)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .scan((prev, cur) =&amp;gt; prev+cur);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cycle 強迫我們在一開始就想好資料的流向，&lt;/p&gt;
&lt;p&gt;以及事件的處理，如此我們在開發的時候能夠更深思熟慮一點，&lt;/p&gt;
&lt;p&gt;不會讓整個 Project 變得很 crazy。&lt;/p&gt;
&lt;p&gt;在簡單的 Counter 下這好處還不明顯，我目前也沒用 Cycle 寫過大型的產品，&lt;/p&gt;
&lt;p&gt;所以且讓我們繼續看下去。&lt;/p&gt;
&lt;h2 id=&quot;Cycle-Http-Driver&quot;&gt;&lt;a href=&quot;#Cycle-Http-Driver&quot; class=&quot;headerlink&quot; title=&quot;Cycle Http Driver&quot;&gt;&lt;/a&gt;Cycle Http Driver&lt;/h2&gt;&lt;p&gt;開發 web，我們當然會需要送 http request，&lt;/p&gt;
&lt;p&gt;所以我們就需要 http driver。&lt;/p&gt;
&lt;p&gt;這裏我們要從 github 的 api 來拿 users 資料。&lt;/p&gt;
&lt;p&gt;一樣先把基本的頁面弄出來&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: Rx.Observable.of(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                button(&lt;span class=&quot;string&quot;&gt;&#39;.get_first&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;Get first user&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div(&lt;span class=&quot;string&quot;&gt;&#39;.user_details&#39;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    h1(&lt;span class=&quot;string&quot;&gt;&#39;.user_name&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(name)&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    h4(&lt;span class=&quot;string&quot;&gt;&#39;.email&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(email)&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    a(&lt;span class=&quot;string&quot;&gt;&#39;.web&#39;&lt;/span&gt;, &amp;#123;href: &lt;span class=&quot;string&quot;&gt;&#39;google.com&#39;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&#39;(url)&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們想讓使用者點下 get_first 的按鈕後，&lt;/p&gt;
&lt;p&gt;就拿到 user 的資料。&lt;/p&gt;
&lt;p&gt;前面有提到什麼是 read effect 跟 write effect，&lt;/p&gt;
&lt;p&gt;effect 會因應 logics 規則的變化，真正影響到外在世界。&lt;/p&gt;
&lt;p&gt;實際講起來太抽象了，我們現在把這個 App 中會發生的 effect 以及分類列出來，&lt;/p&gt;
&lt;p&gt;會清楚很多：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DOM Read effect : button clicked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP Write effect: send request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP Read effect: receive response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOM Write effect: user&amp;apos;s data displayed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// DOM Read effect : button clicked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; clickEv$ = sources.DOM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .select(&lt;span class=&quot;string&quot;&gt;&#39;.get_user&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// HTTP Write effect: send request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; request$ = clickEv$.map(_ =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url: API_URL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method: &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// HTTP Read effect: receive response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response$$ = sources.HTTP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .filter(response$ =&amp;gt; response$.request.url === API_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response$ = response$$.&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; firstUser$ = response$.map(res =&amp;gt; res.body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .startWith(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// DOM Write effect: user&#39;s data displayed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: firstUser$.map(user =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                button(&lt;span class=&quot;string&quot;&gt;&#39;.get_user&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;Get user&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div(&lt;span class=&quot;string&quot;&gt;&#39;.user_details&#39;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    h1(&lt;span class=&quot;string&quot;&gt;&#39;.user_name&#39;&lt;/span&gt;, user.name),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    h4(&lt;span class=&quot;string&quot;&gt;&#39;.email&#39;&lt;/span&gt;, user.email),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    a(&lt;span class=&quot;string&quot;&gt;&#39;.web&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        href: user.url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;, user.url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HTTP: request$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;BMI&quot;&gt;&lt;a href=&quot;#BMI&quot; class=&quot;headerlink&quot; title=&quot;BMI&quot;&gt;&lt;/a&gt;BMI&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sources&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeWeight$ = sources.select(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; changeHeight$ = sources.select(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;).events(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map(ev =&amp;gt; ev.target.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Need to combine two $,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Like we use `zip` to arrays.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state$ = Rx.Observable.combineLatest(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeWeight$,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        changeHeight$, (weight, height) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; heightM = height/&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bmi = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(weight / (heightM * heightM));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bmi, weight, height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: state$.map(state =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Weight: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.weight&amp;#125;&lt;/span&gt;kg`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.weight&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                div([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    label(&lt;span class=&quot;string&quot;&gt;`Height: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.height&amp;#125;&lt;/span&gt;cm`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    input(&lt;span class=&quot;string&quot;&gt;&#39;.height&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        type: &lt;span class=&quot;string&quot;&gt;&#39;range&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        min: &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        max: &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        value: state.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h1(&lt;span class=&quot;string&quot;&gt;`BMI is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;state.bmi&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在處理 Stream 時，往 Collection 的方向想會舒服很多，&lt;/p&gt;
&lt;p&gt;因為我們處理 Array 也是如此，&lt;/p&gt;
&lt;p&gt;最後一篇我們將會來看看 Cycle.js 怎樣提高我們程式碼的複用性，&lt;/p&gt;
&lt;p&gt;學習用另一種方式去思考該怎樣拆解每個 Component。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;參考資料&quot;&gt;&lt;a href=&quot;#參考資料&quot; class=&quot;headerlink&quot; title=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openhome.cc/Gossip/JavaScript/Closure.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;閉包&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.arfskyb6g&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Master the JavaScript Interview: What is a Closure?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Drivers 和一些簡單的例子&lt;/p&gt;
    
    </summary>
    
    
      <category term="cycle.js" scheme="http://abalone0204.github.com/tags/cycle-js/"/>
    
      <category term="observable" scheme="http://abalone0204.github.com/tags/observable/"/>
    
  </entry>
  
  <entry>
    <title>做中學 Cycle.js（上）</title>
    <link href="http://abalone0204.github.com/2016/01/23/cycle-js-1/"/>
    <id>http://abalone0204.github.com/2016/01/23/cycle-js-1/</id>
    <published>2016-01-23T00:00:00.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，&lt;/p&gt;
&lt;p&gt;其實軟體開發裡面沒有銀彈，&lt;/p&gt;
&lt;p&gt;不過這種爭辯也更能夠激發出我們寫出更棒的軟體，&lt;/p&gt;
&lt;p&gt;並且去反思現行流行的東西真的是「好」的嗎？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Cycle.js 的作者也寫下一篇他認為為什麼 Redux + React 不那麼好的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://staltz.com/why-react-redux-is-an-inferior-paradigm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WHY REACT/REDUX IS AN INFERIOR PARADIGM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同時間在 egghead.io 上也 release 了一個 Cycle.js 的課程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lessons of Cycle.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(等等，這時機推出課程，真的不是在打廣告嗎？)&lt;/p&gt;
&lt;p&gt;我認為這個課程還蠻推薦的原因有底下兩點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;作者會告訴我們 Cycle.js 這樣設計的理念&lt;/strong&gt;&lt;br&gt;對我來說在學習一個框架時，&lt;br&gt;如果你不能理解為什麼要這樣設計，&lt;br&gt;那你就是用硬背的，這樣很容易忘記；&lt;br&gt;但如果你知道為什麼要命名成這樣、為什麼要這樣設計，&lt;br&gt;你等於進入了框架本身去使用它，&lt;br&gt;而不是被它框住。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Observable 給我們不一樣的方式來思考如何 Handle events&lt;/strong&gt;&lt;br&gt;可以看看 Netflix 的&lt;a href=&quot;https://www.youtube.com/watch?v=XRYN2xt11Ek&amp;amp;hd=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;週末在家拉肚子之餘，順便把課程課完並做了一些筆記。&lt;/p&gt;
&lt;p&gt;先來看一下 Cycle.js 的 Get started code，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Cycle &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@cycle/core&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; CycleDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@cycle/dom&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DOM: CycleDOM.makeDOMDriver(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cycle.run(main, drivers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在看起來很不習慣，但這篇會從無到有的建一個簡單版的 Cycle.js 出來，&lt;/p&gt;
&lt;p&gt;第一篇預計會實作很 primitve 的 drivers 以及 main，&lt;/p&gt;
&lt;p&gt;接著會把 run 給重構到幾乎跟現在 Cycle 核心中的寫法一樣。&lt;/p&gt;
&lt;p&gt;（當然還是只重概念說明的簡化版）&lt;/p&gt;
&lt;p&gt;不過這都只是個人的學習筆記，&lt;/p&gt;
&lt;p&gt;還是在大大推一下 egghead.io 上的課程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lessons of Cycle.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prerequisite&quot;&gt;&lt;a href=&quot;#Prerequisite&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite&quot;&gt;&lt;/a&gt;Prerequisite&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;了解如何操作 collection&lt;br&gt;沒錯，Observable 和 array（或list）都是 collection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以試試這個互動的課程，再來看這系列會更有感覺：&lt;br&gt;&lt;a href=&quot;http://reactivex.io/learnrx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/learnrx/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;對於 Rx 已經有基礎的認識&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Cycle-js&quot;&gt;&lt;a href=&quot;#Cycle-js&quot; class=&quot;headerlink&quot; title=&quot;Cycle.js&quot;&gt;&lt;/a&gt;Cycle.js&lt;/h2&gt;&lt;h3 id=&quot;Basic-Principle&quot;&gt;&lt;a href=&quot;#Basic-Principle&quot; class=&quot;headerlink&quot; title=&quot;Basic Principle&quot;&gt;&lt;/a&gt;Basic Principle&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一條規則就是要將「logics」跟「effect」分開&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要來分清楚這兩個東西是什麼就要先來看一下程式碼了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Logic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(i =&amp;gt; &lt;span class=&quot;string&quot;&gt;`Seconds elapsed &lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Effect &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(text =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.textContent = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這是一個從 0 開始每一秒一數的計數器，&lt;/p&gt;
&lt;p&gt;詳情請見 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Timer&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上半部的部分是「Logic」，&lt;/p&gt;
&lt;p&gt;而 subscribe 那一行開始，就是他怎樣呈現的 「Effect」。&lt;/p&gt;
&lt;p&gt;這裏有個很巧妙的概念，&lt;/p&gt;
&lt;p&gt;就是 Effect 才是真正影響到外面世界的地方（DOM），&lt;/p&gt;
&lt;p&gt;正如他的名字一樣；&lt;/p&gt;
&lt;p&gt;而 Logic 裏的東西只是單純的 Event stream，&lt;/p&gt;
&lt;p&gt;我們不去 Subscribe 他們，就不會有任何事情發生。&lt;/p&gt;
&lt;p&gt;Cycle.js 的原則就是將這兩大部分分開，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Effect&lt;/code&gt; 的部分是 Imperative 的，讓 Framework 幫你完成，&lt;/p&gt;
&lt;p&gt;身為開發者我們只要關心 &lt;code&gt;Logic&lt;/code&gt; 的部分就夠了，&lt;/p&gt;
&lt;p&gt;而 Logic 的部分是 functional 的。&lt;/p&gt;
&lt;h3 id=&quot;Main-以及-Effect&quot;&gt;&lt;a href=&quot;#Main-以及-Effect&quot; class=&quot;headerlink&quot; title=&quot;Main 以及 Effect&quot;&gt;&lt;/a&gt;Main 以及 Effect&lt;/h3&gt;&lt;p&gt;前面提到我們會將 logic 和 effect 分開，&lt;/p&gt;
&lt;p&gt;在 Cycle 中我們習慣會將 Logic 放到 main 裡面。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       .map(i =&amp;gt; &lt;span class=&quot;string&quot;&gt;`Seconds elapsed &lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log: Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       .map(i =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DOMEffect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text$.subscribe(text =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.textContent = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;consoleLogEffect&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;msg$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    msg$.subscribe(msg =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msg));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sink = main();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOMEffect(sink.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;consoleLogEffect(sink.Log);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們在 Main 裡面建了兩條不同的 stream，&lt;/p&gt;
&lt;p&gt;看起來已經將邏輯集中起來放，&lt;/p&gt;
&lt;p&gt;但是最下方從 sink 開始，&lt;/p&gt;
&lt;p&gt;似乎還是太 imperative 地去做這些事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我們 Hard Coding 的去指定 consoleLogEffect 這個函數，&lt;/p&gt;
&lt;p&gt;一旦我們今天把 main 中的 log 拔掉，&lt;/p&gt;
&lt;p&gt;那整個程式就會報錯了，&lt;/p&gt;
&lt;p&gt;Cycle.js 中不希望我們每次更動 Logic 時需要注意一大堆 effect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再來就要介紹一下 &lt;code&gt;run&lt;/code&gt; 這個 function。&lt;/p&gt;
&lt;h3 id=&quot;run&quot;&gt;&lt;a href=&quot;#run&quot; class=&quot;headerlink&quot; title=&quot;run&quot;&gt;&lt;/a&gt;&lt;code&gt;run&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mainFn, effects&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sinks = mainFn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(effects)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach(key =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        effects[key](sinks[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; effectsFunctions = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: DOMEffect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log: consoleLogEffect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run(main, effectsFunctions);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 會吃兩個參數，第一個就是我們管邏輯的 main，&lt;/p&gt;
&lt;p&gt;第二個則是 effect，&lt;/p&gt;
&lt;p&gt;我們如果不想要他在畫面上做事情，&lt;/p&gt;
&lt;p&gt;把在 effectFunctions 中的那個 key 給註解掉就行了，&lt;/p&gt;
&lt;p&gt;因為我們並沒有很 hard coding 的去呼叫每個 effectFunction。&lt;/p&gt;
&lt;p&gt;但是這裡要重新命名一下，將 effectFunctions 改成 drivers，&lt;/p&gt;
&lt;p&gt;一來是因為 effectFunctions 聽起來並不是個好命名方式XD&lt;/p&gt;
&lt;p&gt;二來是 drivers 即是我們熟悉的驅動程式，建立了硬體和軟體中間溝通的介面；&lt;/p&gt;
&lt;p&gt;而這裡的 driver 可以想成我們的程式(logic)，和畫面(effect)中間溝通的介面；&lt;/p&gt;
&lt;p&gt;還是很抽象嗎？&lt;/p&gt;
&lt;p&gt;那就從字面上的意思來看， driver 就是駕駛員，&lt;/p&gt;
&lt;p&gt;現在有一個駕駛員負責開著一台小車車，&lt;/p&gt;
&lt;p&gt;嘟嘟嘟的把我們寫的邏輯運送到畫面上，&lt;/p&gt;
&lt;p&gt;我們只要寫好邏輯、還有要送去的地方跟方式，&lt;/p&gt;
&lt;p&gt;剩下的就交給 driver 幫我們處理啦！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mainFn, drivers&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sinks = mainFn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(drivers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach(key =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        drivers[key](sinks[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: DOMDriver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log: consoleLogDriver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run(main, drivers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這是我們手刻出來的簡單版本，&lt;/p&gt;
&lt;p&gt;而 Cycle.js 首頁的 get started 例子中，&lt;/p&gt;
&lt;p&gt;輪廓的確就是這樣子，&lt;/p&gt;
&lt;p&gt;只是在 driver 的部分，&lt;/p&gt;
&lt;p&gt;Cycle.js 幫我們做了更多事情。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOM: Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .map(i =&amp;gt; CycleDOM.h1(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; + i + &lt;span class=&quot;string&quot;&gt;&#39; seconds elapsed&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DOM: CycleDOM.makeDOMDriver(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cycle.run(main, drivers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Read-effects-from-the-External-world&quot;&gt;&lt;a href=&quot;#Read-effects-from-the-External-world&quot; class=&quot;headerlink&quot; title=&quot;Read effects from the External world&quot;&gt;&lt;/a&gt;Read effects from the External world&lt;/h3&gt;&lt;p&gt;前面有提過 Netflix 解決複雜電影選單的方式，&lt;/p&gt;
&lt;p&gt;就是透過 Observable 來重新思考處理 Events 的方式，&lt;/p&gt;
&lt;p&gt;但到目前為止，我們都還沒有用到最精髓的部分，&lt;/p&gt;
&lt;p&gt;而是把內部 Logic 寫好，沒有接收任何外來的 event stream。&lt;/p&gt;
&lt;p&gt;奠基於 Rx 上面的 Cycle.js 最精華的也正是這一段處理 event 的方式，&lt;/p&gt;
&lt;p&gt;同時這也是 &lt;strong&gt;Cycle&lt;/strong&gt; 這名字的由來。&lt;/p&gt;
&lt;p&gt;首先先看前面寫的程式碼：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DOMDriver&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text$.subscribe(text =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.textContent = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .map(i =&amp;gt; &lt;span class=&quot;string&quot;&gt;`Seconds elapsed &lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log: Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .map(i =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到它只有 input，沒有 output。&lt;/p&gt;
&lt;p&gt;而 main function 則反之，&lt;/p&gt;
&lt;p&gt;我們想從外部 read something ，就代表我們的 main 必須要有 input。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這裏的前提是你照著 cycle.js 的單向資料流架構走&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我們先在 main 和 driver 各加上 input 和 output。&lt;/p&gt;
&lt;p&gt;接下來在 &lt;code&gt;run&lt;/code&gt; 中會改回 hard code 的方式，&lt;/p&gt;
&lt;p&gt;這是為了更容易去理解，接著就會遇到最奇妙的地方：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DOMDriver&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text$&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text$.subscribe(text =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.textContent = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DOMSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mainFn, drivers&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sinks = mainFn(DOMSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = drivers.DOM(sinks.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們看到 run 中間，DOMSource 需要 sinks 才能建立，&lt;/p&gt;
&lt;p&gt;但 sinks 也需要 DOMSource 才能被建立，&lt;/p&gt;
&lt;p&gt;形成一個很微妙的循環，是一個雞生蛋蛋生雞的問題。&lt;/p&gt;
&lt;p&gt;在更抽象化一點就是：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = f(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = g(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要解決這件事其實沒那麼難，&lt;/p&gt;
&lt;p&gt;想法上是這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bProxy = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = f(bproxy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = g(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bProxy.imitate(b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏要靠 rx 裡面的 subject 來建立我們的 proxy。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;瞭解更多關於 Subject: &lt;/p&gt;
&lt;p&gt;from &lt;a href=&quot;http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rx-book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡言之它同時繼承了 Observable 跟 Observer，&lt;/p&gt;
&lt;p&gt;所以我們既可以 subscribe 它，（Observable）&lt;/p&gt;
&lt;p&gt;又能夠對他呼叫 onNext、onError，以及 onCompleted（這就是 Observer 在做的事情）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裏就比較困難要分段看了，&lt;/p&gt;
&lt;p&gt;先到 run 裡面看看我們要怎麼按照上方的 pattern 來加入 proxy。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mainFn, drivers&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proxyDOMSource = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sinks = mainFn(proxyDOMSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DOMSource = drivers.DOM(sinks.DOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DOMSource.subscribe(click =&amp;gt; proxyDOMSource.onNext(click))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DOMDriver 回傳了一個 click-event 的 stream（Observable），&lt;/p&gt;
&lt;p&gt;所以我們 subscribe 它，並且每一次呼叫 click 的 stream，&lt;/p&gt;
&lt;p&gt;跟我們前面創造的 proxy 整合在一起，&lt;/p&gt;
&lt;p&gt;下來再來看 proxy 傳進 main 發生了什麼事情。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;DOMSource&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; click$ = DOMSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DOM: click$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .startWith(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMapLatest(() =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .map(i =&amp;gt; &lt;span class=&quot;string&quot;&gt;`Seconds elapsed &lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log: Observable.timer(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .map(i =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;簡單說就是我們每次在螢幕上按一下(click)，&lt;/p&gt;
&lt;p&gt;就會重啟整個 timer。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;歸功於 flapMapLatest 這個 operator，&lt;/p&gt;
&lt;p&gt;假如這裡改用 flapMap 的話，會發現舊的 stream 還在繼續跑，&lt;/p&gt;
&lt;p&gt;整個 timer 會被搗亂，假如還不熟 flatMap 該怎麼用&lt;/p&gt;
&lt;p&gt;請至 prerequisite 玩一下 &lt;a href=&quot;http://reactivex.io/learnrx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;learn-rx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而 &lt;code&gt;startWith(null)&lt;/code&gt; 則是製造一次「假的」 event，&lt;/p&gt;
&lt;p&gt;來觸發第一次還沒 click 之前的 effect。&lt;/p&gt;
&lt;p&gt;現在的 code 看起來很糟糕，尤其是在 main 中 hard code DOMSource 這一點。&lt;/p&gt;
&lt;p&gt;首先先從 run 中下手：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mainFn, drivers&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proxySources = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(drivers).forEach(key =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxySources[key] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sinks = mainFn(proxySources);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(drivers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .forEach(key =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = drivers[key](sinks[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            source.subscribe(x =&amp;gt; proxySources[key].onNext(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此一來我們就不用去 hard code 的指定每個 proxySource，&lt;/p&gt;
&lt;p&gt;而在 main 中簡單多了，只要把 click$ 的來源變成 sources.DOM 就好了，&lt;/p&gt;
&lt;p&gt;但在這裡我們可能會對一個 undefined 呼叫 subscribe。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;consoleLogDriver 並沒有 return 任何東西（nothing to be read）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要避免這點只要加個判斷式就能夠解決，&lt;/p&gt;
&lt;p&gt;不過截至目前為止，我們其實已經把 Cycle core 中的 run 給實作的差不多了！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cyclejs/cycle-core/blob/master/src/cycle.js#L97:L118&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code of run in Cycle.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;當然還是有些差異在，像是 error-handling，&lt;/p&gt;
&lt;p&gt;以及在 Cycle core 的 proxy 中是用 &lt;code&gt;ReplaySubject&lt;/code&gt; 而不是 &lt;code&gt;Subject&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;參考資料&quot;&gt;&lt;a href=&quot;#參考資料&quot; class=&quot;headerlink&quot; title=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://staltz.com/why-react-redux-is-an-inferior-paradigm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WHY REACT/REDUX IS AN INFERIOR PARADIGM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://staltz.com/unidirectional-user-interface-architectures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UNIDIRECTIONAL USER INTERFACE ARCHITECTURES&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://xgrommx.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rx-book&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，&lt;/p&gt;
&lt;p&gt;其實軟體開發裡面沒有銀彈，&lt;/p&gt;
&lt;p&gt;不過這種爭辯也更能夠激發出我們寫出更棒的軟體，&lt;/p&gt;
&lt;p&gt;並且去反思現行流行的東西真的是「好」的嗎？&lt;/p&gt;
    
    </summary>
    
    
      <category term="cycle.js" scheme="http://abalone0204.github.com/tags/cycle-js/"/>
    
      <category term="observable" scheme="http://abalone0204.github.com/tags/observable/"/>
    
  </entry>
  
  <entry>
    <title>我的前端工程師之路</title>
    <link href="http://abalone0204.github.com/2016/01/18/way-to-fed/"/>
    <id>http://abalone0204.github.com/2016/01/18/way-to-fed/</id>
    <published>2016-01-18T00:00:00.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;「這個畫面幫我稍微調一下應該沒有很難吧？」&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Hi 大家，先簡介一下自己背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非資工資科資管系(也就是所謂的非本科系)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其實我覺得第一點不是很重要、我也很討厭強調，&lt;/p&gt;
&lt;p&gt;但偏偏就是很常被問，&lt;/p&gt;
&lt;p&gt;要不然就是別人聽到你大學是XX系就會：「蛤？」&lt;/p&gt;
&lt;p&gt;索性就把它列出來了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;興趣使然的前端工程師，擅長一鍵跑版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;沒上過資策會、巨匠，或任何各種職訓班，但買過 tree house 的課程和幾本書&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;學習時間：一年半（從碼盲到現在終於可以改一些 code）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;稍微熟一點的技能： JavaScript, CSS, html, React.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;預計未來要學的東西：Haskell, golang, Angular(2.0), Rx.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;這是之前相關的&lt;a href=&quot;http://westudent-blog.sudo.com.tw/denny-sudo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;專訪&lt;/a&gt;，但我一直都想自己寫一篇，也不是 William 寫得不好，但總覺得哪裡不對勁，也許自幹就是一種工程師的浪漫吧！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;後來想想，也許是整篇文章太強調「本科」影響不大&lt;/p&gt;
&lt;p&gt;事實上我想說的是：「非本科不該是阻擋你寫程式的理由。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;總之這篇就是來介紹一下我是怎麼慢慢上手這個職業，中間會提到一些我覺得很棒的學習資源，和吸收新知的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;說到吸收新知，目前首推&lt;a href=&quot;http://weekly.codetengu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;碼天狗&lt;/a&gt;，它讓我禮拜一早上都會很焦慮的重新整理，大家可以感受一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Porjects&quot;&gt;&lt;a href=&quot;#Porjects&quot; class=&quot;headerlink&quot; title=&quot;Porjects&quot;&gt;&lt;/a&gt;Porjects&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;這是我簡介自己做過 projects 的&lt;a href=&quot;http://slides.com/dennyku/deck-1#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;會放這個是因為我本來要買月費專案($7/month)，卻手滑買到年費專案($70/year)，gan，只好多多利用它了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Get-started&quot;&gt;&lt;a href=&quot;#Get-started&quot; class=&quot;headerlink&quot; title=&quot;Get started&quot;&gt;&lt;/a&gt;Get started&lt;/h1&gt;&lt;p&gt;其實我本來立志成為一個 Data Scientist ，&lt;/p&gt;
&lt;p&gt;只是不小心被擺到前端的位置上去……&lt;/p&gt;
&lt;p&gt;回顧這一年半的旅程，前端的東西真的太多太雜了，&lt;/p&gt;
&lt;p&gt;更容易完全只知其然而不知其所以然的就開始用某個新框架、library，&lt;/p&gt;
&lt;p&gt;所以對我來說，&lt;strong&gt;「學什麼」是副課題，「不學什麼」才是真正的關鍵&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因為我前端工程師的路還沒走完，&lt;/p&gt;
&lt;p&gt;所以應該在我退休或換職業（去賣雞排）之前，&lt;/p&gt;
&lt;p&gt;都會繼續寫下去。&lt;/p&gt;
&lt;p&gt;目前寫完三點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;非本科系 v.s 本科系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;從哪裡開始學習？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端工程師該懂後端嗎？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-非本科系-v-s-本科系&quot;&gt;&lt;a href=&quot;#1-非本科系-v-s-本科系&quot; class=&quot;headerlink&quot; title=&quot;1. 非本科系 v.s 本科系&quot;&gt;&lt;/a&gt;1. 非本科系 v.s 本科系&lt;/h2&gt;&lt;p&gt;就來說說&lt;strong&gt;「本科系」&lt;/strong&gt;來到底有沒有差。&lt;/p&gt;
&lt;p&gt;首先，我們都知道學校裡的課程，&lt;/p&gt;
&lt;p&gt;很少是真的專注在所謂「&lt;strong&gt;前端工程&lt;/strong&gt;」上；&lt;/p&gt;
&lt;p&gt;這是可以理解的，一來因為前端變化太快，&lt;/p&gt;
&lt;p&gt;學期初才在說好棒棒的東西，&lt;/p&gt;
&lt;p&gt;到了學期末可能就變 deprecated了。&lt;/p&gt;
&lt;p&gt;所以這就代表非本科系跟本科系的人站在相同的學習立足點上了嗎？&lt;/p&gt;
&lt;p&gt;No，你得面對現實，本科生就是有他的優勢在。&lt;/p&gt;
&lt;p&gt;這裏要講個實習的故事。&lt;/p&gt;
&lt;p&gt;我第一間去實習的新創公司，應徵的是行銷，&lt;/p&gt;
&lt;p&gt;CEO 是個自己學習 JavaScript 並且把產品做出來的人，&lt;/p&gt;
&lt;p&gt;更重要的是他是個很願意教的人，&lt;/p&gt;
&lt;p&gt;在我表示我想朝這方向前進的意願時，&lt;/p&gt;
&lt;p&gt;他很大方的說：「如果你對 JavaScript 有興趣可以教你。」&lt;/p&gt;
&lt;p&gt;當時還有另一位是資管系的同學也一起，&lt;/p&gt;
&lt;p&gt;第一次的作業是用 Angular 做表單的驗證，&lt;/p&gt;
&lt;p&gt;怎麼讓使用者不能繼續輸入資料呢？&lt;/p&gt;
&lt;p&gt;（當時的我連 JavaScript、html 都不會寫）&lt;/p&gt;
&lt;p&gt;我的做法是非常土炮的將 input 換成 div 然後加上紅色的邊框，&lt;/p&gt;
&lt;p&gt;另一位實習生則是使用了 disabled 這個 property，就搞定了。&lt;/p&gt;
&lt;p&gt;講起來也沒什麼了不起的技巧，但不知道就是不知道。&lt;/p&gt;
&lt;p&gt;我問他怎麼會知道有 disabled 這個特性，&lt;/p&gt;
&lt;p&gt;他的回答也很簡單：「查文件啊！」&lt;/p&gt;
&lt;p&gt;也是這次教訓，我知道要先&lt;strong&gt;查文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;講起來蠻白癡，&lt;/p&gt;
&lt;p&gt;不過會上 &lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt; 和 google 找答案和看官方文件，&lt;/p&gt;
&lt;p&gt;都是最基本的能力。&lt;/p&gt;
&lt;p&gt;為什麼他會知道？&lt;/p&gt;
&lt;p&gt;很簡單，因為平常他們在寫作業或作專題就需要這個能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/B8wms6V.png&quot; alt=&quot;rtfm&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;既然我們遇到不會的字會查字典，&lt;br&gt;那為什麼我們寫軟體遇到問題時，不需要讀 doc 呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而對於整個電腦的理解，非本科系的人絕對也是被甩在幾條街之外，&lt;/p&gt;
&lt;p&gt;因為我們不需要修資料結構、演算法，&lt;/p&gt;
&lt;p&gt;更別說對於資料庫，&lt;/p&gt;
&lt;p&gt;作業系統、計算機結構、計算機組織、編譯器理解的淺薄，&lt;/p&gt;
&lt;p&gt;一定要掌握上述這些知識才能寫前端嗎？&lt;/p&gt;
&lt;p&gt;這是一個很大的疑問；&lt;/p&gt;
&lt;p&gt;但一個了解底下發生什麼事情的人，才會更知道極限在哪裏，&lt;/p&gt;
&lt;p&gt;這個絕對是肯定的。&lt;/p&gt;
&lt;p&gt;有時候你寫程式時會卡在一個小小的點，想出來之後覺得沒什麼，&lt;/p&gt;
&lt;p&gt;而本科系的人能從以前上述課程中的經驗去延伸，&lt;/p&gt;
&lt;p&gt;（不管是演算法或是系統相關的事情）&lt;/p&gt;
&lt;p&gt;比你更快速得到答案。&lt;/p&gt;
&lt;p&gt;畢竟，人家花了那麼多時間了解電腦，&lt;/p&gt;
&lt;p&gt;你如果不是天縱英才，要比他們理解電腦就得更努力跟上才行。&lt;/p&gt;
&lt;p&gt;這裏推薦一個很棒的課程，&lt;a href=&quot;http://www.nand2tetris.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nand2tetris&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;上面有很詳細的指示，如果你需要影片和評分系統的話，&lt;/p&gt;
&lt;p&gt;coursera 上也有開課了:&lt;a href=&quot;https://www.coursera.org/course/nand2tetris1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.coursera.org/course/nand2tetris1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這門課會從最基本的 nand(not and) 邏輯閘開始講起，&lt;/p&gt;
&lt;p&gt;用模擬器組合出自己的 CPU、記憶體，定義自己的組合語言，&lt;/p&gt;
&lt;p&gt;用習慣的程式語言寫出組譯器，&lt;/p&gt;
&lt;p&gt;再寫出一個超簡易版的 JVM，最後用一個簡化過後的 Java 語言（真的超簡化），&lt;/p&gt;
&lt;p&gt;寫出一個俄羅斯方塊來。&lt;/p&gt;
&lt;p&gt;整台電腦、軟體，都是由你一手寫出來的，不覺得很熱血嗎？&lt;/p&gt;
&lt;p&gt;而且你終於也能夠看懂這張圖的笑點在哪了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3oEdv6pGyOH00ZiRH2/giphy.gif&quot; alt=&quot;gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;當然，如果你在學習途中發現你對系統的東西很有興趣，&lt;/p&gt;
&lt;p&gt;那也恭喜你發現新天地啦！&lt;/p&gt;
&lt;p&gt;想當初為了所謂堅實的基礎，還跑去圖書館借白算盤來啃，&lt;/p&gt;
&lt;p&gt;那又是另一個故事了。&lt;/p&gt;
&lt;p&gt;總結一下這一段，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前端工程師也是軟體工程師&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;對電腦一無所知的人寫出來的軟體，你敢用嗎？&lt;/p&gt;
&lt;p&gt;我認為至少玩過一輪 nand2tetris 對於非本科系的人會相當有幫助，&lt;/p&gt;
&lt;p&gt;本科系的人來寫前端確實是有一點優勢在，&lt;/p&gt;
&lt;p&gt;但這不是認輸的藉口，&lt;/p&gt;
&lt;p&gt;而是你必須比別人更努力找方法變強的原因。&lt;/p&gt;
&lt;p&gt;另外，&lt;/p&gt;
&lt;p&gt;千萬不要以為念研究所的人是只會讀書的書呆子，&lt;/p&gt;
&lt;p&gt;比你聰明、比你努力，又比你勇敢的人永遠都多的是。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-從哪裡開始學習？&quot;&gt;&lt;a href=&quot;#2-從哪裡開始學習？&quot; class=&quot;headerlink&quot; title=&quot;2. 從哪裡開始學習？&quot;&gt;&lt;/a&gt;2. 從哪裡開始學習？&lt;/h2&gt;&lt;p&gt;先來說說「單純」的前端從哪裡開始，&lt;/p&gt;
&lt;p&gt;主要分成兩塊：&lt;/p&gt;
&lt;p&gt;第一塊是 html 和 CSS：&lt;/p&gt;
&lt;p&gt;我以前學習 html 和 CSS 的方法就是把 &lt;a href=&quot;http://www.w3schools.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3schools&lt;/a&gt;看完，&lt;/p&gt;
&lt;p&gt;不能說有什麼不好，不過真的是看完大部分都忘記，&lt;/p&gt;
&lt;p&gt;畢竟很多東西都馬是要用到的時候再去查。&lt;/p&gt;
&lt;p&gt;但現在我會推薦 &lt;a href=&quot;https://www.codecademy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codecademy&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;邊寫點東西邊學絕對是很有效的學習方式。&lt;/p&gt;
&lt;p&gt;而學會基礎後，&lt;/p&gt;
&lt;p&gt;要怎麼設計出好維護又乾淨的 html and CSS 那又是另一個很長的故事。&lt;/p&gt;
&lt;p&gt;第二塊則是 JavaScript：&lt;/p&gt;
&lt;p&gt;坦白說一年半過去，我仍然認為自己在 JavaScript 的知識上很貧瘠。&lt;/p&gt;
&lt;p&gt;這裏有篇 &lt;a href=&quot;https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.k5wxhl2s1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10 個面試時應該要知道的問題&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;可以探一下自己到底對 JavaScript 理解多少。&lt;/p&gt;
&lt;p&gt;這裏如果把教學全部列出來，真的是完全列不完，&lt;/p&gt;
&lt;p&gt;但學習的流程是這樣子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;掌握了基礎的語法和原則&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;實作練習&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回頭研究基礎再繼續實作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重複以上循環不斷的把你的武器磨的更亮&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於掌握基礎的語法，你可以到以下任一網站，&lt;/p&gt;
&lt;p&gt;挑一個你喜歡的，上完基礎 JavaScript 課程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://teamtreehouse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tree house&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codeschool&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://egghead.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;egghead.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;練習一段時間後，你會發現又有好多新工具冒出來了，&lt;/p&gt;
&lt;p&gt;這時候你可以先辦個 github 帳號，&lt;/p&gt;
&lt;p&gt;首先 watch awesome 這個 repo: &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sindresorhus/awesome &lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;看一下你喜歡的領域有沒有什麼好東西，&lt;/p&gt;
&lt;p&gt;再挑幾個你最有興趣的 repo 按下 watch，&lt;/p&gt;
&lt;p&gt;最後再開始訂閱各大框架或社群的 weekly，&lt;/p&gt;
&lt;p&gt;接著就是準備被源源不絕的資訊轟炸、不斷的學習和升級。&lt;/p&gt;
&lt;p&gt;而值得一提的是， JavaScript 有很多工具可以用，&lt;/p&gt;
&lt;p&gt;不管是 library 還是 framework，&lt;/p&gt;
&lt;p&gt;學習之前，真的必須想一想：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「你真的需要用它嗎？」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;舉例來說：&lt;/p&gt;
&lt;p&gt;React 的確相當的好用，&lt;/p&gt;
&lt;p&gt;但是你的畫面真的有那麼多 state 要處理嗎？&lt;/p&gt;
&lt;p&gt;有些人簡單的認為 SPA(Single Page Application)就要用 React，&lt;/p&gt;
&lt;p&gt;我得說不一定，假如根本沒有那麼複雜，&lt;/p&gt;
&lt;p&gt;也許你只是需要一個 template engine 而已，&lt;/p&gt;
&lt;p&gt;而把 React 當作 html 的 template 來用，&lt;/p&gt;
&lt;p&gt;實在是有點太小看它了。&lt;/p&gt;
&lt;p&gt;什麼時候該用 React 或是 React 到底好在哪裏，&lt;/p&gt;
&lt;p&gt;這個議題其實已經超出了本篇文章的範圍，&lt;/p&gt;
&lt;p&gt;有興趣的可以看這篇：&lt;a href=&quot;https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Components, Elements, and Instances by Dan Abramov(Redux 作者)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這也是為什麼我一直遲遲沒有碰 Angular 的原因，&lt;/p&gt;
&lt;p&gt;（因為我還沒遇過複雜到需要用到它的情境）&lt;/p&gt;
&lt;p&gt;但我認為在選擇前端的框架時，這篇文章很值得一看再看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/livoras/blog/issues/11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;界面之下：還原真實的MV*模式 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裡面並沒有太多的程式碼，只有比較 high level 的概念，&lt;/p&gt;
&lt;p&gt;但看完你會比較理解別人說 MVC、MVP、MVVM、Model 2 是在說些什麼，&lt;/p&gt;
&lt;p&gt;前端主要工作之一就是處理使用者介面（UI），&lt;/p&gt;
&lt;p&gt;我認為理解這些模式是一個前端工程師必備的 common sense，&lt;/p&gt;
&lt;p&gt;這些概念比起淘汰迅速的工具們，是比較能夠保值的，&lt;/p&gt;
&lt;p&gt;並且也會漸漸影響你挑選工具的眼光。&lt;/p&gt;
&lt;p&gt;而 medium 上也有許多好文章可以看，&lt;/p&gt;
&lt;p&gt;twitter 上面也有很多大神可以讓你追蹤，&lt;/p&gt;
&lt;p&gt;不要把這些事情當作是在大拜拜，&lt;/p&gt;
&lt;p&gt;覺得追蹤越多人自己越屌，&lt;/p&gt;
&lt;p&gt;重要的是你看他們生產的內容時得到了什麼。&lt;/p&gt;
&lt;p&gt;另外臉書上的前端社團也很值得加入，台灣人的軟體能力是很強悍的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/f2e.tw/?fref=ts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Front-End Developers Taiwan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/augularjs.tw/?fref=ts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS.tw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/reactjs.tw/?fref=ts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactJS.tw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/javascript.tw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript.tw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要的是在上面發問，也會有人很熱心的回答你。&lt;/p&gt;
&lt;p&gt;假如這樣都還是讓你資訊焦慮，可以開始訂閱一些技術週刊，&lt;/p&gt;
&lt;p&gt;像是&lt;a href=&quot;http://weekly.codetengu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;碼天狗&lt;/a&gt;、&lt;a href=&quot;http://weekly.techbridge.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TechBridge&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;讓 curators 來幫你整理一些技術上的新知。&lt;/p&gt;
&lt;p&gt;已經盡量精簡了資訊來源，希望能讓新手們不要太無所適從。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-前端工程師該懂後端嗎？&quot;&gt;&lt;a href=&quot;#3-前端工程師該懂後端嗎？&quot; class=&quot;headerlink&quot; title=&quot;3. 前端工程師該懂後端嗎？&quot;&gt;&lt;/a&gt;3. 前端工程師該懂後端嗎？&lt;/h2&gt;&lt;p&gt;後端跟前端是完全不一樣的專業，&lt;/p&gt;
&lt;p&gt;有人說 Node.js 能讓前端工程師跨足到後端去。&lt;/p&gt;
&lt;p&gt;(Isomorphic？)&lt;/p&gt;
&lt;p&gt;事實上前端工程師想往後端走還是有許多需要學習的，&lt;/p&gt;
&lt;p&gt;不管是資料庫或是系統面，都不是平常前端會碰觸到的領域，&lt;/p&gt;
&lt;p&gt;認為自己會寫 JavaScript 就硬上的下場通常是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;效能有問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;資安有問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整個 server-side 的 code 都他媽很有問題&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽起來是很糟糕的事情，所以請千萬尊重專業，&lt;/p&gt;
&lt;p&gt;讓我們前端歸前端、政治歸政治（欸？）。&lt;/p&gt;
&lt;p&gt;那前端到底要理解後端到怎樣的程度呢？&lt;/p&gt;
&lt;p&gt;這是一個很 tricky 的問題，&lt;/p&gt;
&lt;p&gt;大部份人會說：&lt;strong&gt;「至少要會接資料啦！」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但要學到會接資料揪竟是需要怎樣的能力呢？&lt;/p&gt;
&lt;p&gt;真的有人學到剛剛好就喊停的嗎？&lt;/p&gt;
&lt;p&gt;最好的方法其實就是自己去玩一套網頁框架，&lt;/p&gt;
&lt;p&gt;後端前端都寫一遍。&lt;/p&gt;
&lt;p&gt;Rails, Laravel, Django 都是我認為不錯的選擇，&lt;/p&gt;
&lt;p&gt;（Koa 也很不錯啦……）&lt;/p&gt;
&lt;p&gt;重點是去感受一下自己要怎樣設計 DB 的 Schema，&lt;/p&gt;
&lt;p&gt;怎樣做正規化、怎樣避免 N+1 Query，&lt;/p&gt;
&lt;p&gt;以及整個框架的架構為什麼要這樣設計，&lt;/p&gt;
&lt;p&gt;最後再跟自己拉的頁面整合在一起，然後部署上去，&lt;/p&gt;
&lt;p&gt;（用 heroku 是有點偷懶，不過如果你對 server 真的沒興趣，還是可以考慮這樣做沒差）&lt;/p&gt;
&lt;p&gt;等做到這一步，「至少要會接資料」這一點，&lt;/p&gt;
&lt;p&gt;早就迎刃而解了。&lt;/p&gt;
&lt;p&gt;對了，&lt;/p&gt;
&lt;p&gt;記得也不要因為自己寫過後端的 code 就說自己是 full-stack，&lt;/p&gt;
&lt;p&gt;這就跟你會收發 email 就說自己懂電腦一樣會被笑。&lt;/p&gt;
&lt;p&gt;(IT crowd 真的是個不錯的影集)&lt;/p&gt;
&lt;p&gt;有興趣可以看看這篇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/nodejs-in-front-end-engineer-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一個前端工程師眼中的 Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以略懂 Async 在 server 端和 client 端的差異。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;目前大概走到這裡，還有很多沒說到，&lt;/p&gt;
&lt;p&gt;但學個基礎開始實作後就能體會到許多了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;至於實作，&lt;/p&gt;
&lt;p&gt;可以選擇自己寫個身體健康、參與 open source，&lt;/p&gt;
&lt;p&gt;或是去實習都是非常好的選擇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不管是 RWD、mobile web、跨瀏覽器的處理、SEO，&lt;/p&gt;
&lt;p&gt;動畫該用 CSS3 或是 JavaScript 還是 SVG？&lt;/p&gt;
&lt;p&gt;每天都有新的問題可以鑽研，&lt;/p&gt;
&lt;p&gt;目前就先寫到這裡啦！&lt;/p&gt;
&lt;p&gt;希望可以改變一些覺得前端工程師只是在切切版的想法，&lt;/p&gt;
&lt;p&gt;也希望能幫助到想往前端工程師邁進的人。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;「這個畫面幫我稍微調一下應該沒有很難吧？」&lt;/p&gt;
    
    </summary>
    
    
      <category term="front-end" scheme="http://abalone0204.github.com/tags/front-end/"/>
    
      <category term="career" scheme="http://abalone0204.github.com/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>CSS Modules: 模組化 CSS</title>
    <link href="http://abalone0204.github.com/2016/01/09/css-modules/"/>
    <id>http://abalone0204.github.com/2016/01/09/css-modules/</id>
    <published>2016-01-09T00:00:00.000Z</published>
    <updated>2016-06-20T07:06:19.211Z</updated>
    
    <content type="html">&lt;p&gt;時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，&lt;/p&gt;
&lt;p&gt;這兩個東西有一點很一致：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不管我們再怎麼討厭它，&lt;br&gt;都還是得面對它、處理它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;先說結論：&quot;&gt;&lt;a href=&quot;#先說結論：&quot; class=&quot;headerlink&quot; title=&quot;先說結論：&quot;&gt;&lt;/a&gt;先說結論：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果討厭寫 CSS，就更應該用這種方式來寫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我們應該用 module 化的方式來思考每個畫面上的東西&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讓需要「工人智慧」的地方減到最少&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;「如果你覺得 CSS 很亂的話，那代表你心中沒有架構。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Prerequisite&quot;&gt;&lt;a href=&quot;#Prerequisite&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite&quot;&gt;&lt;/a&gt;Prerequisite&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;會使用 webpack（幾乎只要會改 config 就行了）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 CSS 當一回事的人&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;為什麼需要去思考-CSS-的「架構」？&quot;&gt;&lt;a href=&quot;#為什麼需要去思考-CSS-的「架構」？&quot; class=&quot;headerlink&quot; title=&quot;為什麼需要去思考 CSS 的「架構」？&quot;&gt;&lt;/a&gt;為什麼需要去思考 CSS 的「架構」？&lt;/h2&gt;&lt;p&gt;曾幾何時，我也覺得 CSS 是一個他媽有夠亂七八糟的東西，&lt;/p&gt;
&lt;p&gt;直到不小心開始寫前端，我才發現前端不只是 JavaScript，&lt;/p&gt;
&lt;p&gt;從 CSS 到 html 的設計，都需要仔細去思考「架構」這件事，&lt;/p&gt;
&lt;p&gt;否則很容易讓技術債債台高築，到最後一發不可收拾。&lt;/p&gt;
&lt;p&gt;使用起來合邏輯的東西，不代表能夠用很「邏輯化」的方式寫出來，&lt;/p&gt;
&lt;p&gt;這正是 CSS 為什麼很容易亂七八糟的原因，&lt;/p&gt;
&lt;p&gt;因為我們常常需要去指定很多畫面上的細節（imperative）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「欸欸，你這邊 width 要 300px，然後 margin 要設成 0 auto 才能置中」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而不是直觀的用程式碼來宣告我們想要畫面長怎樣（declarative）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「我們要一個看起來不錯的畫面」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;處理太多細節很容易出錯，像是螢幕或視窗大小不一樣 300px 就不一定 ok 了，&lt;/p&gt;
&lt;p&gt;而第二個 declarative way 似乎又太過理想化。&lt;/p&gt;
&lt;p&gt;而我認為折衷的方式就是 module 化 CSS，&lt;/p&gt;
&lt;p&gt;雖然也需要去實作 module 內的細節（imperative），&lt;/p&gt;
&lt;p&gt;但完成之後，就可以將這些 module 組裝起來，&lt;/p&gt;
&lt;p&gt;重複使用時就不需要去實做那麼多的細節，&lt;/p&gt;
&lt;p&gt;沒錯，我們又往 declarative programming更進一步了。&lt;/p&gt;
&lt;p&gt;現在看起來還是比較 high level 的概念，&lt;/p&gt;
&lt;p&gt;但我認為知道為什麼要這樣做很重要，&lt;/p&gt;
&lt;p&gt;稍後會在例子裏看到這樣做的好處是什麼。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在開始之前先講解一下兩個會推薦使用的工具，&lt;/p&gt;
&lt;p&gt;（你也可以依自己喜歡的配置啦！）&lt;/p&gt;
&lt;p&gt;分別是 Autoprefixer 以及 PostCSS。&lt;/p&gt;
&lt;h2 id=&quot;Autoprefixer&quot;&gt;&lt;a href=&quot;#Autoprefixer&quot; class=&quot;headerlink&quot; title=&quot;Autoprefixer&quot;&gt;&lt;/a&gt;Autoprefixer&lt;/h2&gt;&lt;p&gt;假如熟悉 postcss 和 autoprefixer 在幹嘛的人可以直接跳下一段了。&lt;/p&gt;
&lt;p&gt;其實我們平常在寫 CSS 的時候，為了處理跨瀏覽器的問題，&lt;/p&gt;
&lt;p&gt;常常需要寫很噁心的 prefix，&lt;/p&gt;
&lt;p&gt;就算有 SASS 的 include 語法，prefix 還是很噁心。&lt;/p&gt;
&lt;p&gt;看到 autoprefixer 出現真是讓人痛哭流涕的一件事，&lt;/p&gt;
&lt;p&gt;因為這代表以後有人會幫我們處理好 prefix，&lt;/p&gt;
&lt;p&gt;同時還會把太舊的 prefix 給移除掉。（像是 &lt;code&gt;border-radius&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;這裏就直接來安裝進專案吧！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; autoprefixer = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;autoprefixer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loaders: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                test:   &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loader: &lt;span class=&quot;string&quot;&gt;&quot;style-loader!css-loader!postcss-loader&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postcss: [ autoprefixer(&amp;#123; browsers: [&lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;] &amp;#125;) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;唯一需要說明一下的就是可以指定我們要 support 到多老舊的 browser啦！&lt;/p&gt;
&lt;p&gt;就這樣，恭喜你！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;PostCSS&quot;&gt;&lt;a href=&quot;#PostCSS&quot; class=&quot;headerlink&quot; title=&quot;PostCSS&quot;&gt;&lt;/a&gt;PostCSS&lt;/h2&gt;&lt;p&gt;PostCSS 是一個可以用 JavaScript plugins 將 style 轉成我們想要樣子的工具。&lt;/p&gt;
&lt;p&gt;（包括 lint, variables, mixins，以及好多東西……）&lt;/p&gt;
&lt;p&gt;確切一點來說， PostCSS 是一個 node.js 的 package，&lt;/p&gt;
&lt;p&gt;它可以將我們原本的 CSS 檔案轉成 AST(Abstraction Syntax Tree)，&lt;/p&gt;
&lt;p&gt;接著我們就可以藉由這個 API 來對 CSS 做事情，&lt;/p&gt;
&lt;p&gt;做完後再將它轉成 String，輸出成我們想要的 CSS，&lt;/p&gt;
&lt;p&gt;如果你懶得自己寫 plugin 來處理也不用擔心，&lt;/p&gt;
&lt;p&gt;現在已經有兩百多個 plugins 在那裡等你愛智求真了。&lt;/p&gt;
&lt;p&gt;我知道一定有人這時候在想：「那 SASS 呢？」&lt;/p&gt;
&lt;p&gt;沒錯，這兩者看起來似乎有點像，不過可以先看一下這篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://davidtheclark.com/excited-about-postcss/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I’m Excited About PostCSS But I’m Scared to Leave Sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這裏則是值得一看的補充資料，其實官方的 readme 裏也都有寫：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tut+的教學&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nicolasgallagher.com/custom-css-preprocessing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一個前端用 node.js 來寫 CSS 的 preprocessor 也是很正常的事&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡言之，PostCSS 跟 SASS 或 LESS 最不一樣的點是：&lt;/p&gt;
&lt;p&gt;「我們可以只採用我們想要的部分，並將其組裝起來。」&lt;/p&gt;
&lt;p&gt;這不就是 Compoasable 和模組化嗎？&lt;/p&gt;
&lt;p&gt;接著就來看看如何在 webpack 中設定 postcss，&lt;/p&gt;
&lt;p&gt;和使用各種 plugins。&lt;/p&gt;
&lt;p&gt;（坦白說這裏才是最頭痛的部分）&lt;/p&gt;
&lt;p&gt;使用 webpack 雖然簡單，但 config 的寫法太雜亂了，&lt;/p&gt;
&lt;p&gt;完成同樣一件事可以有好幾種方法，&lt;/p&gt;
&lt;p&gt;目前連官方文件上也沒有一個一致的 best practice。&lt;/p&gt;
&lt;p&gt;而&lt;a href=&quot;https://github.com/ruanyf/webpack-demos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮義峰的這篇教學&lt;/a&gt;是我目前看過寫的最清楚易懂的，&lt;/p&gt;
&lt;p&gt;從 entry 到跟 react 一起使用都有說到。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS-modules&quot;&gt;&lt;a href=&quot;#CSS-modules&quot; class=&quot;headerlink&quot; title=&quot;CSS modules&quot;&gt;&lt;/a&gt;CSS modules&lt;/h2&gt;&lt;p&gt;假如你直接跳過前兩個工具，其實也是 ok 啦！&lt;/p&gt;
&lt;p&gt;因為 webpack 的 css-loader 本身就內建 module 功能：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loaders: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            test: &lt;span class=&quot;regexp&quot;&gt;/\.[s]?css$/&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&#39;style!css?modules!sass&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在終於要來講一下 CSS modules 可以做到什麼事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;組合（Composition）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們能夠將 selector 組合在一起&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.className&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.otherClassName&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;composes&lt;/span&gt;: className;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: yellow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏要注意的是 composes 必須寫在其他 properties 的前面。&lt;/p&gt;
&lt;p&gt;而我們也可以 compose 多個 className：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;composes: classNameA classNameB;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;乍看之下跟 SASS 的 extend 有點像，&lt;/p&gt;
&lt;p&gt;但讓我們繼續看下去。&lt;/p&gt;
&lt;h2 id=&quot;Dependencies&quot;&gt;&lt;a href=&quot;#Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Dependencies&quot;&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;&lt;p&gt;假設我們現在有另一個檔案: style.css&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.className &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // some style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.otherClassName&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;composes&lt;/span&gt;: className from &lt;span class=&quot;string&quot;&gt;&quot;./style.css&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這給了我們很大的彈性，但小心不要 override properties，&lt;/p&gt;
&lt;p&gt;我覺得官方文件的這一句話寫得很棒：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Best if classes do a single thing and dependencies are hierarchic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這的確是我們在設計 CSS module 時，要常存心中的一句話。&lt;/p&gt;
&lt;h2 id=&quot;Usage-with-preprocessors&quot;&gt;&lt;a href=&quot;#Usage-with-preprocessors&quot; class=&quot;headerlink&quot; title=&quot;Usage with preprocessors&quot;&gt;&lt;/a&gt;Usage with preprocessors&lt;/h2&gt;&lt;p&gt;這裏主要是說要如何運用 preprocessor ，&lt;/p&gt;
&lt;p&gt;因為我們有時候還是需要 global 的 class。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:global&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-class&quot;&gt;.global-class-name&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Rewrite-with-CSS-Modules&quot;&gt;&lt;a href=&quot;#Rewrite-with-CSS-Modules&quot; class=&quot;headerlink&quot; title=&quot;Rewrite with CSS Modules&quot;&gt;&lt;/a&gt;Rewrite with CSS Modules&lt;/h2&gt;&lt;p&gt;如果你是打從專案一開始就使用 css module ，&lt;/p&gt;
&lt;p&gt;那恭喜你！&lt;/p&gt;
&lt;p&gt;但「通常」現有的專案上都是用 SASS 來解決，&lt;/p&gt;
&lt;p&gt;這裡就以我工作上的專案來做例子。&lt;/p&gt;
&lt;p&gt;這裏要提一下我們後端用的是 Rails，&lt;/p&gt;
&lt;p&gt;Rails 有個邪惡的好東西叫做 &lt;a href=&quot;https://ihower.tw/rails4/assets-pipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Asset Pipeline&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;它會將靜態資源壓成一個檔案，減少 request 數。&lt;/p&gt;
&lt;p&gt;自動幫你做這件事聽起來很美好，&lt;/p&gt;
&lt;p&gt;但實際上因為 css 有 global scope 的問題，&lt;/p&gt;
&lt;p&gt;所以要怎麼確保每一頁只 load 到自己要的 style 呢？&lt;/p&gt;
&lt;p&gt;我的做法是每一頁會有一個專屬的 id，&lt;/p&gt;
&lt;p&gt;而命名的方式就是以 controller 加上 action 的名稱來命名。&lt;/p&gt;
&lt;p&gt;像是 posts_controller 的首頁，&lt;/p&gt;
&lt;p&gt;我就會給它專屬的一支檔案&lt;code&gt;posts_index.scss&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#posts_index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // some style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這樣做的第一個好處很明顯，&lt;/p&gt;
&lt;p&gt;就是每個頁面裡的樣式就只會影響 id 裡的 scope。&lt;/p&gt;
&lt;p&gt;那說好的 module 呢？&lt;/p&gt;
&lt;p&gt;這裏就要用到 SASS 的 &lt;code&gt;extend&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;假設 posts 和 show 都有一模一樣的 header，&lt;/p&gt;
&lt;p&gt;這時候我就會把 header 抽出來像下面這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%header &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //  some style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &quot;./header.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#posts_index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @extend %header;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // some style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &quot;./header.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#posts_show &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @extend %header;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // some style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起來挺方便，&lt;/p&gt;
&lt;p&gt;而且 Rails 的 routing 通常都是 restful 的，&lt;/p&gt;
&lt;p&gt;所以理論上這樣 CSS 的名字也有一定的規則可循，&lt;/p&gt;
&lt;p&gt;不會找不到檔案在哪裡。&lt;/p&gt;
&lt;p&gt;（就算有自動搜尋，也要知道下哪些關鍵字吧！）&lt;/p&gt;
&lt;p&gt;但，&lt;/p&gt;
&lt;p&gt;如果今天根據 user 的身份不同，&lt;/p&gt;
&lt;p&gt;會 render 不一樣的頁面呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#posts_index_super_user&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;沒錯，問題又變得開始複雜起來，&lt;/p&gt;
&lt;p&gt;原因就出在它仍然是 global scope，&lt;/p&gt;
&lt;p&gt;而我試圖想從命名來解決這件事情，&lt;/p&gt;
&lt;p&gt;我常常在想：「啊！如果 CSS 是 local scope該有多好？」&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;天啊！這解決了根本上的問題！&lt;/p&gt;
&lt;p&gt;假如能夠用 component-based 的方式來思考，&lt;/p&gt;
&lt;p&gt;讓 react component 從 css module 之間有對應的 name 來讀取樣式，&lt;/p&gt;
&lt;p&gt;那不就更棒了嗎？&lt;/p&gt;
&lt;p&gt;以後的資料夾結構會長這樣子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── components&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ui-App&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── index.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ui-Avatar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── index.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── ui-Profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── fonts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       │   └── opensans-regular-webfont.woff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       │   └── icon-user.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── index.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── styles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── base.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── theme.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一個資料夾底下就放著 component.js, component.css，&lt;/p&gt;
&lt;p&gt;本身就是一個 micro-service，&lt;/p&gt;
&lt;p&gt;而我們要做的正是把這些 micro-service 給組裝起來變成一個頁面，&lt;/p&gt;
&lt;p&gt;最後再把這些頁面組裝起來變成 Application，相當舒服。&lt;/p&gt;
&lt;p&gt;不過要如何從現有的專案改寫呢？&lt;/p&gt;
&lt;p&gt;這裏就拿這個小小的部落格來舉例，&lt;/p&gt;
&lt;p&gt;因為我一開始是用&lt;a href=&quot;https://github.com/abalone0204/generator-suku&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自己寫的 generator&lt;/a&gt; 生成專案，&lt;/p&gt;
&lt;p&gt;（小打一下廣告，&lt;/p&gt;
&lt;p&gt;平常開發前端 component 就是在這個生成的專案上開發，&lt;/p&gt;
&lt;p&gt;弄好 react 和 hmr 之後，其實蠻方便的。）&lt;/p&gt;
&lt;p&gt;順帶一提，這是開始改寫前的樣子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stylesheets/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── animations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── blink.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── loading.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── spins.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── code_highlights&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── default.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── colors.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── components&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── Nav&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   │   └── _icon_bar.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │       └── loading.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── nav.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── about.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── home.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── post.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── style.scss&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到最後 stylesheets 裡面只會剩下 global 的 css 檔案，&lt;/p&gt;
&lt;p&gt;像是 base.css 或是 theme.css 。&lt;/p&gt;
&lt;p&gt;首先第一步當然就是處理 global 的 css，&lt;/p&gt;
&lt;p&gt;思考的方向很簡單，就是哪些東西是每一個頁面都用得到的呢？&lt;/p&gt;
&lt;p&gt;所以我們把 body, a, h1~h5之類的東西先拔出來：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:global &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text-decoration: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        letter-spacing: 1px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: #23263a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        font-family: &#39;Noto Sans TC&#39;,Microsoft JhengHei,Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        font-weight: 200;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .wf-loading &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        * &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著來處理我們的 Nav bar，&lt;/p&gt;
&lt;p&gt;從這裡開始，就要進入 module 化的思考方式，&lt;/p&gt;
&lt;p&gt;一開始的時候你可能會覺得，欸？幹嘛這樣做？&lt;/p&gt;
&lt;p&gt;但越到後面你會發現一旦你習慣這樣思考，&lt;/p&gt;
&lt;p&gt;很多原本難解的問題都會迎刃而解，&lt;/p&gt;
&lt;p&gt;尤其是用組裝的方式來思考畫面的元件，&lt;/p&gt;
&lt;p&gt;能讓多狀態的呈現變得更簡單，&lt;/p&gt;
&lt;p&gt;也更能明白哪個部分該抽象化出來變成 base。&lt;/p&gt;
&lt;p&gt;先來看看這個 Nav 的例子。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;預計會在以下幾個步驟循序漸進地去思考如何去寫 CSS Modules：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;讀一下舊有的 js, css&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最外層的 global selector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;沒有狀態改變的 local selector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有狀態改變的 local selector&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-分析舊有的-js-css&quot;&gt;&lt;a href=&quot;#1-分析舊有的-js-css&quot; class=&quot;headerlink&quot; title=&quot;1. 分析舊有的 js, css&quot;&gt;&lt;/a&gt;1. 分析舊有的 js, css&lt;/h3&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;show: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.toggleIcon = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.toggleIcon.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    toggleIcon() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;show: !&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.show&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &amp;#123;show&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; className = show ? &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;nav&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;div id=&quot;logo&quot; className=&amp;#123;className&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;div id=&quot;toggle_icon&quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     className=&amp;#123;className&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     onClick=&amp;#123;this.toggleIcon&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    show ? &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;ul id=&quot;nav_list&quot; className=&amp;#123;className&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;li&amp;gt;&amp;lt;Link to=&quot;/about&quot;&amp;gt;About&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;li&amp;gt;&amp;lt;i className=&quot;fa fa-github-alt&quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;li&amp;gt;&amp;lt;i className=&quot;fa fa-facebook&quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到我們的 toggle_icon 會隨著 show 的值而改變樣式，&lt;/p&gt;
&lt;p&gt;至於怎樣改變？就來看看原先架構下的 CSS 怎麼寫。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import &quot;./colors.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import &quot;./components/Nav/icon_bar&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nav &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z-index: 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color: white;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: $deep_blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    padding: 14px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 28px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text-decoration: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #logo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 28px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 28px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-image: url(&quot;../img/icon.png&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-size: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transition: transform 1s ease;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:hover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            animation: shake;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #logo.active &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: $sudo_green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #toggle_icon &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: translateY(-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        right: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @extend %icon_bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cursor: pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @extend %icon_bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            content: &#39;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            margin-top: -10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            margin-top: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #toggle_icon.active &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transition-property: background-color, transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transition-duration: .2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:before, &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background: $sudo_green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transition-property: background-color, transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transition-duration: .2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transform: rotate(45deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transform-origin: 0 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transform: rotate(-45deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transform-origin: 0 5px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #nav_list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100vh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: #23263a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 56px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        padding: 5px 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            padding: 5px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-最外層的-global-selector&quot;&gt;&lt;a href=&quot;#2-最外層的-global-selector&quot; class=&quot;headerlink&quot; title=&quot;2. 最外層的 global selector&quot;&gt;&lt;/a&gt;2. 最外層的 global selector&lt;/h2&gt;&lt;p&gt;如果你有寫過 react native 的話，&lt;/p&gt;
&lt;p&gt;就能體會到 style object 的好處，&lt;/p&gt;
&lt;p&gt;假如沒有，那現在這是好好來玩玩看的時候。&lt;/p&gt;
&lt;p&gt;我們從最外層開始拆解。&lt;/p&gt;
&lt;p&gt;（其實由內而外、由外而內各有好壞，但這可能又要寫另外一篇了）&lt;/p&gt;
&lt;p&gt;最外層的當然就是原生的 nav tag，&lt;/p&gt;
&lt;p&gt;這裏其實大可直接給他 global&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:global &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nav &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        z-index: 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: white;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: #23263a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        padding: 14px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 28px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-沒有狀態改變的-local-selector&quot;&gt;&lt;a href=&quot;#3-沒有狀態改變的-local-selector&quot; class=&quot;headerlink&quot; title=&quot;3. 沒有狀態改變的 local selector&quot;&gt;&lt;/a&gt;3. 沒有狀態改變的 local selector&lt;/h2&gt;&lt;p&gt;往下看到 logo ：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.logo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;28px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;28px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;../../../static/img/icon.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要怎麼 import 它呢？&lt;/p&gt;
&lt;p&gt;首先別忘記在 webpack 的 config 裡開啟 css modules 的功能。&lt;/p&gt;
&lt;p&gt;再來只要這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; style &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./Nav.scss&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;div className=&amp;#123;style.logo&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;style.logo&lt;/code&gt; 讀到的就會是 webpack 幫我們生成的唯一字串，&lt;/p&gt;
&lt;p&gt;不用擔心會跟其他 class 重複，不相信的話 console.log 看一下，&lt;/p&gt;
&lt;p&gt;而跟以往相同，webpack 也會自動去幫我們寫入 style 到 head 裡面，&lt;/p&gt;
&lt;p&gt;對應到的 class name 就是剛剛生成的唯一字串。&lt;/p&gt;
&lt;p&gt;原理大概是這樣子。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;4-有狀態改變的-local-selector&quot;&gt;&lt;a href=&quot;#4-有狀態改變的-local-selector&quot; class=&quot;headerlink&quot; title=&quot;4. 有狀態改變的 local selector&quot;&gt;&lt;/a&gt;4. 有狀態改變的 local selector&lt;/h3&gt;&lt;p&gt;再來則是為什麼我仍然使用 SASS 的原因： extend&lt;/p&gt;
&lt;p&gt;來看看 toggle_icon，他就是我們平常看到手機版的選單，&lt;/p&gt;
&lt;p&gt;按了之後會變形。&lt;/p&gt;
&lt;p&gt;先直接看它原本的 CSS 長怎樣：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#toggle_icon &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transform: translateY(-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @extend %icon_bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cursor: pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @extend %icon_bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        content: &#39;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top: -10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道有一些 PostCSS 的插件可以解決，&lt;br&gt;但這篇的重點在於模組化 CSS 的思考，所以就暫時先擱著啦！）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為那個 icon 有三個橫條，每個橫條的設定都差不多，&lt;/p&gt;
&lt;p&gt;所以我寫了一個 icon_bar 來被 extend。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;selector-tag&quot;&gt;icon_bar&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;transition-property&lt;/span&gt;: background-color, transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;transition-duration&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;2s&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著則是重頭戲，&lt;/p&gt;
&lt;p&gt;對於畫面來說，這個 toggle_icon 會有兩個狀態，&lt;/p&gt;
&lt;p&gt;也就是說我們會有兩個 class 來處理它，&lt;/p&gt;
&lt;p&gt;但這兩個狀態又有許多共同點，怎麼辦呢？&lt;/p&gt;
&lt;p&gt;答案很簡單：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抽出來當 base，讓兩個狀態的 class 去 composes 這個 base 就好啦！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.toggle_icon_base &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @extend %icon_bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transform: translateY(-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cursor: pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transition-property: background-color, transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transition-duration: .2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // pseudo-selector 是不能使用 composes 的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 這就是為什麼我仍需要 @extend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @extend %icon_bar; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        content: &#39;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top: -10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這裏抽出來的就是兩方都不會變的 properties，&lt;/p&gt;
&lt;p&gt;把 transition 放在 base 裏的好處就是能看到狀態之間的變化，&lt;/p&gt;
&lt;p&gt;這樣能實現一些簡單的動畫。&lt;/p&gt;
&lt;p&gt;接著就是把我們寫好的 base 組裝起來而已，&lt;/p&gt;
&lt;p&gt;toggle_icon！附身合體！&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.toggle_icon &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    composes: toggle_icon_base; // 記得要放在其他 properties 前面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: white;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: white;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:hover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: #50e2c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background-color: #50e2c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;狀態的改變每個人都有自己喜好的方式，可以自行調整：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.toggle_icon--active &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    composes: toggle_icon_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before, &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: #50e2c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transition-property: background-color, transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transition-duration: .2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: rotate(45deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform-origin: 0 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: rotate(-45deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform-origin: 0 5px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 component 中該如何對應呢？&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div className=&amp;#123;show ? style[&lt;span class=&quot;string&quot;&gt;&quot;toggle_icon--active&quot;&lt;/span&gt;] : style.toggle_icon&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.toggleIcon&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;沒錯，就是這麼簡單而已。&lt;/p&gt;
&lt;h1 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h1&gt;&lt;p&gt;回頭看看重構後的 CSS，&lt;/p&gt;
&lt;p&gt;你會發現我們已經不是昔日把所有東西都丟在越來越多層的 class 裡面，&lt;/p&gt;
&lt;p&gt;而是變成扁平且一塊一塊的了，&lt;/p&gt;
&lt;p&gt;如果要重構的話我們也能夠將重複的部分抽出來。&lt;/p&gt;
&lt;p&gt;再來更棒的是除了 global 的地方，&lt;/p&gt;
&lt;p&gt;我們不用再擔心全域命名污染的問題，&lt;/p&gt;
&lt;p&gt;畢竟沒有 import 到的 class 就永遠不會發生作用啊！&lt;/p&gt;
&lt;p&gt;如果有寫錯的地方或是建議，很歡迎留言告訴我。&lt;/p&gt;
&lt;p&gt;我真的最討厭寫 CSS 了。&lt;/p&gt;
&lt;h2 id=&quot;參考連結：&quot;&gt;&lt;a href=&quot;#參考連結：&quot; class=&quot;headerlink&quot; title=&quot;參考連結：&quot;&gt;&lt;/a&gt;參考連結：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;css module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autoprefixer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using webpack to build React components and their assets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，&lt;/p&gt;
&lt;p&gt;這兩個東西有一點很一致：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不管我們再怎麼討厭它，&lt;br&gt;都還是得面對它、處理它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;先說結論：&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="CSS Modules" scheme="http://abalone0204.github.com/tags/CSS-Modules/"/>
    
      <category term="PostCSS" scheme="http://abalone0204.github.com/tags/PostCSS/"/>
    
  </entry>
  
</feed>
