{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon--.png","path":"favicon--.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1461501194000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1461501194000},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1461501194000},{"_id":"themes/apollo/_config.yml","hash":"531bf6b8889907da5c2f00a089007d46b34b12cc","modified":1461501735000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1461501194000},{"_id":"themes/apollo/package.json","hash":"9426138c09ebb95969021d951590c0c54b187a43","modified":1461501194000},{"_id":"themes/apollo/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1461502058000},{"_id":"source/_posts/auto-release.md","hash":"2b98b1619886c68f795715b6e06a4559d6a5d5ca","modified":1461503089000},{"_id":"source/_posts/circle-js-3.md","hash":"8540e0f33af4b0350a1502100e2dab6a3ee8fe66","modified":1461503010000},{"_id":"source/_posts/circle-js-2.md","hash":"c69945212606e9cd8969a2a81b9667be7baef5cc","modified":1461502970000},{"_id":"source/_posts/css-modules.md","hash":"ee93cf347b791e52ab2f123b799ebf4a2cd7391a","modified":1461502538000},{"_id":"source/_posts/simple-ci.md","hash":"7e16aad6841a4ea386792413d910bfd3daddef59","modified":1461505852000},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1461501194000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461501194000},{"_id":"source/_posts/cycle-js-basic.md","hash":"55b72fd14a9cb02fc9a6dbb5ef973fc0c5a698bf","modified":1461502930000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461501187000},{"_id":"source/_posts/way-to-fed.md","hash":"0102a9dae53f1c2becdbb033f6a96fc11414850d","modified":1461502909000},{"_id":"themes/apollo/.git/index","hash":"488bbe006ac168c07e804934bdf3d001c83499a6","modified":1461501194000},{"_id":"themes/apollo/.git/packed-refs","hash":"351ace6020e57dde0fe9e6f94474004835d9bd38","modified":1461501194000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1461501194000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1461501194000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1461501194000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"a51911e074eb6ad1f2972d6f445c1f9de225ff39","modified":1461503146000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1461501194000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1461501194000},{"_id":"themes/apollo/source/favicon.ico","hash":"7bf894acb35fb0500d87e47c50ea046b27221a25","modified":1461501894000},{"_id":"themes/apollo/source/favicon--.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1461501194000},{"_id":"themes/apollo/source/favicon.png","hash":"7ccf7488dcd4839af64ae44f76547d2735b0a55e","modified":1457946504000},{"_id":"themes/apollo/layout/post.jade","hash":"33ab46ab3736e5d51388939858647942ce375b9b","modified":1461501194000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461501187000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461501187000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461501187000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"5ba43081d4fb9eaf0189b5165726daa6cee4b701","modified":1461501194000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"90eedc680eff34bf297d0561d343c7bf118606a0","modified":1461501194000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1461501194000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1461501194000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"1ac04b9dbcff6cc5c1ac8304d5ec86ffeed12183","modified":1461501194000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"51b2ba6a1cebb275730eb7131eea211c91f0986a","modified":1461501194000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1461501194000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1461501194000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"f981ebc7af9b83066f1a5673808bb41b9515d009","modified":1461501194000},{"_id":"themes/apollo/source/css/apollo.css","hash":"7dc829069da92b1ada12f0983fb9e34fa2403557","modified":1461501194000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"a3153dfedbaff08c20930b2bde95f2db49f6d518","modified":1461501194000},{"_id":"themes/apollo/.git/objects/pack/pack-008e1684709edc07e9c4ec5cc2779c235196a69b.idx","hash":"3b0e1baf710ef30e0cddb9ffeeef70af2fcb7385","modified":1461501194000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"67e75c1f4aabbc90c2443ace0c14196b913da43f","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"187315928040112ac5b9b2c0c6b2f406cf45813b","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"7ef0046f9633fac2e41a78784abbcf61f580302a","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"7fc843c37a4dbf9f6e70770398841a73465ec642","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"a260196a1aa96a729ff0d80a734b840f5fbf6678","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1461501194000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"01a2327ac7f06e83b0451c3cc01507e4c415c041","modified":1461501194000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"5ba43081d4fb9eaf0189b5165726daa6cee4b701","modified":1461501194000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461501194000},{"_id":"themes/apollo/.git/objects/pack/pack-008e1684709edc07e9c4ec5cc2779c235196a69b.pack","hash":"ff44f3f204e33d074928c37379886dc6be85bda8","modified":1461501194000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"5ba43081d4fb9eaf0189b5165726daa6cee4b701","modified":1461501194000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"自動化發布","date":"2016-01-05T16:00:00.000Z","desc":"CI","_content":"\n運用 npm 上的套件來做個簡單的 CI，\n\n對自己用的小工具庫或 side project 而言，\n\n都是很爽的事情。\n\n<!--more-->\n\n- Test.\n\n- mocha, chai\n\n- 先測試\n\n\n- Semantic release\n\n```bash\n> semainti-release-cli setup\n\n? Is the GitHub repository private? No\n? What is your npm registry? https://registry.npmjs.org/\n? What is your npm username? tjku\n? What is your npm email? abalone0204@gmail.com\n? What is your GitHub username? abalone0204\n? What CI are you using? Travis CI\n? What kind of `.travis.yml` do you want? Single Node.js version.\n```\n\n接著會新增數個檔案和變更 package.json 以及新增 travis.yml\n\npackage.json 中的 version 被拿掉了，\n\n如果我們要用 npm install 東西的話，\n\n這樣會噴錯。\n\n所以我們還是要手動將其加回去\n\n```json\n{\n    ...\n    \"version\": \"0.0.0-semantically-released\",\n    ...\n}\n```\n\n在 travis.yml 裡面設定要通過 test 才能 release 新版本\n\n```yml\nscript:\n  - npm run test\n```\n\n- Conventional commit\n\n\n- Automatically Releasing with TravisCI\n\n- Automatically running tests before commits with ghooks\n\n\n- Goal\n    \n    - 在 commit 之前先跑測試\n\n    - 在 push 前可以先 bundle\n\n- commitizen和 ghooks的 config 推薦寫法，影片中的樣式已經舊了\n\n```json\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"node_modules/cz-conventional-changelog/\"\n    },\n    \"ghooks\": {\n      \"pre-commit\": \"npm run test:single\"\n    }\n}\n```\n\n# 測試覆蓋率\n\n使用 istanbul\n\n\n```json\n{\n    \"test:single\": \"istanbul cover -x *.test.js _mocha -- -R $(find test -name *.test.js)\"\n}\n```\n\n- `-x`是因為我們不需要去測試測試用的js\n\n- `_mocha` 則是為搭配`istanbul`所使用的","source":"_posts/auto-release.md","raw":"---\ntitle: 自動化發布\ndate: 2016/1/6\ndesc: CI\ntags: auto-realease JavaScript CI\n---\n\n運用 npm 上的套件來做個簡單的 CI，\n\n對自己用的小工具庫或 side project 而言，\n\n都是很爽的事情。\n\n<!--more-->\n\n- Test.\n\n- mocha, chai\n\n- 先測試\n\n\n- Semantic release\n\n```bash\n> semainti-release-cli setup\n\n? Is the GitHub repository private? No\n? What is your npm registry? https://registry.npmjs.org/\n? What is your npm username? tjku\n? What is your npm email? abalone0204@gmail.com\n? What is your GitHub username? abalone0204\n? What CI are you using? Travis CI\n? What kind of `.travis.yml` do you want? Single Node.js version.\n```\n\n接著會新增數個檔案和變更 package.json 以及新增 travis.yml\n\npackage.json 中的 version 被拿掉了，\n\n如果我們要用 npm install 東西的話，\n\n這樣會噴錯。\n\n所以我們還是要手動將其加回去\n\n```json\n{\n    ...\n    \"version\": \"0.0.0-semantically-released\",\n    ...\n}\n```\n\n在 travis.yml 裡面設定要通過 test 才能 release 新版本\n\n```yml\nscript:\n  - npm run test\n```\n\n- Conventional commit\n\n\n- Automatically Releasing with TravisCI\n\n- Automatically running tests before commits with ghooks\n\n\n- Goal\n    \n    - 在 commit 之前先跑測試\n\n    - 在 push 前可以先 bundle\n\n- commitizen和 ghooks的 config 推薦寫法，影片中的樣式已經舊了\n\n```json\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"node_modules/cz-conventional-changelog/\"\n    },\n    \"ghooks\": {\n      \"pre-commit\": \"npm run test:single\"\n    }\n}\n```\n\n# 測試覆蓋率\n\n使用 istanbul\n\n\n```json\n{\n    \"test:single\": \"istanbul cover -x *.test.js _mocha -- -R $(find test -name *.test.js)\"\n}\n```\n\n- `-x`是因為我們不需要去測試測試用的js\n\n- `_mocha` 則是為搭配`istanbul`所使用的","slug":"auto-release","published":1,"updated":"2016-04-24T13:04:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5e0000f606tc19k7h2","content":"<p>運用 npm 上的套件來做個簡單的 CI，</p>\n<p>對自己用的小工具庫或 side project 而言，</p>\n<p>都是很爽的事情。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>Test.</p>\n</li>\n<li><p>mocha, chai</p>\n</li>\n<li><p>先測試</p>\n</li>\n</ul>\n<ul>\n<li>Semantic release</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; semainti-release-cli setup</span><br><span class=\"line\"></span><br><span class=\"line\">? Is the GitHub repository private? No</span><br><span class=\"line\">? What is your npm registry? https://registry.npmjs.org/</span><br><span class=\"line\">? What is your npm username? tjku</span><br><span class=\"line\">? What is your npm email? abalone0204@gmail.com</span><br><span class=\"line\">? What is your GitHub username? abalone0204</span><br><span class=\"line\">? What CI are you using? Travis CI</span><br><span class=\"line\">? What kind of `.travis.yml` <span class=\"keyword\">do</span> you want? Single Node.js version.</span><br></pre></td></tr></table></figure>\n<p>接著會新增數個檔案和變更 package.json 以及新增 travis.yml</p>\n<p>package.json 中的 version 被拿掉了，</p>\n<p>如果我們要用 npm install 東西的話，</p>\n<p>這樣會噴錯。</p>\n<p>所以我們還是要手動將其加回去</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"version\": \"0.0.0-semantically-released\",</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 travis.yml 裡面設定要通過 test 才能 release 新版本</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run test</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Conventional commit</li>\n</ul>\n<ul>\n<li><p>Automatically Releasing with TravisCI</p>\n</li>\n<li><p>Automatically running tests before commits with ghooks</p>\n</li>\n</ul>\n<ul>\n<li><p>Goal</p>\n<ul>\n<li><p>在 commit 之前先跑測試</p>\n</li>\n<li><p>在 push 前可以先 bundle</p>\n</li>\n</ul>\n</li>\n<li><p>commitizen和 ghooks的 config 推薦寫法，影片中的樣式已經舊了</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\": &#123;</span><br><span class=\"line\">    \"commitizen\": &#123;</span><br><span class=\"line\">      \"path\": \"node_modules/cz-conventional-changelog/\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"ghooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run test:single\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"測試覆蓋率\"><a href=\"#測試覆蓋率\" class=\"headerlink\" title=\"測試覆蓋率\"></a>測試覆蓋率</h1><p>使用 istanbul</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test:single\"</span>: <span class=\"string\">\"istanbul cover -x *.test.js _mocha -- -R $(find test -name *.test.js)\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>-x</code>是因為我們不需要去測試測試用的js</p>\n</li>\n<li><p><code>_mocha</code> 則是為搭配<code>istanbul</code>所使用的</p>\n</li>\n</ul>\n","excerpt":"<p>運用 npm 上的套件來做個簡單的 CI，</p>\n<p>對自己用的小工具庫或 side project 而言，</p>\n<p>都是很爽的事情。</p>","more":"<ul>\n<li><p>Test.</p>\n</li>\n<li><p>mocha, chai</p>\n</li>\n<li><p>先測試</p>\n</li>\n</ul>\n<ul>\n<li>Semantic release</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; semainti-release-cli setup</span><br><span class=\"line\"></span><br><span class=\"line\">? Is the GitHub repository private? No</span><br><span class=\"line\">? What is your npm registry? https://registry.npmjs.org/</span><br><span class=\"line\">? What is your npm username? tjku</span><br><span class=\"line\">? What is your npm email? abalone0204@gmail.com</span><br><span class=\"line\">? What is your GitHub username? abalone0204</span><br><span class=\"line\">? What CI are you using? Travis CI</span><br><span class=\"line\">? What kind of `.travis.yml` <span class=\"keyword\">do</span> you want? Single Node.js version.</span><br></pre></td></tr></table></figure>\n<p>接著會新增數個檔案和變更 package.json 以及新增 travis.yml</p>\n<p>package.json 中的 version 被拿掉了，</p>\n<p>如果我們要用 npm install 東西的話，</p>\n<p>這樣會噴錯。</p>\n<p>所以我們還是要手動將其加回去</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"version\": \"0.0.0-semantically-released\",</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 travis.yml 裡面設定要通過 test 才能 release 新版本</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run test</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Conventional commit</li>\n</ul>\n<ul>\n<li><p>Automatically Releasing with TravisCI</p>\n</li>\n<li><p>Automatically running tests before commits with ghooks</p>\n</li>\n</ul>\n<ul>\n<li><p>Goal</p>\n<ul>\n<li><p>在 commit 之前先跑測試</p>\n</li>\n<li><p>在 push 前可以先 bundle</p>\n</li>\n</ul>\n</li>\n<li><p>commitizen和 ghooks的 config 推薦寫法，影片中的樣式已經舊了</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\": &#123;</span><br><span class=\"line\">    \"commitizen\": &#123;</span><br><span class=\"line\">      \"path\": \"node_modules/cz-conventional-changelog/\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"ghooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run test:single\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"測試覆蓋率\"><a href=\"#測試覆蓋率\" class=\"headerlink\" title=\"測試覆蓋率\"></a>測試覆蓋率</h1><p>使用 istanbul</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test:single\"</span>: <span class=\"string\">\"istanbul cover -x *.test.js _mocha -- -R $(find test -name *.test.js)\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>-x</code>是因為我們不需要去測試測試用的js</p>\n</li>\n<li><p><code>_mocha</code> 則是為搭配<code>istanbul</code>所使用的</p>\n</li>\n</ul>"},{"title":"做中學 Cycle.js（下）","date":"2016-01-31T16:00:00.000Z","_content":"\nModel-View-Intent & Component\n\n<!--more-->\n\n# Intro\n\n我們會希望寫出來的 code 能夠做成被複用的 Component，\n\n不過首先要來拆解一下越來越肥大的 main function。\n\n而 main 就可以被拆成 Model、View 、Intent。\n\n# Model View Intent\n\n先看一下上次 BMI example 的 main function\n\n\n```js\nfunction main(sources) {\n    const changeWeight$ = sources.DOM.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\n    const changeHeight$ = sources.DOM.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return {\n        DOM: state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    }\n}\n```\n\n\n\n這麼大一包看起來絕對不是好事。\n\n所以我們會把 main 分成三塊，\n\n分別是 Model, Intent, View\n\n- Intent: to listen to the user\n\n- Model: to process information \n\n- View: to output back to the user\n\n## Intent\n\n第一塊是「Intent」，\n\n簡單說就是 User 想對 UI 做什麼事情的 Intent，\n\n在這裡當然就是指雙方互動的部分：\n\n\n```js\n// input event 就是這個簡單 app 中 User 跟 UI 互動的部分\nconst changeWeight$ = sources.DOM.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\nconst changeHeight$ = sources.DOM.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n\n```\n\n```js\nfunction intent (DOMSource) {\n    const changeWeight$ = DOMSource.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\n    const changeHeight$ = DOMSource.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n    return {changeWeight$,changeHeight$};\n}\n```\n\n## Model\n\nmodel 則是處理資料流的部分：\n\n```js\nfunction model(changeWeight$, changeHeight$) {\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return state$;\n}\n```\n## View\n\n這裏則是依照 Model 中的資料去建 Virtual DOM tree\n\n> 我們不會把最後要 return 給 Driver 的東西也放在這\n\n> 僅放跟 UI 生成相關的而已\n\n```js\nfunction view(state$) {\n    const vtree$ = state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    return vtree$;\n}\n```\n\n## MVI\n\n然後我們的 main 變得簡潔許多，\n\n看起來只是 function 組合起來而已:\n\n\n```js\nfunction main(sources) {\n    const {changeWeight$,changeHeight$} = intent(sources.DOM);\n    const state$ = model(changeWeight$, changeHeight$);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$\n    }\n}\n```\n\n## Component\n\n那我們該如何減少重複的 Code 呢？\n\n當 UI 的操作越變越複雜以後，\n\n我們不會希望所有事情都能在一個 main 裡面解決，\n\n這時候我們可以把重複的部分抽出來變成 component。\n\negghead 課程裡面有更精簡的怎麼把 main 提煉成 component 的過程，\n\n不過核心精神蠻簡單的，就是 **props 也是 stream。**\n\n因為 props 是會跟著傳下來的「資料」，\n\n所以很自然的我們就會選擇處理資料的 model 下手。\n\n而 model 收到的 sources 是從 Drivers 來的，\n\n第一步就是先更動 drivers\n\n```js\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n    props: () => Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    })\n}\n```\n\n再來就是把 props 傳進去：\n\n```js\nconst state$ = model(upcomingValue$, sources.props);\n```\n\n> 記住： props 也是 Observable\n\n```js\nfunction model(upcomingValue$, props$) {\n    const initValue$ = props$.map(props => props.init).first();\n    const value$ = initValue$.concat(upcomingValue$);\n    const state$ = Rx.Observable.combineLatest(value$, props$, \n        (value, props) => {\n            return {\n                label: props.label,\n                unit: props.unit,\n                min: props.min,\n                max: props.max,\n                value: value\n            }\n        })\n    return state$\n}\n```\n\ninitial value 的 stream concat 新進來 value 的 stream，\n\n取代原本的 `startWith`\n\n下一步就是把 label 的名字和單位給 return 出來，\n\n變成一條 UI component 可以吃到的 state stream，\n\n再把對應的值塞進 view 裡面，就能得到我們想要的 vtree$ 了。\n\n## Using component with Main function\n\n我們現在每個 component 中都會有個 main function，\n\n事實上我們能把 main 改成這個 component 的名字，\n\n並且在更上層的 main 中去使用它，\n\n因為事實上他就是一個 function，在 functional programming 中，\n\n\"composable\" 可以說是最重要的概念之一。\n\n```js\nfunction LabelSlider(sources) {\n    const upcomingValue$ = intent(sources.DOM);\n    const state$ = model(upcomingValue$, sources.props);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$,\n\n    }\n}\n\nfunction main (sources) {\n    return LabelSlider(sources)\n}\n\n```\n\n而事實上，我們可以把 props 這件事移到 main 中去做\n\n```js\nfunction main (sources) {\n    const props$ = Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    })\n    return LabelSlider({DOM: sources.DOM, props: props$})\n}\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n}\n```\n\n## Multiple Components\n\n如果只有ㄧ個 component 的話，那 cycle.js 也太慘，\n\n我們當然是可以組合多個 components，\n\n只是該怎麼做呢？\n\n很簡單，先把 sinks 個別抽出來：\n\n```js\nfunction main (sources) {\n    const weightProps$ = Rx.Observable.of({\n        label: 'Weight',\n        unit: 'kg',\n        min: 30,\n        max: 220,\n        init: 70\n    })\n    const weightSinks$ = LabelSlider({DOM: sources.DOM, props: weightProps$})\n    \n    const heightProps$ = Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    });\n    const heightSinks$ = LabelSlider({DOM: sources.DOM, props: heightProps$})\n\n    const vtree$ = Rx.Observable.combineLatest(weightSinks$.DOM, heightSinks$.DOM, \n        (weightVtree, heightVtree) => \n        div([\n            weightVtree,\n            heightVtree\n            ]))\n    return {\n        DOM: vtree$\n    }\n}\n```\n\n這裏會發現一個問題，就是當我們移動其中一個 slider 時，\n\n另一個也會被影響 ，使用者的互動 => intent\n\n因為兩個的 class 都是 slider，\n\n而 intent 中監聽的又是 \".slider\" 底下的 input。\n\n其實我們在 LabelSlider 裡就可以讓兩條 stream 分流，\n\n因為我們傳進去的 `sources.DOM`，是可以只要選取 weight 或 height 就好：\n\n```js\nconst weightSinks$ = LabelSlider({\n        DOM: sources.DOM.select('.weight'),\n        props: weightProps$\n})\n```\n\n這裏做的事情就等於在 intent 裡面這樣：\n\n```js\nfunction intent(DOMSource) {\n    const change$ = DOMSource.select('.weight').select('.slider').events('input')\n        .map(ev => ev.target.value);\n    return change$;\n}\n```\n\n我們 **pre-select** 了在 DOM 上面 class name 為 '.weight'的 stream。\n\n# Isolate component\n\n- [Isolate](https://github.com/cyclejs/isolate)\n\n- 要隔離開每個 Component 如果都像上面那樣做應該會瘋掉，\n  所以 Cyclejs 其實提供給我們一個 helper function： isolate\n\n- 使用方法是傳入一個 Component function 當作 argument\n  再來會回傳一個 scoped 的 component function，\n  同樣吃 sources 進去，吐 sinks 出來\n\n- `isolate(dataflowComponent, scope)`：第二個參數是 optional 的，如同看到的一樣\n\n> 可能會有人覺得沒什麼差別，但如果單純使用 `isolate(dataflowComponent)`，\n\n> 那會是一個不純的 function ，因為每次呼叫都會 return 一個不一樣的 scoped component function\n\n> 但如果我們指定了 scope，那每次回來的就是同一個 scope 下的 component function\n\n> 真正的濃醇香！\n\n\n```js\nconst WeightSlider = isolate(LabelSlider, 'weight');\nconst weightSinks$ = WeightSlider({\n    DOM: sources.DOM,\n    props: weightProps$\n});\nconst weightVtree$ = weightSinks$.DOM;\n```\n\n如此一來又減少了一些 boiler plate\n\n## Final BMI\n\n目前缺的就是把 bmi 給算出來了，\n\n首先我們知道這個運算會放在 main 裡面，\n\n因為這就是這個簡單小 App 的主要**邏輯**。\n\n```js\nconst bmi$ = Rx.Observable.combineLatest(weightValue$, heightValue$, (weight, height) => {\n    const heightMeters = height * 0.01;\n    const bmi = Math.round(weight/(heightMeters*heightMeters))\n    return bmi;\n});\n```\n\n現在問題來了：我們要怎樣得到 weightValue$ 以及 heightValue$ 呢？\n\n從 sources 拿啊！\n\n概念很簡單，我們從 main 中拿到的 source，\n\n其實就是從前一層 component 中吐出來的 sinks，\n\n所以我們自然從前一層 component 中回傳的 sinks 下手：\n\n```js\nfunction LabelSlider(sources) {\n    const upcomingValue$ = intent(sources.DOM);\n    const state$ = model(upcomingValue$, sources.props);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$,\n        value: state$.map(state=> state.value)\n    }\n}\n```\n\n實作起來也是這麼簡單。\n\n最後我們回到 main 中，\n\n把 bmi$ 也加進去就成啦！\n\n```js\nconst vtree$ = Rx.Observable.combineLatest(bmi$, weightVtree$, heightVtree$, (bmi, weightVtree, heightVtree) =>\n        div([\n            weightVtree,\n            heightVtree,\n            h1(`BMI is: ${bmi}`)\n        ]))\n    return {\n        DOM: vtree$\n}\n```\n\n## Conclusion\n\n總計 21 回的課程算不上太長，很推薦有興趣的人去把它看完，\n\n儘管實際上要弄懂 Cycle.js 的概念的確需要花點時間，\n\n但學習 FRP 是值得的，畢竟我們就是在處理 dataflow + UI，\n\n再加上 pure function 好測試、composable 的特性，\n\n不由得感慨 Rx 寫起來真是爽。\n\n相較於 React，Cycle.js 當然更接近 functinoal programming，\n\n不論這個東西將來會不會用到產品上，\n\n純函數式的東西總會莫名的吸引我。\n\n> 如果要追求 fp，更應該要感受一下 [elm](http://elm-lang.org/)\n\n這一堂課的影片幾乎都在 jsfiddle 上完成，\n\n（不曉得作者為啥要這樣XD）\n\n我中間練習的程式碼有放在 [github](https://github.com/abalone0204/Learning-Cycle.js-By-Building-it) 上面，\n\n筆記等年假再來好好整理一番。\n\n----\n\n# 參考資料\n\n- [Official doc: Model View Intent](http://cycle.js.org/model-view-intent.html)\n\n- [How Functional Reactive Programming (FRP) is Changing the Face of Web Development](http://www.codemag.com/Article/1601071)\n\n","source":"_posts/circle-js-3.md","raw":"---\ntitle: 做中學 Cycle.js（下）\ndate: 2016/2/1\ntags: cycle.js observable\n---\n\nModel-View-Intent & Component\n\n<!--more-->\n\n# Intro\n\n我們會希望寫出來的 code 能夠做成被複用的 Component，\n\n不過首先要來拆解一下越來越肥大的 main function。\n\n而 main 就可以被拆成 Model、View 、Intent。\n\n# Model View Intent\n\n先看一下上次 BMI example 的 main function\n\n\n```js\nfunction main(sources) {\n    const changeWeight$ = sources.DOM.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\n    const changeHeight$ = sources.DOM.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return {\n        DOM: state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    }\n}\n```\n\n\n\n這麼大一包看起來絕對不是好事。\n\n所以我們會把 main 分成三塊，\n\n分別是 Model, Intent, View\n\n- Intent: to listen to the user\n\n- Model: to process information \n\n- View: to output back to the user\n\n## Intent\n\n第一塊是「Intent」，\n\n簡單說就是 User 想對 UI 做什麼事情的 Intent，\n\n在這裡當然就是指雙方互動的部分：\n\n\n```js\n// input event 就是這個簡單 app 中 User 跟 UI 互動的部分\nconst changeWeight$ = sources.DOM.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\nconst changeHeight$ = sources.DOM.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n\n```\n\n```js\nfunction intent (DOMSource) {\n    const changeWeight$ = DOMSource.select('.weight').events('input')\n        .map(ev => ev.target.value).startWith(70);\n    const changeHeight$ = DOMSource.select('.height').events('input')\n        .map(ev => ev.target.value).startWith(170);\n    return {changeWeight$,changeHeight$};\n}\n```\n\n## Model\n\nmodel 則是處理資料流的部分：\n\n```js\nfunction model(changeWeight$, changeHeight$) {\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return state$;\n}\n```\n## View\n\n這裏則是依照 Model 中的資料去建 Virtual DOM tree\n\n> 我們不會把最後要 return 給 Driver 的東西也放在這\n\n> 僅放跟 UI 生成相關的而已\n\n```js\nfunction view(state$) {\n    const vtree$ = state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    return vtree$;\n}\n```\n\n## MVI\n\n然後我們的 main 變得簡潔許多，\n\n看起來只是 function 組合起來而已:\n\n\n```js\nfunction main(sources) {\n    const {changeWeight$,changeHeight$} = intent(sources.DOM);\n    const state$ = model(changeWeight$, changeHeight$);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$\n    }\n}\n```\n\n## Component\n\n那我們該如何減少重複的 Code 呢？\n\n當 UI 的操作越變越複雜以後，\n\n我們不會希望所有事情都能在一個 main 裡面解決，\n\n這時候我們可以把重複的部分抽出來變成 component。\n\negghead 課程裡面有更精簡的怎麼把 main 提煉成 component 的過程，\n\n不過核心精神蠻簡單的，就是 **props 也是 stream。**\n\n因為 props 是會跟著傳下來的「資料」，\n\n所以很自然的我們就會選擇處理資料的 model 下手。\n\n而 model 收到的 sources 是從 Drivers 來的，\n\n第一步就是先更動 drivers\n\n```js\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n    props: () => Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    })\n}\n```\n\n再來就是把 props 傳進去：\n\n```js\nconst state$ = model(upcomingValue$, sources.props);\n```\n\n> 記住： props 也是 Observable\n\n```js\nfunction model(upcomingValue$, props$) {\n    const initValue$ = props$.map(props => props.init).first();\n    const value$ = initValue$.concat(upcomingValue$);\n    const state$ = Rx.Observable.combineLatest(value$, props$, \n        (value, props) => {\n            return {\n                label: props.label,\n                unit: props.unit,\n                min: props.min,\n                max: props.max,\n                value: value\n            }\n        })\n    return state$\n}\n```\n\ninitial value 的 stream concat 新進來 value 的 stream，\n\n取代原本的 `startWith`\n\n下一步就是把 label 的名字和單位給 return 出來，\n\n變成一條 UI component 可以吃到的 state stream，\n\n再把對應的值塞進 view 裡面，就能得到我們想要的 vtree$ 了。\n\n## Using component with Main function\n\n我們現在每個 component 中都會有個 main function，\n\n事實上我們能把 main 改成這個 component 的名字，\n\n並且在更上層的 main 中去使用它，\n\n因為事實上他就是一個 function，在 functional programming 中，\n\n\"composable\" 可以說是最重要的概念之一。\n\n```js\nfunction LabelSlider(sources) {\n    const upcomingValue$ = intent(sources.DOM);\n    const state$ = model(upcomingValue$, sources.props);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$,\n\n    }\n}\n\nfunction main (sources) {\n    return LabelSlider(sources)\n}\n\n```\n\n而事實上，我們可以把 props 這件事移到 main 中去做\n\n```js\nfunction main (sources) {\n    const props$ = Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    })\n    return LabelSlider({DOM: sources.DOM, props: props$})\n}\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n}\n```\n\n## Multiple Components\n\n如果只有ㄧ個 component 的話，那 cycle.js 也太慘，\n\n我們當然是可以組合多個 components，\n\n只是該怎麼做呢？\n\n很簡單，先把 sinks 個別抽出來：\n\n```js\nfunction main (sources) {\n    const weightProps$ = Rx.Observable.of({\n        label: 'Weight',\n        unit: 'kg',\n        min: 30,\n        max: 220,\n        init: 70\n    })\n    const weightSinks$ = LabelSlider({DOM: sources.DOM, props: weightProps$})\n    \n    const heightProps$ = Rx.Observable.of({\n        label: 'Height',\n        unit: 'cm',\n        min: 100,\n        max: 220,\n        init: 170\n    });\n    const heightSinks$ = LabelSlider({DOM: sources.DOM, props: heightProps$})\n\n    const vtree$ = Rx.Observable.combineLatest(weightSinks$.DOM, heightSinks$.DOM, \n        (weightVtree, heightVtree) => \n        div([\n            weightVtree,\n            heightVtree\n            ]))\n    return {\n        DOM: vtree$\n    }\n}\n```\n\n這裏會發現一個問題，就是當我們移動其中一個 slider 時，\n\n另一個也會被影響 ，使用者的互動 => intent\n\n因為兩個的 class 都是 slider，\n\n而 intent 中監聽的又是 \".slider\" 底下的 input。\n\n其實我們在 LabelSlider 裡就可以讓兩條 stream 分流，\n\n因為我們傳進去的 `sources.DOM`，是可以只要選取 weight 或 height 就好：\n\n```js\nconst weightSinks$ = LabelSlider({\n        DOM: sources.DOM.select('.weight'),\n        props: weightProps$\n})\n```\n\n這裏做的事情就等於在 intent 裡面這樣：\n\n```js\nfunction intent(DOMSource) {\n    const change$ = DOMSource.select('.weight').select('.slider').events('input')\n        .map(ev => ev.target.value);\n    return change$;\n}\n```\n\n我們 **pre-select** 了在 DOM 上面 class name 為 '.weight'的 stream。\n\n# Isolate component\n\n- [Isolate](https://github.com/cyclejs/isolate)\n\n- 要隔離開每個 Component 如果都像上面那樣做應該會瘋掉，\n  所以 Cyclejs 其實提供給我們一個 helper function： isolate\n\n- 使用方法是傳入一個 Component function 當作 argument\n  再來會回傳一個 scoped 的 component function，\n  同樣吃 sources 進去，吐 sinks 出來\n\n- `isolate(dataflowComponent, scope)`：第二個參數是 optional 的，如同看到的一樣\n\n> 可能會有人覺得沒什麼差別，但如果單純使用 `isolate(dataflowComponent)`，\n\n> 那會是一個不純的 function ，因為每次呼叫都會 return 一個不一樣的 scoped component function\n\n> 但如果我們指定了 scope，那每次回來的就是同一個 scope 下的 component function\n\n> 真正的濃醇香！\n\n\n```js\nconst WeightSlider = isolate(LabelSlider, 'weight');\nconst weightSinks$ = WeightSlider({\n    DOM: sources.DOM,\n    props: weightProps$\n});\nconst weightVtree$ = weightSinks$.DOM;\n```\n\n如此一來又減少了一些 boiler plate\n\n## Final BMI\n\n目前缺的就是把 bmi 給算出來了，\n\n首先我們知道這個運算會放在 main 裡面，\n\n因為這就是這個簡單小 App 的主要**邏輯**。\n\n```js\nconst bmi$ = Rx.Observable.combineLatest(weightValue$, heightValue$, (weight, height) => {\n    const heightMeters = height * 0.01;\n    const bmi = Math.round(weight/(heightMeters*heightMeters))\n    return bmi;\n});\n```\n\n現在問題來了：我們要怎樣得到 weightValue$ 以及 heightValue$ 呢？\n\n從 sources 拿啊！\n\n概念很簡單，我們從 main 中拿到的 source，\n\n其實就是從前一層 component 中吐出來的 sinks，\n\n所以我們自然從前一層 component 中回傳的 sinks 下手：\n\n```js\nfunction LabelSlider(sources) {\n    const upcomingValue$ = intent(sources.DOM);\n    const state$ = model(upcomingValue$, sources.props);\n    const vtree$ = view(state$);\n    return {\n        DOM: vtree$,\n        value: state$.map(state=> state.value)\n    }\n}\n```\n\n實作起來也是這麼簡單。\n\n最後我們回到 main 中，\n\n把 bmi$ 也加進去就成啦！\n\n```js\nconst vtree$ = Rx.Observable.combineLatest(bmi$, weightVtree$, heightVtree$, (bmi, weightVtree, heightVtree) =>\n        div([\n            weightVtree,\n            heightVtree,\n            h1(`BMI is: ${bmi}`)\n        ]))\n    return {\n        DOM: vtree$\n}\n```\n\n## Conclusion\n\n總計 21 回的課程算不上太長，很推薦有興趣的人去把它看完，\n\n儘管實際上要弄懂 Cycle.js 的概念的確需要花點時間，\n\n但學習 FRP 是值得的，畢竟我們就是在處理 dataflow + UI，\n\n再加上 pure function 好測試、composable 的特性，\n\n不由得感慨 Rx 寫起來真是爽。\n\n相較於 React，Cycle.js 當然更接近 functinoal programming，\n\n不論這個東西將來會不會用到產品上，\n\n純函數式的東西總會莫名的吸引我。\n\n> 如果要追求 fp，更應該要感受一下 [elm](http://elm-lang.org/)\n\n這一堂課的影片幾乎都在 jsfiddle 上完成，\n\n（不曉得作者為啥要這樣XD）\n\n我中間練習的程式碼有放在 [github](https://github.com/abalone0204/Learning-Cycle.js-By-Building-it) 上面，\n\n筆記等年假再來好好整理一番。\n\n----\n\n# 參考資料\n\n- [Official doc: Model View Intent](http://cycle.js.org/model-view-intent.html)\n\n- [How Functional Reactive Programming (FRP) is Changing the Face of Web Development](http://www.codemag.com/Article/1601071)\n\n","slug":"circle-js-3","published":1,"updated":"2016-04-24T13:03:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5j0001f606n1lrjlhe","content":"<p>Model-View-Intent &amp; Component</p>\n<a id=\"more\"></a>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>我們會希望寫出來的 code 能夠做成被複用的 Component，</p>\n<p>不過首先要來拆解一下越來越肥大的 main function。</p>\n<p>而 main 就可以被拆成 Model、View 、Intent。</p>\n<h1 id=\"Model-View-Intent\"><a href=\"#Model-View-Intent\" class=\"headerlink\" title=\"Model View Intent\"></a>Model View Intent</h1><p>先看一下上次 BMI example 的 main function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = sources.DOM.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = sources.DOM.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這麼大一包看起來絕對不是好事。</p>\n<p>所以我們會把 main 分成三塊，</p>\n<p>分別是 Model, Intent, View</p>\n<ul>\n<li><p>Intent: to listen to the user</p>\n</li>\n<li><p>Model: to process information </p>\n</li>\n<li><p>View: to output back to the user</p>\n</li>\n</ul>\n<h2 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h2><p>第一塊是「Intent」，</p>\n<p>簡單說就是 User 想對 UI 做什麼事情的 Intent，</p>\n<p>在這裡當然就是指雙方互動的部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// input event 就是這個簡單 app 中 User 跟 UI 互動的部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeWeight$ = sources.DOM.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> changeHeight$ = sources.DOM.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intent</span> (<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = DOMSource.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = DOMSource.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;changeWeight$,changeHeight$&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>model 則是處理資料流的部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">changeWeight$, changeHeight$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>這裏則是依照 Model 中的資料去建 Virtual DOM tree</p>\n<blockquote>\n<p>我們不會把最後要 return 給 Driver 的東西也放在這</p>\n<p>僅放跟 UI 生成相關的而已</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">view</span>(<span class=\"params\">state$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vtree$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MVI\"><a href=\"#MVI\" class=\"headerlink\" title=\"MVI\"></a>MVI</h2><p>然後我們的 main 變得簡潔許多，</p>\n<p>看起來只是 function 組合起來而已:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;changeWeight$,changeHeight$&#125; = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(changeWeight$, changeHeight$);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>那我們該如何減少重複的 Code 呢？</p>\n<p>當 UI 的操作越變越複雜以後，</p>\n<p>我們不會希望所有事情都能在一個 main 裡面解決，</p>\n<p>這時候我們可以把重複的部分抽出來變成 component。</p>\n<p>egghead 課程裡面有更精簡的怎麼把 main 提煉成 component 的過程，</p>\n<p>不過核心精神蠻簡單的，就是 <strong>props 也是 stream。</strong></p>\n<p>因為 props 是會跟著傳下來的「資料」，</p>\n<p>所以很自然的我們就會選擇處理資料的 model 下手。</p>\n<p>而 model 收到的 sources 是從 Drivers 來的，</p>\n<p>第一步就是先更動 drivers</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">    props: () =&gt; Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再來就是把 props 傳進去：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>記住： props 也是 Observable</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">upcomingValue$, props$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initValue$ = props$.map(props =&gt; props.init).first();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value$ = initValue$.concat(upcomingValue$);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(value$, props$, </span><br><span class=\"line\">        (value, props) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                label: props.label,</span><br><span class=\"line\">                unit: props.unit,</span><br><span class=\"line\">                min: props.min,</span><br><span class=\"line\">                max: props.max,</span><br><span class=\"line\">                value: value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state$</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initial value 的 stream concat 新進來 value 的 stream，</p>\n<p>取代原本的 <code>startWith</code></p>\n<p>下一步就是把 label 的名字和單位給 return 出來，</p>\n<p>變成一條 UI component 可以吃到的 state stream，</p>\n<p>再把對應的值塞進 view 裡面，就能得到我們想要的 vtree$ 了。</p>\n<h2 id=\"Using-component-with-Main-function\"><a href=\"#Using-component-with-Main-function\" class=\"headerlink\" title=\"Using component with Main function\"></a>Using component with Main function</h2><p>我們現在每個 component 中都會有個 main function，</p>\n<p>事實上我們能把 main 改成這個 component 的名字，</p>\n<p>並且在更上層的 main 中去使用它，</p>\n<p>因為事實上他就是一個 function，在 functional programming 中，</p>\n<p>“composable” 可以說是最重要的概念之一。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LabelSlider</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upcomingValue$ = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LabelSlider(sources)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而事實上，我們可以把 props 這件事移到 main 中去做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LabelSlider(&#123;DOM: sources.DOM, props: props$&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Multiple-Components\"><a href=\"#Multiple-Components\" class=\"headerlink\" title=\"Multiple Components\"></a>Multiple Components</h2><p>如果只有ㄧ個 component 的話，那 cycle.js 也太慘，</p>\n<p>我們當然是可以組合多個 components，</p>\n<p>只是該怎麼做呢？</p>\n<p>很簡單，先把 sinks 個別抽出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> weightProps$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Weight'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'kg'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">30</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">70</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> weightSinks$ = LabelSlider(&#123;DOM: sources.DOM, props: weightProps$&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightProps$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightSinks$ = LabelSlider(&#123;DOM: sources.DOM, props: heightProps$&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = Rx.Observable.combineLatest(weightSinks$.DOM, heightSinks$.DOM, </span><br><span class=\"line\">        (weightVtree, heightVtree) =&gt; </span><br><span class=\"line\">        div([</span><br><span class=\"line\">            weightVtree,</span><br><span class=\"line\">            heightVtree</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏會發現一個問題，就是當我們移動其中一個 slider 時，</p>\n<p>另一個也會被影響 ，使用者的互動 =&gt; intent</p>\n<p>因為兩個的 class 都是 slider，</p>\n<p>而 intent 中監聽的又是 “.slider” 底下的 input。</p>\n<p>其實我們在 LabelSlider 裡就可以讓兩條 stream 分流，</p>\n<p>因為我們傳進去的 <code>sources.DOM</code>，是可以只要選取 weight 或 height 就好：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> weightSinks$ = LabelSlider(&#123;</span><br><span class=\"line\">        DOM: sources.DOM.select(<span class=\"string\">'.weight'</span>),</span><br><span class=\"line\">        props: weightProps$</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>這裏做的事情就等於在 intent 裡面這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intent</span>(<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> change$ = DOMSource.select(<span class=\"string\">'.weight'</span>).select(<span class=\"string\">'.slider'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> change$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們 <strong>pre-select</strong> 了在 DOM 上面 class name 為 ‘.weight’的 stream。</p>\n<h1 id=\"Isolate-component\"><a href=\"#Isolate-component\" class=\"headerlink\" title=\"Isolate component\"></a>Isolate component</h1><ul>\n<li><p><a href=\"https://github.com/cyclejs/isolate\" target=\"_blank\" rel=\"external\">Isolate</a></p>\n</li>\n<li><p>要隔離開每個 Component 如果都像上面那樣做應該會瘋掉，<br>所以 Cyclejs 其實提供給我們一個 helper function： isolate</p>\n</li>\n<li><p>使用方法是傳入一個 Component function 當作 argument<br>再來會回傳一個 scoped 的 component function，<br>同樣吃 sources 進去，吐 sinks 出來</p>\n</li>\n<li><p><code>isolate(dataflowComponent, scope)</code>：第二個參數是 optional 的，如同看到的一樣</p>\n</li>\n</ul>\n<blockquote>\n<p>可能會有人覺得沒什麼差別，但如果單純使用 <code>isolate(dataflowComponent)</code>，</p>\n<p>那會是一個不純的 function ，因為每次呼叫都會 return 一個不一樣的 scoped component function</p>\n<p>但如果我們指定了 scope，那每次回來的就是同一個 scope 下的 component function</p>\n<p>真正的濃醇香！</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> WeightSlider = isolate(LabelSlider, <span class=\"string\">'weight'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> weightSinks$ = WeightSlider(&#123;</span><br><span class=\"line\">    DOM: sources.DOM,</span><br><span class=\"line\">    props: weightProps$</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> weightVtree$ = weightSinks$.DOM;</span><br></pre></td></tr></table></figure>\n<p>如此一來又減少了一些 boiler plate</p>\n<h2 id=\"Final-BMI\"><a href=\"#Final-BMI\" class=\"headerlink\" title=\"Final BMI\"></a>Final BMI</h2><p>目前缺的就是把 bmi 給算出來了，</p>\n<p>首先我們知道這個運算會放在 main 裡面，</p>\n<p>因為這就是這個簡單小 App 的主要<strong>邏輯</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bmi$ = Rx.Observable.combineLatest(weightValue$, heightValue$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightMeters = height * <span class=\"number\">0.01</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight/(heightMeters*heightMeters))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bmi;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>現在問題來了：我們要怎樣得到 weightValue$ 以及 heightValue$ 呢？</p>\n<p>從 sources 拿啊！</p>\n<p>概念很簡單，我們從 main 中拿到的 source，</p>\n<p>其實就是從前一層 component 中吐出來的 sinks，</p>\n<p>所以我們自然從前一層 component 中回傳的 sinks 下手：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LabelSlider</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upcomingValue$ = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$,</span><br><span class=\"line\">        value: state$.map(state=&gt; state.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>實作起來也是這麼簡單。</p>\n<p>最後我們回到 main 中，</p>\n<p>把 bmi$ 也加進去就成啦！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vtree$ = Rx.Observable.combineLatest(bmi$, weightVtree$, heightVtree$, (bmi, weightVtree, heightVtree) =&gt;</span><br><span class=\"line\">        div([</span><br><span class=\"line\">            weightVtree,</span><br><span class=\"line\">            heightVtree,</span><br><span class=\"line\">            h1(<span class=\"string\">`BMI is: <span class=\"subst\">$&#123;bmi&#125;</span>`</span>)</span><br><span class=\"line\">        ]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>總計 21 回的課程算不上太長，很推薦有興趣的人去把它看完，</p>\n<p>儘管實際上要弄懂 Cycle.js 的概念的確需要花點時間，</p>\n<p>但學習 FRP 是值得的，畢竟我們就是在處理 dataflow + UI，</p>\n<p>再加上 pure function 好測試、composable 的特性，</p>\n<p>不由得感慨 Rx 寫起來真是爽。</p>\n<p>相較於 React，Cycle.js 當然更接近 functinoal programming，</p>\n<p>不論這個東西將來會不會用到產品上，</p>\n<p>純函數式的東西總會莫名的吸引我。</p>\n<blockquote>\n<p>如果要追求 fp，更應該要感受一下 <a href=\"http://elm-lang.org/\" target=\"_blank\" rel=\"external\">elm</a></p>\n</blockquote>\n<p>這一堂課的影片幾乎都在 jsfiddle 上完成，</p>\n<p>（不曉得作者為啥要這樣XD）</p>\n<p>我中間練習的程式碼有放在 <a href=\"https://github.com/abalone0204/Learning-Cycle.js-By-Building-it\" target=\"_blank\" rel=\"external\">github</a> 上面，</p>\n<p>筆記等年假再來好好整理一番。</p>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://cycle.js.org/model-view-intent.html\" target=\"_blank\" rel=\"external\">Official doc: Model View Intent</a></p>\n</li>\n<li><p><a href=\"http://www.codemag.com/Article/1601071\" target=\"_blank\" rel=\"external\">How Functional Reactive Programming (FRP) is Changing the Face of Web Development</a></p>\n</li>\n</ul>\n","excerpt":"<p>Model-View-Intent &amp; Component</p>","more":"<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>我們會希望寫出來的 code 能夠做成被複用的 Component，</p>\n<p>不過首先要來拆解一下越來越肥大的 main function。</p>\n<p>而 main 就可以被拆成 Model、View 、Intent。</p>\n<h1 id=\"Model-View-Intent\"><a href=\"#Model-View-Intent\" class=\"headerlink\" title=\"Model View Intent\"></a>Model View Intent</h1><p>先看一下上次 BMI example 的 main function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = sources.DOM.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = sources.DOM.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這麼大一包看起來絕對不是好事。</p>\n<p>所以我們會把 main 分成三塊，</p>\n<p>分別是 Model, Intent, View</p>\n<ul>\n<li><p>Intent: to listen to the user</p>\n</li>\n<li><p>Model: to process information </p>\n</li>\n<li><p>View: to output back to the user</p>\n</li>\n</ul>\n<h2 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h2><p>第一塊是「Intent」，</p>\n<p>簡單說就是 User 想對 UI 做什麼事情的 Intent，</p>\n<p>在這裡當然就是指雙方互動的部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// input event 就是這個簡單 app 中 User 跟 UI 互動的部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeWeight$ = sources.DOM.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> changeHeight$ = sources.DOM.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intent</span> (<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = DOMSource.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">70</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = DOMSource.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value).startWith(<span class=\"number\">170</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;changeWeight$,changeHeight$&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>model 則是處理資料流的部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">changeWeight$, changeHeight$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>這裏則是依照 Model 中的資料去建 Virtual DOM tree</p>\n<blockquote>\n<p>我們不會把最後要 return 給 Driver 的東西也放在這</p>\n<p>僅放跟 UI 生成相關的而已</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">view</span>(<span class=\"params\">state$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vtree$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MVI\"><a href=\"#MVI\" class=\"headerlink\" title=\"MVI\"></a>MVI</h2><p>然後我們的 main 變得簡潔許多，</p>\n<p>看起來只是 function 組合起來而已:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;changeWeight$,changeHeight$&#125; = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(changeWeight$, changeHeight$);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>那我們該如何減少重複的 Code 呢？</p>\n<p>當 UI 的操作越變越複雜以後，</p>\n<p>我們不會希望所有事情都能在一個 main 裡面解決，</p>\n<p>這時候我們可以把重複的部分抽出來變成 component。</p>\n<p>egghead 課程裡面有更精簡的怎麼把 main 提煉成 component 的過程，</p>\n<p>不過核心精神蠻簡單的，就是 <strong>props 也是 stream。</strong></p>\n<p>因為 props 是會跟著傳下來的「資料」，</p>\n<p>所以很自然的我們就會選擇處理資料的 model 下手。</p>\n<p>而 model 收到的 sources 是從 Drivers 來的，</p>\n<p>第一步就是先更動 drivers</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">    props: () =&gt; Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再來就是把 props 傳進去：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>記住： props 也是 Observable</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">upcomingValue$, props$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initValue$ = props$.map(props =&gt; props.init).first();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value$ = initValue$.concat(upcomingValue$);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(value$, props$, </span><br><span class=\"line\">        (value, props) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                label: props.label,</span><br><span class=\"line\">                unit: props.unit,</span><br><span class=\"line\">                min: props.min,</span><br><span class=\"line\">                max: props.max,</span><br><span class=\"line\">                value: value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state$</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initial value 的 stream concat 新進來 value 的 stream，</p>\n<p>取代原本的 <code>startWith</code></p>\n<p>下一步就是把 label 的名字和單位給 return 出來，</p>\n<p>變成一條 UI component 可以吃到的 state stream，</p>\n<p>再把對應的值塞進 view 裡面，就能得到我們想要的 vtree$ 了。</p>\n<h2 id=\"Using-component-with-Main-function\"><a href=\"#Using-component-with-Main-function\" class=\"headerlink\" title=\"Using component with Main function\"></a>Using component with Main function</h2><p>我們現在每個 component 中都會有個 main function，</p>\n<p>事實上我們能把 main 改成這個 component 的名字，</p>\n<p>並且在更上層的 main 中去使用它，</p>\n<p>因為事實上他就是一個 function，在 functional programming 中，</p>\n<p>“composable” 可以說是最重要的概念之一。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LabelSlider</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upcomingValue$ = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LabelSlider(sources)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而事實上，我們可以把 props 這件事移到 main 中去做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LabelSlider(&#123;DOM: sources.DOM, props: props$&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Multiple-Components\"><a href=\"#Multiple-Components\" class=\"headerlink\" title=\"Multiple Components\"></a>Multiple Components</h2><p>如果只有ㄧ個 component 的話，那 cycle.js 也太慘，</p>\n<p>我們當然是可以組合多個 components，</p>\n<p>只是該怎麼做呢？</p>\n<p>很簡單，先把 sinks 個別抽出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span> (<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> weightProps$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Weight'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'kg'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">30</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">70</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> weightSinks$ = LabelSlider(&#123;DOM: sources.DOM, props: weightProps$&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightProps$ = Rx.Observable.of(&#123;</span><br><span class=\"line\">        label: <span class=\"string\">'Height'</span>,</span><br><span class=\"line\">        unit: <span class=\"string\">'cm'</span>,</span><br><span class=\"line\">        min: <span class=\"number\">100</span>,</span><br><span class=\"line\">        max: <span class=\"number\">220</span>,</span><br><span class=\"line\">        init: <span class=\"number\">170</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightSinks$ = LabelSlider(&#123;DOM: sources.DOM, props: heightProps$&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = Rx.Observable.combineLatest(weightSinks$.DOM, heightSinks$.DOM, </span><br><span class=\"line\">        (weightVtree, heightVtree) =&gt; </span><br><span class=\"line\">        div([</span><br><span class=\"line\">            weightVtree,</span><br><span class=\"line\">            heightVtree</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏會發現一個問題，就是當我們移動其中一個 slider 時，</p>\n<p>另一個也會被影響 ，使用者的互動 =&gt; intent</p>\n<p>因為兩個的 class 都是 slider，</p>\n<p>而 intent 中監聽的又是 “.slider” 底下的 input。</p>\n<p>其實我們在 LabelSlider 裡就可以讓兩條 stream 分流，</p>\n<p>因為我們傳進去的 <code>sources.DOM</code>，是可以只要選取 weight 或 height 就好：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> weightSinks$ = LabelSlider(&#123;</span><br><span class=\"line\">        DOM: sources.DOM.select(<span class=\"string\">'.weight'</span>),</span><br><span class=\"line\">        props: weightProps$</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>這裏做的事情就等於在 intent 裡面這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intent</span>(<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> change$ = DOMSource.select(<span class=\"string\">'.weight'</span>).select(<span class=\"string\">'.slider'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> change$;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們 <strong>pre-select</strong> 了在 DOM 上面 class name 為 ‘.weight’的 stream。</p>\n<h1 id=\"Isolate-component\"><a href=\"#Isolate-component\" class=\"headerlink\" title=\"Isolate component\"></a>Isolate component</h1><ul>\n<li><p><a href=\"https://github.com/cyclejs/isolate\">Isolate</a></p>\n</li>\n<li><p>要隔離開每個 Component 如果都像上面那樣做應該會瘋掉，<br>所以 Cyclejs 其實提供給我們一個 helper function： isolate</p>\n</li>\n<li><p>使用方法是傳入一個 Component function 當作 argument<br>再來會回傳一個 scoped 的 component function，<br>同樣吃 sources 進去，吐 sinks 出來</p>\n</li>\n<li><p><code>isolate(dataflowComponent, scope)</code>：第二個參數是 optional 的，如同看到的一樣</p>\n</li>\n</ul>\n<blockquote>\n<p>可能會有人覺得沒什麼差別，但如果單純使用 <code>isolate(dataflowComponent)</code>，</p>\n<p>那會是一個不純的 function ，因為每次呼叫都會 return 一個不一樣的 scoped component function</p>\n<p>但如果我們指定了 scope，那每次回來的就是同一個 scope 下的 component function</p>\n<p>真正的濃醇香！</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> WeightSlider = isolate(LabelSlider, <span class=\"string\">'weight'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> weightSinks$ = WeightSlider(&#123;</span><br><span class=\"line\">    DOM: sources.DOM,</span><br><span class=\"line\">    props: weightProps$</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> weightVtree$ = weightSinks$.DOM;</span><br></pre></td></tr></table></figure>\n<p>如此一來又減少了一些 boiler plate</p>\n<h2 id=\"Final-BMI\"><a href=\"#Final-BMI\" class=\"headerlink\" title=\"Final BMI\"></a>Final BMI</h2><p>目前缺的就是把 bmi 給算出來了，</p>\n<p>首先我們知道這個運算會放在 main 裡面，</p>\n<p>因為這就是這個簡單小 App 的主要<strong>邏輯</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bmi$ = Rx.Observable.combineLatest(weightValue$, heightValue$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> heightMeters = height * <span class=\"number\">0.01</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight/(heightMeters*heightMeters))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bmi;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>現在問題來了：我們要怎樣得到 weightValue$ 以及 heightValue$ 呢？</p>\n<p>從 sources 拿啊！</p>\n<p>概念很簡單，我們從 main 中拿到的 source，</p>\n<p>其實就是從前一層 component 中吐出來的 sinks，</p>\n<p>所以我們自然從前一層 component 中回傳的 sinks 下手：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LabelSlider</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upcomingValue$ = intent(sources.DOM);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = model(upcomingValue$, sources.props);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vtree$ = view(state$);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$,</span><br><span class=\"line\">        value: state$.map(state=&gt; state.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>實作起來也是這麼簡單。</p>\n<p>最後我們回到 main 中，</p>\n<p>把 bmi$ 也加進去就成啦！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vtree$ = Rx.Observable.combineLatest(bmi$, weightVtree$, heightVtree$, (bmi, weightVtree, heightVtree) =&gt;</span><br><span class=\"line\">        div([</span><br><span class=\"line\">            weightVtree,</span><br><span class=\"line\">            heightVtree,</span><br><span class=\"line\">            h1(<span class=\"string\">`BMI is: <span class=\"subst\">$&#123;bmi&#125;</span>`</span>)</span><br><span class=\"line\">        ]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: vtree$</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>總計 21 回的課程算不上太長，很推薦有興趣的人去把它看完，</p>\n<p>儘管實際上要弄懂 Cycle.js 的概念的確需要花點時間，</p>\n<p>但學習 FRP 是值得的，畢竟我們就是在處理 dataflow + UI，</p>\n<p>再加上 pure function 好測試、composable 的特性，</p>\n<p>不由得感慨 Rx 寫起來真是爽。</p>\n<p>相較於 React，Cycle.js 當然更接近 functinoal programming，</p>\n<p>不論這個東西將來會不會用到產品上，</p>\n<p>純函數式的東西總會莫名的吸引我。</p>\n<blockquote>\n<p>如果要追求 fp，更應該要感受一下 <a href=\"http://elm-lang.org/\">elm</a></p>\n</blockquote>\n<p>這一堂課的影片幾乎都在 jsfiddle 上完成，</p>\n<p>（不曉得作者為啥要這樣XD）</p>\n<p>我中間練習的程式碼有放在 <a href=\"https://github.com/abalone0204/Learning-Cycle.js-By-Building-it\">github</a> 上面，</p>\n<p>筆記等年假再來好好整理一番。</p>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://cycle.js.org/model-view-intent.html\">Official doc: Model View Intent</a></p>\n</li>\n<li><p><a href=\"http://www.codemag.com/Article/1601071\">How Functional Reactive Programming (FRP) is Changing the Face of Web Development</a></p>\n</li>\n</ul>"},{"title":"CSS Modules: 模組化 CSS","intro":"「如果你覺得 CSS 寫起來很亂的話，那代表你心中沒有架構。」","date":"2016-01-08T16:00:00.000Z","_content":"\n\n時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，\n\n這兩個東西有一點很一致：\n\n> 不管我們再怎麼討厭它，\n> 都還是得面對它、處理它。\n\n## 先說結論：\n\n- 如果討厭寫 CSS，就更應該用這種方式來寫\n\n- 我們應該用 module 化的方式來思考每個畫面上的東西\n\n- 讓需要「工人智慧」的地方減到最少\n\n> 「如果你覺得 CSS 很亂的話，那代表你心中沒有架構。」\n\n## Prerequisite\n\n- 會使用 webpack（幾乎只要會改 config 就行了）\n\n- 把 CSS 當一回事的人\n\n----\n\n## 為什麼需要去思考 CSS 的「架構」？\n\n曾幾何時，我也覺得 CSS 是一個他媽有夠亂七八糟的東西，\n\n直到不小心開始寫前端，我才發現前端不只是 JavaScript，\n\n從 CSS 到 html 的設計，都需要仔細去思考「架構」這件事，\n\n否則很容易讓技術債債台高築，到最後一發不可收拾。\n\n使用起來合邏輯的東西，不代表能夠用很「邏輯化」的方式寫出來，\n\n這正是 CSS 為什麼很容易亂七八糟的原因，\n\n因為我們常常需要去指定很多畫面上的細節（imperative）：\n\n>「欸欸，你這邊 width 要 300px，然後 margin 要設成 0 auto 才能置中」\n\n而不是直觀的用程式碼來宣告我們想要畫面長怎樣（declarative）：\n\n>「我們要一個看起來不錯的畫面」\n\n處理太多細節很容易出錯，像是螢幕或視窗大小不一樣 300px 就不一定 ok 了，\n\n而第二個 declarative way 似乎又太過理想化。\n\n而我認為折衷的方式就是 module 化 CSS，\n\n雖然也需要去實作 module 內的細節（imperative），\n\n但完成之後，就可以將這些 module 組裝起來，\n\n重複使用時就不需要去實做那麼多的細節，\n\n沒錯，我們又往 declarative programming更進一步了。\n\n現在看起來還是比較 high level 的概念，\n\n但我認為知道為什麼要這樣做很重要，\n\n稍後會在例子裏看到這樣做的好處是什麼。\n\n----\n\n在開始之前先講解一下兩個會推薦使用的工具，\n\n（你也可以依自己喜歡的配置啦！）\n\n分別是 Autoprefixer 以及 PostCSS。\n\n## Autoprefixer\n\n假如熟悉 postcss 和 autoprefixer 在幹嘛的人可以直接跳下一段了。\n\n其實我們平常在寫 CSS 的時候，為了處理跨瀏覽器的問題，\n\n常常需要寫很噁心的 prefix，\n\n就算有 SASS 的 include 語法，prefix 還是很噁心。\n\n看到 autoprefixer 出現真是讓人痛哭流涕的一件事，\n\n因為這代表以後有人會幫我們處理好 prefix，\n\n同時還會把太舊的 prefix 給移除掉。（像是 `border-radius`）\n\n這裏就直接來安裝進專案吧！\n\n`webpack.config.js`\n\n```js\nvar autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: [ autoprefixer({ browsers: ['last 2 versions'] }) ]\n}\n```\n\n唯一需要說明一下的就是可以指定我們要 support 到多老舊的 browser啦！\n\n就這樣，恭喜你！\n\n----\n\n## PostCSS\n\nPostCSS 是一個可以用 JavaScript plugins 將 style 轉成我們想要樣子的工具。\n\n（包括 lint, variables, mixins，以及好多東西......）\n\n確切一點來說， PostCSS 是一個 node.js 的 package，\n\n它可以將我們原本的 CSS 檔案轉成 AST(Abstraction Syntax Tree)，\n\n接著我們就可以藉由這個 API 來對 CSS 做事情，\n\n做完後再將它轉成 String，輸出成我們想要的 CSS，\n\n如果你懶得自己寫 plugin 來處理也不用擔心，\n\n現在已經有兩百多個 plugins 在那裡等你愛智求真了。\n\n我知道一定有人這時候在想：「那 SASS 呢？」\n\n沒錯，這兩者看起來似乎有點像，不過可以先看一下這篇文章：\n\n- [I'm Excited About PostCSS But I'm Scared to Leave Sass](http://davidtheclark.com/excited-about-postcss/)\n\n這裏則是值得一看的補充資料，其實官方的 readme 裏也都有寫：\n\n- [tut+的教學](http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889)\n\n- [一個前端用 node.js 來寫 CSS 的 preprocessor 也是很正常的事](http://nicolasgallagher.com/custom-css-preprocessing/)\n\n簡言之，PostCSS 跟 SASS 或 LESS 最不一樣的點是：\n\n「我們可以只採用我們想要的部分，並將其組裝起來。」\n\n這不就是 Compoasable 和模組化嗎？\n\n接著就來看看如何在 webpack 中設定 postcss，\n\n和使用各種 plugins。\n\n（坦白說這裏才是最頭痛的部分）\n\n使用 webpack 雖然簡單，但 config 的寫法太雜亂了，\n\n完成同樣一件事可以有好幾種方法，\n\n目前連官方文件上也沒有一個一致的 best practice。\n\n而[阮義峰的這篇教學](https://github.com/ruanyf/webpack-demos)是我目前看過寫的最清楚易懂的，\n\n從 entry 到跟 react 一起使用都有說到。\n\n----\n\n## CSS modules\n\n假如你直接跳過前兩個工具，其實也是 ok 啦！\n\n因為 webpack 的 css-loader 本身就內建 module 功能：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.[s]?css$/,\n            loader: 'style!css?modules!sass'\n        }]\n}\n```\n\n現在終於要來講一下 CSS modules 可以做到什麼事情。\n\n- 組合（Composition）\n\n我們能夠將 selector 組合在一起\n\n```css\n.className {\n  color: green;\n  background: red;\n}\n\n.otherClassName {\n  composes: className;\n  color: yellow;\n}\n```\n\n這裏要注意的是 composes 必須寫在其他 properties 的前面。\n\n而我們也可以 compose 多個 className：\n\n`composes: classNameA classNameB;`\n\n乍看之下跟 SASS 的 extend 有點像，\n\n但讓我們繼續看下去。\n\n## Dependencies\n\n假設我們現在有另一個檔案: style.css\n\n```css\n.className {\n    // some style\n}\n```\n\n```css\n.otherClassName {\n  composes: className from \"./style.css\";\n}\n```\n\n這給了我們很大的彈性，但小心不要 override properties，\n\n我覺得官方文件的這一句話寫得很棒：\n\n> Best if classes do a single thing and dependencies are hierarchic.\n\n這的確是我們在設計 CSS module 時，要常存心中的一句話。\n\n## Usage with preprocessors\n\n這裏主要是說要如何運用 preprocessor ，\n\n因為我們有時候還是需要 global 的 class。\n\n```less\n:global {\n  .global-class-name {\n    color: green;\n  }\n}\n```\n\n----\n\n## Rewrite with CSS Modules\n\n如果你是打從專案一開始就使用 css module ，\n\n那恭喜你！\n\n但「通常」現有的專案上都是用 SASS 來解決，\n\n這裡就以我工作上的專案來做例子。\n\n這裏要提一下我們後端用的是 Rails，\n\nRails 有個邪惡的好東西叫做 [Asset Pipeline](https://ihower.tw/rails4/assets-pipeline.html)，\n\n它會將靜態資源壓成一個檔案，減少 request 數。\n\n自動幫你做這件事聽起來很美好，\n\n但實際上因為 css 有 global scope 的問題，\n\n所以要怎麼確保每一頁只 load 到自己要的 style 呢？\n\n我的做法是每一頁會有一個專屬的 id，\n\n而命名的方式就是以 controller 加上 action 的名稱來命名。\n\n像是 posts_controller 的首頁，\n\n我就會給它專屬的一支檔案`posts_index.scss`\n\n```css\n#posts_index {\n    // some style\n}\n```\n\n這樣做的第一個好處很明顯，\n\n就是每個頁面裡的樣式就只會影響 id 裡的 scope。\n\n那說好的 module 呢？\n\n這裏就要用到 SASS 的 `extend`，\n\n假設 posts 和 show 都有一模一樣的 header，\n\n這時候我就會把 header 抽出來像下面這樣：\n\n```css\n%header {\n    header {\n        //  some style\n    }\n}\n```\n\n```css\nimport \"./header.scss\";\n\n#posts_index {\n    @extend %header;\n    // some style\n}\n```\n\n```css\nimport \"./header.scss\";\n\n#posts_show {\n    @extend %header;\n    // some style\n}\n```\n\n看起來挺方便，\n\n而且 Rails 的 routing 通常都是 restful 的，\n\n所以理論上這樣 CSS 的名字也有一定的規則可循，\n\n不會找不到檔案在哪裡。\n\n（就算有自動搜尋，也要知道下哪些關鍵字吧！）\n\n但，\n\n如果今天根據 user 的身份不同，\n\n會 render 不一樣的頁面呢？\n\n`#posts_index_super_user`？\n\n沒錯，問題又變得開始複雜起來，\n\n原因就出在它仍然是 global scope，\n\n而我試圖想從命名來解決這件事情，\n\n我常常在想：「啊！如果 CSS 是 local scope該有多好？」\n\n> A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.\n\n天啊！這解決了根本上的問題！\n\n假如能夠用 component-based 的方式來思考，\n\n讓 react component 從 css module 之間有對應的 name 來讀取樣式，\n\n那不就更棒了嗎？\n\n以後的資料夾結構會長這樣子：\n\n\n```\n├── components\n│   ├── ui-App\n│   │   ├── index.css\n│   │   └── index.js\n│   ├── ui-Avatar\n│   │   ├── index.css\n│   │   └── index.js\n│   └── ui-Profile\n│       ├── fonts\n│       │   └── opensans-regular-webfont.woff\n│       ├── images\n│       │   └── icon-user.png\n│       ├── index.css\n│       └── index.js\n└── styles\n    ├── base.css\n    └── theme.css\n```\n\n一個資料夾底下就放著 component.js, component.css，\n\n本身就是一個 micro-service，\n\n而我們要做的正是把這些 micro-service 給組裝起來變成一個頁面，\n\n最後再把這些頁面組裝起來變成 Application，相當舒服。\n\n不過要如何從現有的專案改寫呢？\n\n這裏就拿這個小小的部落格來舉例，\n\n因為我一開始是用[自己寫的 generator](https://github.com/abalone0204/generator-suku) 生成專案，\n\n（小打一下廣告，\n\n平常開發前端 component 就是在這個生成的專案上開發，\n\n弄好 react 和 hmr 之後，其實蠻方便的。）\n\n順帶一提，這是開始改寫前的樣子：\n\n```\nstylesheets/\n    ├── animations\n    │   ├── blink.scss\n    │   ├── loading.scss\n    │   └── spins.scss\n    ├── code_highlights\n    │   └── default.scss\n    ├── colors.scss\n    ├── components\n    │   ├── Nav\n    │   │   └── _icon_bar.css\n    │   └── common\n    │       └── loading.scss\n    ├── nav.scss\n    ├── pages\n    │   ├── about.scss\n    │   ├── home.scss\n    │   └── post.scss\n    └── style.scss\n```\n\n到最後 stylesheets 裡面只會剩下 global 的 css 檔案，\n\n像是 base.css 或是 theme.css 。\n\n首先第一步當然就是處理 global 的 css，\n\n思考的方向很簡單，就是哪些東西是每一個頁面都用得到的呢？\n\n所以我們把 body, a, h1~h5之類的東西先拔出來：\n\n```css\n:global {\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    body {\n        margin: 0;\n        letter-spacing: 1px;\n        color: #23263a;\n    }\n\n    * {\n        font-family: 'Noto Sans TC',Microsoft JhengHei,Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n        font-weight: 200;\n    }\n\n    .wf-loading {\n        * {\n            font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n        }\n\n        font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n    }\n}\n```\n\n接著來處理我們的 Nav bar，\n\n從這裡開始，就要進入 module 化的思考方式，\n\n一開始的時候你可能會覺得，欸？幹嘛這樣做？\n\n但越到後面你會發現一旦你習慣這樣思考，\n\n很多原本難解的問題都會迎刃而解，\n\n尤其是用組裝的方式來思考畫面的元件，\n\n能讓多狀態的呈現變得更簡單，\n\n也更能明白哪個部分該抽象化出來變成 base。\n\n先來看看這個 Nav 的例子。\n\n----\n\n預計會在以下幾個步驟循序漸進地去思考如何去寫 CSS Modules：\n\n- 讀一下舊有的 js, css\n\n- 最外層的 global selector\n\n- 沒有狀態改變的 local selector\n\n- 有狀態改變的 local selector\n\n### 1. 分析舊有的 js, css\n\n```jsx\nclass Container extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {show: false};\n        this.toggleIcon = this.toggleIcon.bind(this);\n    }\n    toggleIcon() {\n        this.setState({show: !this.state.show})\n    }\n    render() {\n        let {show} = this.state;\n        let className = show ? \"active\" : \"\";\n        return (\n            <nav>\n                <div id=\"logo\" className={className}/>\n                <div id=\"toggle_icon\" \n                     className={className}\n                     onClick={this.toggleIcon}\n                />\n                {\n                    show ? \n                    (\n                        <ul id=\"nav_list\" className={className}>\n                            <li><Link to=\"/about\">About</Link></li>\n                            <li><i className=\"fa fa-github-alt\"></i></li>\n                            <li><i className=\"fa fa-facebook\"></i></li>\n                        </ul>\n                    ) :\n                    null\n                }\n            </nav>\n            )\n    }\n}\n```\n\n可以看到我們的 toggle_icon 會隨著 show 的值而改變樣式，\n\n至於怎樣改變？就來看看原先架構下的 CSS 怎麼寫。\n\n\n```css\n@import \"./colors.scss\";\n@import \"./components/Nav/icon_bar\";\n\nnav {\n    position: fixed;\n    z-index: 5;\n    top: 0;\n    width: 100%;\n    color: white;\n    background: $deep_blue;\n    padding: 14px;\n    height: 28px;\n\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    #logo {\n        height: 28px;\n        width: 28px;\n        display: inline-block;\n        background-image: url(\"../img/icon.png\");\n        background-size: cover;\n        transition: transform 1s ease;\n\n        &:hover {\n            animation: shake;\n        }\n    }\n\n    #logo.active {\n        color: $sudo_green;\n    }\n\n    #toggle_icon {\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        right: 50px;\n        display: inline-block;\n\n        @extend %icon_bar;\n\n        cursor: pointer;\n\n        &:before,\n        &:after {\n            @extend %icon_bar;\n\n            content: '';\n            display: block;\n            position: absolute;\n        }\n\n        &:before {\n            margin-top: -10px;\n        }\n\n        &:after {\n            margin-top: 10px;\n        }\n    }\n\n    #toggle_icon.active {\n        background: transparent;\n        transition-property: background-color, transform;\n        transition-duration: .2s;\n\n        &:before, &:after {\n            background: $sudo_green;\n            transition-property: background-color, transform;\n            transition-duration: .2s;\n        }\n\n        &:before {\n            transform: rotate(45deg);\n            transform-origin: 0 0;\n        }\n\n        &:after {\n            transform: rotate(-45deg);\n            transform-origin: 0 5px;\n        }\n    }\n\n    #nav_list {\n        position: fixed;\n        height: 100vh;\n        background: #23263a;\n        text-align: center;\n        top: 56px;\n        left: 0;\n        display: block;\n        padding: 5px 15px;\n        margin: 0;\n\n        li {\n            display: block;\n            padding: 5px;\n        }\n    }\n}\n```\n\n----\n\n## 2. 最外層的 global selector\n\n如果你有寫過 react native 的話，\n\n就能體會到 style object 的好處，\n\n假如沒有，那現在這是好好來玩玩看的時候。\n\n我們從最外層開始拆解。\n\n（其實由內而外、由外而內各有好壞，但這可能又要寫另外一篇了）\n\n最外層的當然就是原生的 nav tag，\n\n這裏其實大可直接給他 global\n\n```css\n:global {\n    nav {\n        position: fixed;\n        z-index: 5;\n        top: 0;\n        width: 100%;\n        color: white;\n        background: #23263a;\n        padding: 14px;\n        height: 28px;\n    }\n}\n```\n\n----\n\n## 3. 沒有狀態改變的 local selector\n\n往下看到 logo ：\n\n```css\n.logo {\n    height: 28px;\n    width: 28px;\n    display: inline-block;\n    background-image: url(\"../../../static/img/icon.png\");\n    background-size: cover;\n}\n```\n\n要怎麼 import 它呢？\n\n首先別忘記在 webpack 的 config 裡開啟 css modules 的功能。\n\n再來只要這樣：\n\n```js\nimport style from \"./Nav.scss\";\n\nexport default class Nav extends Component {\n    render(){\n       return ( \n           ...\n           <div className={style.logo}/>\n           ...\n       )\n    }\n}\n```\n\n`style.logo` 讀到的就會是 webpack 幫我們生成的唯一字串，\n\n不用擔心會跟其他 class 重複，不相信的話 console.log 看一下，\n\n而跟以往相同，webpack 也會自動去幫我們寫入 style 到 head 裡面，\n\n對應到的 class name 就是剛剛生成的唯一字串。\n\n原理大概是這樣子。\n\n----\n\n### 4. 有狀態改變的 local selector\n\n再來則是為什麼我仍然使用 SASS 的原因： extend\n\n來看看 toggle_icon，他就是我們平常看到手機版的選單，\n\n按了之後會變形。\n\n先直接看它原本的 CSS 長怎樣：\n\n```css\n#toggle_icon {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 50px;\n    display: inline-block;\n    @extend %icon_bar;\n    cursor: pointer;\n    &:before,\n    &:after {\n        @extend %icon_bar;\n        content: '';\n        display: block;\n        position: absolute;\n    }\n    &:before {\n        margin-top: -10px;\n    }\n\n    &:after {\n        margin-top: 10px;\n    }\n}\n```\n\n> 我知道有一些 PostCSS 的插件可以解決，\n> 但這篇的重點在於模組化 CSS 的思考，所以就暫時先擱著啦！）\n\n因為那個 icon 有三個橫條，每個橫條的設定都差不多，\n\n所以我寫了一個 icon_bar 來被 extend。\n\n```css\n%icon_bar {\n    width: 30px;\n    height: 5px;\n    transition-property: background-color, transform;\n    transition-duration: .2s;\n}\n```\n\n接著則是重頭戲，\n\n對於畫面來說，這個 toggle_icon 會有兩個狀態，\n\n也就是說我們會有兩個 class 來處理它，\n\n但這兩個狀態又有許多共同點，怎麼辦呢？\n\n答案很簡單：\n\n> 抽出來當 base，讓兩個狀態的 class 去 composes 這個 base 就好啦！\n\n```css\n.toggle_icon_base {\n    @extend %icon_bar;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 50px;\n    display: inline-block;\n    cursor: pointer;\n    transition-property: background-color, transform;\n    transition-duration: .2s;\n    &:before,\n    &:after {\n        // pseudo-selector 是不能使用 composes 的\n        // 這就是為什麼我仍需要 @extend\n        @extend %icon_bar; \n        content: '';\n        display: block;\n        position: absolute;\n    }\n\n    &:before {\n        margin-top: -10px;\n    }\n\n    &:after {\n        margin-top: 10px;\n    }\n}\n```\n\n這裏抽出來的就是兩方都不會變的 properties，\n\n把 transition 放在 base 裏的好處就是能看到狀態之間的變化，\n\n這樣能實現一些簡單的動畫。\n\n接著就是把我們寫好的 base 組裝起來而已，\n\ntoggle_icon！附身合體！\n\n```css\n.toggle_icon {\n    composes: toggle_icon_base; // 記得要放在其他 properties 前面\n    background-color: white;\n\n    &:before,\n    &:after {\n        background-color: white;\n    }\n\n    &:hover {\n        background-color: #50e2c2;\n\n        &:before,\n        &:after {\n            background-color: #50e2c2;\n        }\n    }\n}\n\n```\n\n狀態的改變每個人都有自己喜好的方式，可以自行調整：\n\n```css\n.toggle_icon--active {\n    composes: toggle_icon_base;\n    background: transparent;\n    \n\n    &:before, &:after {\n        background: #50e2c2;\n        transition-property: background-color, transform;\n        transition-duration: .2s;\n    }\n\n    &:before {\n        transform: rotate(45deg);\n        transform-origin: 0 0;\n    }\n\n    &:after {\n        transform: rotate(-45deg);\n        transform-origin: 0 5px;\n    }\n}\n```\n\n而 component 中該如何對應呢？\n\n```jsx\nclass Nav extends Component {\n    render() {\n        return (\n        ...\n        <div className={show ? style[\"toggle_icon--active\"] : style.toggle_icon}\n              onClick={this.toggleIcon}\n        />\n        ...\n        );\n    }\n}\n```\n\n沒錯，就是這麼簡單而已。\n\n# 結論\n\n回頭看看重構後的 CSS，\n\n你會發現我們已經不是昔日把所有東西都丟在越來越多層的 class 裡面，\n\n而是變成扁平且一塊一塊的了，\n\n如果要重構的話我們也能夠將重複的部分抽出來。\n\n再來更棒的是除了 global 的地方，\n\n我們不用再擔心全域命名污染的問題，\n\n畢竟沒有 import 到的 class 就永遠不會發生作用啊！\n\n如果有寫錯的地方或是建議，很歡迎留言告訴我。\n\n我真的最討厭寫 CSS 了。\n\n## 參考連結：\n\n- [css module](https://github.com/css-modules/css-modules)\n\n- [autoprefixer](https://github.com/postcss/autoprefixer)\n\n- [Using webpack to build React components and their assets](http://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/)","source":"_posts/css-modules.md","raw":"---\ntitle: \"CSS Modules: 模組化 CSS\"\nintro: 「如果你覺得 CSS 寫起來很亂的話，那代表你心中沒有架構。」\ndate: 2016/1/9\ntags: CSS Modules, PostCSS\n---\n\n\n時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，\n\n這兩個東西有一點很一致：\n\n> 不管我們再怎麼討厭它，\n> 都還是得面對它、處理它。\n\n## 先說結論：\n\n- 如果討厭寫 CSS，就更應該用這種方式來寫\n\n- 我們應該用 module 化的方式來思考每個畫面上的東西\n\n- 讓需要「工人智慧」的地方減到最少\n\n> 「如果你覺得 CSS 很亂的話，那代表你心中沒有架構。」\n\n## Prerequisite\n\n- 會使用 webpack（幾乎只要會改 config 就行了）\n\n- 把 CSS 當一回事的人\n\n----\n\n## 為什麼需要去思考 CSS 的「架構」？\n\n曾幾何時，我也覺得 CSS 是一個他媽有夠亂七八糟的東西，\n\n直到不小心開始寫前端，我才發現前端不只是 JavaScript，\n\n從 CSS 到 html 的設計，都需要仔細去思考「架構」這件事，\n\n否則很容易讓技術債債台高築，到最後一發不可收拾。\n\n使用起來合邏輯的東西，不代表能夠用很「邏輯化」的方式寫出來，\n\n這正是 CSS 為什麼很容易亂七八糟的原因，\n\n因為我們常常需要去指定很多畫面上的細節（imperative）：\n\n>「欸欸，你這邊 width 要 300px，然後 margin 要設成 0 auto 才能置中」\n\n而不是直觀的用程式碼來宣告我們想要畫面長怎樣（declarative）：\n\n>「我們要一個看起來不錯的畫面」\n\n處理太多細節很容易出錯，像是螢幕或視窗大小不一樣 300px 就不一定 ok 了，\n\n而第二個 declarative way 似乎又太過理想化。\n\n而我認為折衷的方式就是 module 化 CSS，\n\n雖然也需要去實作 module 內的細節（imperative），\n\n但完成之後，就可以將這些 module 組裝起來，\n\n重複使用時就不需要去實做那麼多的細節，\n\n沒錯，我們又往 declarative programming更進一步了。\n\n現在看起來還是比較 high level 的概念，\n\n但我認為知道為什麼要這樣做很重要，\n\n稍後會在例子裏看到這樣做的好處是什麼。\n\n----\n\n在開始之前先講解一下兩個會推薦使用的工具，\n\n（你也可以依自己喜歡的配置啦！）\n\n分別是 Autoprefixer 以及 PostCSS。\n\n## Autoprefixer\n\n假如熟悉 postcss 和 autoprefixer 在幹嘛的人可以直接跳下一段了。\n\n其實我們平常在寫 CSS 的時候，為了處理跨瀏覽器的問題，\n\n常常需要寫很噁心的 prefix，\n\n就算有 SASS 的 include 語法，prefix 還是很噁心。\n\n看到 autoprefixer 出現真是讓人痛哭流涕的一件事，\n\n因為這代表以後有人會幫我們處理好 prefix，\n\n同時還會把太舊的 prefix 給移除掉。（像是 `border-radius`）\n\n這裏就直接來安裝進專案吧！\n\n`webpack.config.js`\n\n```js\nvar autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: [ autoprefixer({ browsers: ['last 2 versions'] }) ]\n}\n```\n\n唯一需要說明一下的就是可以指定我們要 support 到多老舊的 browser啦！\n\n就這樣，恭喜你！\n\n----\n\n## PostCSS\n\nPostCSS 是一個可以用 JavaScript plugins 將 style 轉成我們想要樣子的工具。\n\n（包括 lint, variables, mixins，以及好多東西......）\n\n確切一點來說， PostCSS 是一個 node.js 的 package，\n\n它可以將我們原本的 CSS 檔案轉成 AST(Abstraction Syntax Tree)，\n\n接著我們就可以藉由這個 API 來對 CSS 做事情，\n\n做完後再將它轉成 String，輸出成我們想要的 CSS，\n\n如果你懶得自己寫 plugin 來處理也不用擔心，\n\n現在已經有兩百多個 plugins 在那裡等你愛智求真了。\n\n我知道一定有人這時候在想：「那 SASS 呢？」\n\n沒錯，這兩者看起來似乎有點像，不過可以先看一下這篇文章：\n\n- [I'm Excited About PostCSS But I'm Scared to Leave Sass](http://davidtheclark.com/excited-about-postcss/)\n\n這裏則是值得一看的補充資料，其實官方的 readme 裏也都有寫：\n\n- [tut+的教學](http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889)\n\n- [一個前端用 node.js 來寫 CSS 的 preprocessor 也是很正常的事](http://nicolasgallagher.com/custom-css-preprocessing/)\n\n簡言之，PostCSS 跟 SASS 或 LESS 最不一樣的點是：\n\n「我們可以只採用我們想要的部分，並將其組裝起來。」\n\n這不就是 Compoasable 和模組化嗎？\n\n接著就來看看如何在 webpack 中設定 postcss，\n\n和使用各種 plugins。\n\n（坦白說這裏才是最頭痛的部分）\n\n使用 webpack 雖然簡單，但 config 的寫法太雜亂了，\n\n完成同樣一件事可以有好幾種方法，\n\n目前連官方文件上也沒有一個一致的 best practice。\n\n而[阮義峰的這篇教學](https://github.com/ruanyf/webpack-demos)是我目前看過寫的最清楚易懂的，\n\n從 entry 到跟 react 一起使用都有說到。\n\n----\n\n## CSS modules\n\n假如你直接跳過前兩個工具，其實也是 ok 啦！\n\n因為 webpack 的 css-loader 本身就內建 module 功能：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.[s]?css$/,\n            loader: 'style!css?modules!sass'\n        }]\n}\n```\n\n現在終於要來講一下 CSS modules 可以做到什麼事情。\n\n- 組合（Composition）\n\n我們能夠將 selector 組合在一起\n\n```css\n.className {\n  color: green;\n  background: red;\n}\n\n.otherClassName {\n  composes: className;\n  color: yellow;\n}\n```\n\n這裏要注意的是 composes 必須寫在其他 properties 的前面。\n\n而我們也可以 compose 多個 className：\n\n`composes: classNameA classNameB;`\n\n乍看之下跟 SASS 的 extend 有點像，\n\n但讓我們繼續看下去。\n\n## Dependencies\n\n假設我們現在有另一個檔案: style.css\n\n```css\n.className {\n    // some style\n}\n```\n\n```css\n.otherClassName {\n  composes: className from \"./style.css\";\n}\n```\n\n這給了我們很大的彈性，但小心不要 override properties，\n\n我覺得官方文件的這一句話寫得很棒：\n\n> Best if classes do a single thing and dependencies are hierarchic.\n\n這的確是我們在設計 CSS module 時，要常存心中的一句話。\n\n## Usage with preprocessors\n\n這裏主要是說要如何運用 preprocessor ，\n\n因為我們有時候還是需要 global 的 class。\n\n```less\n:global {\n  .global-class-name {\n    color: green;\n  }\n}\n```\n\n----\n\n## Rewrite with CSS Modules\n\n如果你是打從專案一開始就使用 css module ，\n\n那恭喜你！\n\n但「通常」現有的專案上都是用 SASS 來解決，\n\n這裡就以我工作上的專案來做例子。\n\n這裏要提一下我們後端用的是 Rails，\n\nRails 有個邪惡的好東西叫做 [Asset Pipeline](https://ihower.tw/rails4/assets-pipeline.html)，\n\n它會將靜態資源壓成一個檔案，減少 request 數。\n\n自動幫你做這件事聽起來很美好，\n\n但實際上因為 css 有 global scope 的問題，\n\n所以要怎麼確保每一頁只 load 到自己要的 style 呢？\n\n我的做法是每一頁會有一個專屬的 id，\n\n而命名的方式就是以 controller 加上 action 的名稱來命名。\n\n像是 posts_controller 的首頁，\n\n我就會給它專屬的一支檔案`posts_index.scss`\n\n```css\n#posts_index {\n    // some style\n}\n```\n\n這樣做的第一個好處很明顯，\n\n就是每個頁面裡的樣式就只會影響 id 裡的 scope。\n\n那說好的 module 呢？\n\n這裏就要用到 SASS 的 `extend`，\n\n假設 posts 和 show 都有一模一樣的 header，\n\n這時候我就會把 header 抽出來像下面這樣：\n\n```css\n%header {\n    header {\n        //  some style\n    }\n}\n```\n\n```css\nimport \"./header.scss\";\n\n#posts_index {\n    @extend %header;\n    // some style\n}\n```\n\n```css\nimport \"./header.scss\";\n\n#posts_show {\n    @extend %header;\n    // some style\n}\n```\n\n看起來挺方便，\n\n而且 Rails 的 routing 通常都是 restful 的，\n\n所以理論上這樣 CSS 的名字也有一定的規則可循，\n\n不會找不到檔案在哪裡。\n\n（就算有自動搜尋，也要知道下哪些關鍵字吧！）\n\n但，\n\n如果今天根據 user 的身份不同，\n\n會 render 不一樣的頁面呢？\n\n`#posts_index_super_user`？\n\n沒錯，問題又變得開始複雜起來，\n\n原因就出在它仍然是 global scope，\n\n而我試圖想從命名來解決這件事情，\n\n我常常在想：「啊！如果 CSS 是 local scope該有多好？」\n\n> A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.\n\n天啊！這解決了根本上的問題！\n\n假如能夠用 component-based 的方式來思考，\n\n讓 react component 從 css module 之間有對應的 name 來讀取樣式，\n\n那不就更棒了嗎？\n\n以後的資料夾結構會長這樣子：\n\n\n```\n├── components\n│   ├── ui-App\n│   │   ├── index.css\n│   │   └── index.js\n│   ├── ui-Avatar\n│   │   ├── index.css\n│   │   └── index.js\n│   └── ui-Profile\n│       ├── fonts\n│       │   └── opensans-regular-webfont.woff\n│       ├── images\n│       │   └── icon-user.png\n│       ├── index.css\n│       └── index.js\n└── styles\n    ├── base.css\n    └── theme.css\n```\n\n一個資料夾底下就放著 component.js, component.css，\n\n本身就是一個 micro-service，\n\n而我們要做的正是把這些 micro-service 給組裝起來變成一個頁面，\n\n最後再把這些頁面組裝起來變成 Application，相當舒服。\n\n不過要如何從現有的專案改寫呢？\n\n這裏就拿這個小小的部落格來舉例，\n\n因為我一開始是用[自己寫的 generator](https://github.com/abalone0204/generator-suku) 生成專案，\n\n（小打一下廣告，\n\n平常開發前端 component 就是在這個生成的專案上開發，\n\n弄好 react 和 hmr 之後，其實蠻方便的。）\n\n順帶一提，這是開始改寫前的樣子：\n\n```\nstylesheets/\n    ├── animations\n    │   ├── blink.scss\n    │   ├── loading.scss\n    │   └── spins.scss\n    ├── code_highlights\n    │   └── default.scss\n    ├── colors.scss\n    ├── components\n    │   ├── Nav\n    │   │   └── _icon_bar.css\n    │   └── common\n    │       └── loading.scss\n    ├── nav.scss\n    ├── pages\n    │   ├── about.scss\n    │   ├── home.scss\n    │   └── post.scss\n    └── style.scss\n```\n\n到最後 stylesheets 裡面只會剩下 global 的 css 檔案，\n\n像是 base.css 或是 theme.css 。\n\n首先第一步當然就是處理 global 的 css，\n\n思考的方向很簡單，就是哪些東西是每一個頁面都用得到的呢？\n\n所以我們把 body, a, h1~h5之類的東西先拔出來：\n\n```css\n:global {\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    body {\n        margin: 0;\n        letter-spacing: 1px;\n        color: #23263a;\n    }\n\n    * {\n        font-family: 'Noto Sans TC',Microsoft JhengHei,Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n        font-weight: 200;\n    }\n\n    .wf-loading {\n        * {\n            font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n        }\n\n        font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;\n    }\n}\n```\n\n接著來處理我們的 Nav bar，\n\n從這裡開始，就要進入 module 化的思考方式，\n\n一開始的時候你可能會覺得，欸？幹嘛這樣做？\n\n但越到後面你會發現一旦你習慣這樣思考，\n\n很多原本難解的問題都會迎刃而解，\n\n尤其是用組裝的方式來思考畫面的元件，\n\n能讓多狀態的呈現變得更簡單，\n\n也更能明白哪個部分該抽象化出來變成 base。\n\n先來看看這個 Nav 的例子。\n\n----\n\n預計會在以下幾個步驟循序漸進地去思考如何去寫 CSS Modules：\n\n- 讀一下舊有的 js, css\n\n- 最外層的 global selector\n\n- 沒有狀態改變的 local selector\n\n- 有狀態改變的 local selector\n\n### 1. 分析舊有的 js, css\n\n```jsx\nclass Container extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {show: false};\n        this.toggleIcon = this.toggleIcon.bind(this);\n    }\n    toggleIcon() {\n        this.setState({show: !this.state.show})\n    }\n    render() {\n        let {show} = this.state;\n        let className = show ? \"active\" : \"\";\n        return (\n            <nav>\n                <div id=\"logo\" className={className}/>\n                <div id=\"toggle_icon\" \n                     className={className}\n                     onClick={this.toggleIcon}\n                />\n                {\n                    show ? \n                    (\n                        <ul id=\"nav_list\" className={className}>\n                            <li><Link to=\"/about\">About</Link></li>\n                            <li><i className=\"fa fa-github-alt\"></i></li>\n                            <li><i className=\"fa fa-facebook\"></i></li>\n                        </ul>\n                    ) :\n                    null\n                }\n            </nav>\n            )\n    }\n}\n```\n\n可以看到我們的 toggle_icon 會隨著 show 的值而改變樣式，\n\n至於怎樣改變？就來看看原先架構下的 CSS 怎麼寫。\n\n\n```css\n@import \"./colors.scss\";\n@import \"./components/Nav/icon_bar\";\n\nnav {\n    position: fixed;\n    z-index: 5;\n    top: 0;\n    width: 100%;\n    color: white;\n    background: $deep_blue;\n    padding: 14px;\n    height: 28px;\n\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    #logo {\n        height: 28px;\n        width: 28px;\n        display: inline-block;\n        background-image: url(\"../img/icon.png\");\n        background-size: cover;\n        transition: transform 1s ease;\n\n        &:hover {\n            animation: shake;\n        }\n    }\n\n    #logo.active {\n        color: $sudo_green;\n    }\n\n    #toggle_icon {\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        right: 50px;\n        display: inline-block;\n\n        @extend %icon_bar;\n\n        cursor: pointer;\n\n        &:before,\n        &:after {\n            @extend %icon_bar;\n\n            content: '';\n            display: block;\n            position: absolute;\n        }\n\n        &:before {\n            margin-top: -10px;\n        }\n\n        &:after {\n            margin-top: 10px;\n        }\n    }\n\n    #toggle_icon.active {\n        background: transparent;\n        transition-property: background-color, transform;\n        transition-duration: .2s;\n\n        &:before, &:after {\n            background: $sudo_green;\n            transition-property: background-color, transform;\n            transition-duration: .2s;\n        }\n\n        &:before {\n            transform: rotate(45deg);\n            transform-origin: 0 0;\n        }\n\n        &:after {\n            transform: rotate(-45deg);\n            transform-origin: 0 5px;\n        }\n    }\n\n    #nav_list {\n        position: fixed;\n        height: 100vh;\n        background: #23263a;\n        text-align: center;\n        top: 56px;\n        left: 0;\n        display: block;\n        padding: 5px 15px;\n        margin: 0;\n\n        li {\n            display: block;\n            padding: 5px;\n        }\n    }\n}\n```\n\n----\n\n## 2. 最外層的 global selector\n\n如果你有寫過 react native 的話，\n\n就能體會到 style object 的好處，\n\n假如沒有，那現在這是好好來玩玩看的時候。\n\n我們從最外層開始拆解。\n\n（其實由內而外、由外而內各有好壞，但這可能又要寫另外一篇了）\n\n最外層的當然就是原生的 nav tag，\n\n這裏其實大可直接給他 global\n\n```css\n:global {\n    nav {\n        position: fixed;\n        z-index: 5;\n        top: 0;\n        width: 100%;\n        color: white;\n        background: #23263a;\n        padding: 14px;\n        height: 28px;\n    }\n}\n```\n\n----\n\n## 3. 沒有狀態改變的 local selector\n\n往下看到 logo ：\n\n```css\n.logo {\n    height: 28px;\n    width: 28px;\n    display: inline-block;\n    background-image: url(\"../../../static/img/icon.png\");\n    background-size: cover;\n}\n```\n\n要怎麼 import 它呢？\n\n首先別忘記在 webpack 的 config 裡開啟 css modules 的功能。\n\n再來只要這樣：\n\n```js\nimport style from \"./Nav.scss\";\n\nexport default class Nav extends Component {\n    render(){\n       return ( \n           ...\n           <div className={style.logo}/>\n           ...\n       )\n    }\n}\n```\n\n`style.logo` 讀到的就會是 webpack 幫我們生成的唯一字串，\n\n不用擔心會跟其他 class 重複，不相信的話 console.log 看一下，\n\n而跟以往相同，webpack 也會自動去幫我們寫入 style 到 head 裡面，\n\n對應到的 class name 就是剛剛生成的唯一字串。\n\n原理大概是這樣子。\n\n----\n\n### 4. 有狀態改變的 local selector\n\n再來則是為什麼我仍然使用 SASS 的原因： extend\n\n來看看 toggle_icon，他就是我們平常看到手機版的選單，\n\n按了之後會變形。\n\n先直接看它原本的 CSS 長怎樣：\n\n```css\n#toggle_icon {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 50px;\n    display: inline-block;\n    @extend %icon_bar;\n    cursor: pointer;\n    &:before,\n    &:after {\n        @extend %icon_bar;\n        content: '';\n        display: block;\n        position: absolute;\n    }\n    &:before {\n        margin-top: -10px;\n    }\n\n    &:after {\n        margin-top: 10px;\n    }\n}\n```\n\n> 我知道有一些 PostCSS 的插件可以解決，\n> 但這篇的重點在於模組化 CSS 的思考，所以就暫時先擱著啦！）\n\n因為那個 icon 有三個橫條，每個橫條的設定都差不多，\n\n所以我寫了一個 icon_bar 來被 extend。\n\n```css\n%icon_bar {\n    width: 30px;\n    height: 5px;\n    transition-property: background-color, transform;\n    transition-duration: .2s;\n}\n```\n\n接著則是重頭戲，\n\n對於畫面來說，這個 toggle_icon 會有兩個狀態，\n\n也就是說我們會有兩個 class 來處理它，\n\n但這兩個狀態又有許多共同點，怎麼辦呢？\n\n答案很簡單：\n\n> 抽出來當 base，讓兩個狀態的 class 去 composes 這個 base 就好啦！\n\n```css\n.toggle_icon_base {\n    @extend %icon_bar;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 50px;\n    display: inline-block;\n    cursor: pointer;\n    transition-property: background-color, transform;\n    transition-duration: .2s;\n    &:before,\n    &:after {\n        // pseudo-selector 是不能使用 composes 的\n        // 這就是為什麼我仍需要 @extend\n        @extend %icon_bar; \n        content: '';\n        display: block;\n        position: absolute;\n    }\n\n    &:before {\n        margin-top: -10px;\n    }\n\n    &:after {\n        margin-top: 10px;\n    }\n}\n```\n\n這裏抽出來的就是兩方都不會變的 properties，\n\n把 transition 放在 base 裏的好處就是能看到狀態之間的變化，\n\n這樣能實現一些簡單的動畫。\n\n接著就是把我們寫好的 base 組裝起來而已，\n\ntoggle_icon！附身合體！\n\n```css\n.toggle_icon {\n    composes: toggle_icon_base; // 記得要放在其他 properties 前面\n    background-color: white;\n\n    &:before,\n    &:after {\n        background-color: white;\n    }\n\n    &:hover {\n        background-color: #50e2c2;\n\n        &:before,\n        &:after {\n            background-color: #50e2c2;\n        }\n    }\n}\n\n```\n\n狀態的改變每個人都有自己喜好的方式，可以自行調整：\n\n```css\n.toggle_icon--active {\n    composes: toggle_icon_base;\n    background: transparent;\n    \n\n    &:before, &:after {\n        background: #50e2c2;\n        transition-property: background-color, transform;\n        transition-duration: .2s;\n    }\n\n    &:before {\n        transform: rotate(45deg);\n        transform-origin: 0 0;\n    }\n\n    &:after {\n        transform: rotate(-45deg);\n        transform-origin: 0 5px;\n    }\n}\n```\n\n而 component 中該如何對應呢？\n\n```jsx\nclass Nav extends Component {\n    render() {\n        return (\n        ...\n        <div className={show ? style[\"toggle_icon--active\"] : style.toggle_icon}\n              onClick={this.toggleIcon}\n        />\n        ...\n        );\n    }\n}\n```\n\n沒錯，就是這麼簡單而已。\n\n# 結論\n\n回頭看看重構後的 CSS，\n\n你會發現我們已經不是昔日把所有東西都丟在越來越多層的 class 裡面，\n\n而是變成扁平且一塊一塊的了，\n\n如果要重構的話我們也能夠將重複的部分抽出來。\n\n再來更棒的是除了 global 的地方，\n\n我們不用再擔心全域命名污染的問題，\n\n畢竟沒有 import 到的 class 就永遠不會發生作用啊！\n\n如果有寫錯的地方或是建議，很歡迎留言告訴我。\n\n我真的最討厭寫 CSS 了。\n\n## 參考連結：\n\n- [css module](https://github.com/css-modules/css-modules)\n\n- [autoprefixer](https://github.com/postcss/autoprefixer)\n\n- [Using webpack to build React components and their assets](http://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/)","slug":"css-modules","published":1,"updated":"2016-04-24T12:55:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5p0003f606un7m4rdf","content":"<p>時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，</p>\n<p>這兩個東西有一點很一致：</p>\n<blockquote>\n<p>不管我們再怎麼討厭它，<br>都還是得面對它、處理它。</p>\n</blockquote>\n<h2 id=\"先說結論：\"><a href=\"#先說結論：\" class=\"headerlink\" title=\"先說結論：\"></a>先說結論：</h2><ul>\n<li><p>如果討厭寫 CSS，就更應該用這種方式來寫</p>\n</li>\n<li><p>我們應該用 module 化的方式來思考每個畫面上的東西</p>\n</li>\n<li><p>讓需要「工人智慧」的地方減到最少</p>\n</li>\n</ul>\n<blockquote>\n<p>「如果你覺得 CSS 很亂的話，那代表你心中沒有架構。」</p>\n</blockquote>\n<h2 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h2><ul>\n<li><p>會使用 webpack（幾乎只要會改 config 就行了）</p>\n</li>\n<li><p>把 CSS 當一回事的人</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"為什麼需要去思考-CSS-的「架構」？\"><a href=\"#為什麼需要去思考-CSS-的「架構」？\" class=\"headerlink\" title=\"為什麼需要去思考 CSS 的「架構」？\"></a>為什麼需要去思考 CSS 的「架構」？</h2><p>曾幾何時，我也覺得 CSS 是一個他媽有夠亂七八糟的東西，</p>\n<p>直到不小心開始寫前端，我才發現前端不只是 JavaScript，</p>\n<p>從 CSS 到 html 的設計，都需要仔細去思考「架構」這件事，</p>\n<p>否則很容易讓技術債債台高築，到最後一發不可收拾。</p>\n<p>使用起來合邏輯的東西，不代表能夠用很「邏輯化」的方式寫出來，</p>\n<p>這正是 CSS 為什麼很容易亂七八糟的原因，</p>\n<p>因為我們常常需要去指定很多畫面上的細節（imperative）：</p>\n<blockquote>\n<p>「欸欸，你這邊 width 要 300px，然後 margin 要設成 0 auto 才能置中」</p>\n</blockquote>\n<p>而不是直觀的用程式碼來宣告我們想要畫面長怎樣（declarative）：</p>\n<blockquote>\n<p>「我們要一個看起來不錯的畫面」</p>\n</blockquote>\n<p>處理太多細節很容易出錯，像是螢幕或視窗大小不一樣 300px 就不一定 ok 了，</p>\n<p>而第二個 declarative way 似乎又太過理想化。</p>\n<p>而我認為折衷的方式就是 module 化 CSS，</p>\n<p>雖然也需要去實作 module 內的細節（imperative），</p>\n<p>但完成之後，就可以將這些 module 組裝起來，</p>\n<p>重複使用時就不需要去實做那麼多的細節，</p>\n<p>沒錯，我們又往 declarative programming更進一步了。</p>\n<p>現在看起來還是比較 high level 的概念，</p>\n<p>但我認為知道為什麼要這樣做很重要，</p>\n<p>稍後會在例子裏看到這樣做的好處是什麼。</p>\n<hr>\n<p>在開始之前先講解一下兩個會推薦使用的工具，</p>\n<p>（你也可以依自己喜歡的配置啦！）</p>\n<p>分別是 Autoprefixer 以及 PostCSS。</p>\n<h2 id=\"Autoprefixer\"><a href=\"#Autoprefixer\" class=\"headerlink\" title=\"Autoprefixer\"></a>Autoprefixer</h2><p>假如熟悉 postcss 和 autoprefixer 在幹嘛的人可以直接跳下一段了。</p>\n<p>其實我們平常在寫 CSS 的時候，為了處理跨瀏覽器的問題，</p>\n<p>常常需要寫很噁心的 prefix，</p>\n<p>就算有 SASS 的 include 語法，prefix 還是很噁心。</p>\n<p>看到 autoprefixer 出現真是讓人痛哭流涕的一件事，</p>\n<p>因為這代表以後有人會幫我們處理好 prefix，</p>\n<p>同時還會把太舊的 prefix 給移除掉。（像是 <code>border-radius</code>）</p>\n<p>這裏就直接來安裝進專案吧！</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:   <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!postcss-loader\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    postcss: [ autoprefixer(&#123; browsers: [<span class=\"string\">'last 2 versions'</span>] &#125;) ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一需要說明一下的就是可以指定我們要 support 到多老舊的 browser啦！</p>\n<p>就這樣，恭喜你！</p>\n<hr>\n<h2 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h2><p>PostCSS 是一個可以用 JavaScript plugins 將 style 轉成我們想要樣子的工具。</p>\n<p>（包括 lint, variables, mixins，以及好多東西……）</p>\n<p>確切一點來說， PostCSS 是一個 node.js 的 package，</p>\n<p>它可以將我們原本的 CSS 檔案轉成 AST(Abstraction Syntax Tree)，</p>\n<p>接著我們就可以藉由這個 API 來對 CSS 做事情，</p>\n<p>做完後再將它轉成 String，輸出成我們想要的 CSS，</p>\n<p>如果你懶得自己寫 plugin 來處理也不用擔心，</p>\n<p>現在已經有兩百多個 plugins 在那裡等你愛智求真了。</p>\n<p>我知道一定有人這時候在想：「那 SASS 呢？」</p>\n<p>沒錯，這兩者看起來似乎有點像，不過可以先看一下這篇文章：</p>\n<ul>\n<li><a href=\"http://davidtheclark.com/excited-about-postcss/\" target=\"_blank\" rel=\"external\">I’m Excited About PostCSS But I’m Scared to Leave Sass</a></li>\n</ul>\n<p>這裏則是值得一看的補充資料，其實官方的 readme 裏也都有寫：</p>\n<ul>\n<li><p><a href=\"http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889\" target=\"_blank\" rel=\"external\">tut+的教學</a></p>\n</li>\n<li><p><a href=\"http://nicolasgallagher.com/custom-css-preprocessing/\" target=\"_blank\" rel=\"external\">一個前端用 node.js 來寫 CSS 的 preprocessor 也是很正常的事</a></p>\n</li>\n</ul>\n<p>簡言之，PostCSS 跟 SASS 或 LESS 最不一樣的點是：</p>\n<p>「我們可以只採用我們想要的部分，並將其組裝起來。」</p>\n<p>這不就是 Compoasable 和模組化嗎？</p>\n<p>接著就來看看如何在 webpack 中設定 postcss，</p>\n<p>和使用各種 plugins。</p>\n<p>（坦白說這裏才是最頭痛的部分）</p>\n<p>使用 webpack 雖然簡單，但 config 的寫法太雜亂了，</p>\n<p>完成同樣一件事可以有好幾種方法，</p>\n<p>目前連官方文件上也沒有一個一致的 best practice。</p>\n<p>而<a href=\"https://github.com/ruanyf/webpack-demos\" target=\"_blank\" rel=\"external\">阮義峰的這篇教學</a>是我目前看過寫的最清楚易懂的，</p>\n<p>從 entry 到跟 react 一起使用都有說到。</p>\n<hr>\n<h2 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h2><p>假如你直接跳過前兩個工具，其實也是 ok 啦！</p>\n<p>因為 webpack 的 css-loader 本身就內建 module 功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.[s]?css$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'style!css?modules!sass'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在終於要來講一下 CSS modules 可以做到什麼事情。</p>\n<ul>\n<li>組合（Composition）</li>\n</ul>\n<p>我們能夠將 selector 組合在一起</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.className</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.otherClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">composes</span>: className;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏要注意的是 composes 必須寫在其他 properties 的前面。</p>\n<p>而我們也可以 compose 多個 className：</p>\n<p><code>composes: classNameA classNameB;</code></p>\n<p>乍看之下跟 SASS 的 extend 有點像，</p>\n<p>但讓我們繼續看下去。</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>假設我們現在有另一個檔案: style.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.className &#123;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.otherClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">composes</span>: className from <span class=\"string\">\"./style.css\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這給了我們很大的彈性，但小心不要 override properties，</p>\n<p>我覺得官方文件的這一句話寫得很棒：</p>\n<blockquote>\n<p>Best if classes do a single thing and dependencies are hierarchic.</p>\n</blockquote>\n<p>這的確是我們在設計 CSS module 時，要常存心中的一句話。</p>\n<h2 id=\"Usage-with-preprocessors\"><a href=\"#Usage-with-preprocessors\" class=\"headerlink\" title=\"Usage with preprocessors\"></a>Usage with preprocessors</h2><p>這裏主要是說要如何運用 preprocessor ，</p>\n<p>因為我們有時候還是需要 global 的 class。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.global-class-name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Rewrite-with-CSS-Modules\"><a href=\"#Rewrite-with-CSS-Modules\" class=\"headerlink\" title=\"Rewrite with CSS Modules\"></a>Rewrite with CSS Modules</h2><p>如果你是打從專案一開始就使用 css module ，</p>\n<p>那恭喜你！</p>\n<p>但「通常」現有的專案上都是用 SASS 來解決，</p>\n<p>這裡就以我工作上的專案來做例子。</p>\n<p>這裏要提一下我們後端用的是 Rails，</p>\n<p>Rails 有個邪惡的好東西叫做 <a href=\"https://ihower.tw/rails4/assets-pipeline.html\" target=\"_blank\" rel=\"external\">Asset Pipeline</a>，</p>\n<p>它會將靜態資源壓成一個檔案，減少 request 數。</p>\n<p>自動幫你做這件事聽起來很美好，</p>\n<p>但實際上因為 css 有 global scope 的問題，</p>\n<p>所以要怎麼確保每一頁只 load 到自己要的 style 呢？</p>\n<p>我的做法是每一頁會有一個專屬的 id，</p>\n<p>而命名的方式就是以 controller 加上 action 的名稱來命名。</p>\n<p>像是 posts_controller 的首頁，</p>\n<p>我就會給它專屬的一支檔案<code>posts_index.scss</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#posts_index &#123;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這樣做的第一個好處很明顯，</p>\n<p>就是每個頁面裡的樣式就只會影響 id 裡的 scope。</p>\n<p>那說好的 module 呢？</p>\n<p>這裏就要用到 SASS 的 <code>extend</code>，</p>\n<p>假設 posts 和 show 都有一模一樣的 header，</p>\n<p>這時候我就會把 header 抽出來像下面這樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%header &#123;</span><br><span class=\"line\">    header &#123;</span><br><span class=\"line\">        //  some style</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import \"./header.scss\";</span><br><span class=\"line\"></span><br><span class=\"line\">#posts_index &#123;</span><br><span class=\"line\">    @extend %header;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import \"./header.scss\";</span><br><span class=\"line\"></span><br><span class=\"line\">#posts_show &#123;</span><br><span class=\"line\">    @extend %header;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看起來挺方便，</p>\n<p>而且 Rails 的 routing 通常都是 restful 的，</p>\n<p>所以理論上這樣 CSS 的名字也有一定的規則可循，</p>\n<p>不會找不到檔案在哪裡。</p>\n<p>（就算有自動搜尋，也要知道下哪些關鍵字吧！）</p>\n<p>但，</p>\n<p>如果今天根據 user 的身份不同，</p>\n<p>會 render 不一樣的頁面呢？</p>\n<p><code>#posts_index_super_user</code>？</p>\n<p>沒錯，問題又變得開始複雜起來，</p>\n<p>原因就出在它仍然是 global scope，</p>\n<p>而我試圖想從命名來解決這件事情，</p>\n<p>我常常在想：「啊！如果 CSS 是 local scope該有多好？」</p>\n<blockquote>\n<p>A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.</p>\n</blockquote>\n<p>天啊！這解決了根本上的問題！</p>\n<p>假如能夠用 component-based 的方式來思考，</p>\n<p>讓 react component 從 css module 之間有對應的 name 來讀取樣式，</p>\n<p>那不就更棒了嗎？</p>\n<p>以後的資料夾結構會長這樣子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── components</span><br><span class=\"line\">│   ├── ui-App</span><br><span class=\"line\">│   │   ├── index.css</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   ├── ui-Avatar</span><br><span class=\"line\">│   │   ├── index.css</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   └── ui-Profile</span><br><span class=\"line\">│       ├── fonts</span><br><span class=\"line\">│       │   └── opensans-regular-webfont.woff</span><br><span class=\"line\">│       ├── images</span><br><span class=\"line\">│       │   └── icon-user.png</span><br><span class=\"line\">│       ├── index.css</span><br><span class=\"line\">│       └── index.js</span><br><span class=\"line\">└── styles</span><br><span class=\"line\">    ├── base.css</span><br><span class=\"line\">    └── theme.css</span><br></pre></td></tr></table></figure>\n<p>一個資料夾底下就放著 component.js, component.css，</p>\n<p>本身就是一個 micro-service，</p>\n<p>而我們要做的正是把這些 micro-service 給組裝起來變成一個頁面，</p>\n<p>最後再把這些頁面組裝起來變成 Application，相當舒服。</p>\n<p>不過要如何從現有的專案改寫呢？</p>\n<p>這裏就拿這個小小的部落格來舉例，</p>\n<p>因為我一開始是用<a href=\"https://github.com/abalone0204/generator-suku\" target=\"_blank\" rel=\"external\">自己寫的 generator</a> 生成專案，</p>\n<p>（小打一下廣告，</p>\n<p>平常開發前端 component 就是在這個生成的專案上開發，</p>\n<p>弄好 react 和 hmr 之後，其實蠻方便的。）</p>\n<p>順帶一提，這是開始改寫前的樣子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylesheets/</span><br><span class=\"line\">    ├── animations</span><br><span class=\"line\">    │   ├── blink.scss</span><br><span class=\"line\">    │   ├── loading.scss</span><br><span class=\"line\">    │   └── spins.scss</span><br><span class=\"line\">    ├── code_highlights</span><br><span class=\"line\">    │   └── default.scss</span><br><span class=\"line\">    ├── colors.scss</span><br><span class=\"line\">    ├── components</span><br><span class=\"line\">    │   ├── Nav</span><br><span class=\"line\">    │   │   └── _icon_bar.css</span><br><span class=\"line\">    │   └── common</span><br><span class=\"line\">    │       └── loading.scss</span><br><span class=\"line\">    ├── nav.scss</span><br><span class=\"line\">    ├── pages</span><br><span class=\"line\">    │   ├── about.scss</span><br><span class=\"line\">    │   ├── home.scss</span><br><span class=\"line\">    │   └── post.scss</span><br><span class=\"line\">    └── style.scss</span><br></pre></td></tr></table></figure>\n<p>到最後 stylesheets 裡面只會剩下 global 的 css 檔案，</p>\n<p>像是 base.css 或是 theme.css 。</p>\n<p>首先第一步當然就是處理 global 的 css，</p>\n<p>思考的方向很簡單，就是哪些東西是每一個頁面都用得到的呢？</p>\n<p>所以我們把 body, a, h1~h5之類的東西先拔出來：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global &#123;</span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">        color: inherit;</span><br><span class=\"line\">        text-decoration: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        letter-spacing: 1px;</span><br><span class=\"line\">        color: #23263a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">        font-family: 'Noto Sans TC',Microsoft JhengHei,Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">        font-weight: 200;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .wf-loading &#123;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著來處理我們的 Nav bar，</p>\n<p>從這裡開始，就要進入 module 化的思考方式，</p>\n<p>一開始的時候你可能會覺得，欸？幹嘛這樣做？</p>\n<p>但越到後面你會發現一旦你習慣這樣思考，</p>\n<p>很多原本難解的問題都會迎刃而解，</p>\n<p>尤其是用組裝的方式來思考畫面的元件，</p>\n<p>能讓多狀態的呈現變得更簡單，</p>\n<p>也更能明白哪個部分該抽象化出來變成 base。</p>\n<p>先來看看這個 Nav 的例子。</p>\n<hr>\n<p>預計會在以下幾個步驟循序漸進地去思考如何去寫 CSS Modules：</p>\n<ul>\n<li><p>讀一下舊有的 js, css</p>\n</li>\n<li><p>最外層的 global selector</p>\n</li>\n<li><p>沒有狀態改變的 local selector</p>\n</li>\n<li><p>有狀態改變的 local selector</p>\n</li>\n</ul>\n<h3 id=\"1-分析舊有的-js-css\"><a href=\"#1-分析舊有的-js-css\" class=\"headerlink\" title=\"1. 分析舊有的 js, css\"></a>1. 分析舊有的 js, css</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;show: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toggleIcon = <span class=\"keyword\">this</span>.toggleIcon.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toggleIcon() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;show: !<span class=\"keyword\">this</span>.state.show&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;show&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> className = show ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;nav&gt;</span><br><span class=\"line\">                &lt;div id=\"logo\" className=&#123;className&#125;/&gt;</span><br><span class=\"line\">                &lt;div id=\"toggle_icon\" </span><br><span class=\"line\">                     className=&#123;className&#125;</span><br><span class=\"line\">                     onClick=&#123;this.toggleIcon&#125;</span><br><span class=\"line\">                /&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    show ? </span><br><span class=\"line\">                    (</span><br><span class=\"line\">                        &lt;ul id=\"nav_list\" className=&#123;className&#125;&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;i className=\"fa fa-github-alt\"&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;i className=\"fa fa-facebook\"&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class=\"line\">                        &lt;/ul&gt;</span><br><span class=\"line\">                    ) :</span><br><span class=\"line\">                    null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &lt;/nav&gt;</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我們的 toggle_icon 會隨著 show 的值而改變樣式，</p>\n<p>至於怎樣改變？就來看看原先架構下的 CSS 怎麼寫。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import \"./colors.scss\";</span><br><span class=\"line\">@import \"./components/Nav/icon_bar\";</span><br><span class=\"line\"></span><br><span class=\"line\">nav &#123;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    z-index: 5;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    color: white;</span><br><span class=\"line\">    background: $deep_blue;</span><br><span class=\"line\">    padding: 14px;</span><br><span class=\"line\">    height: 28px;</span><br><span class=\"line\"></span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">        color: inherit;</span><br><span class=\"line\">        text-decoration: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #logo &#123;</span><br><span class=\"line\">        height: 28px;</span><br><span class=\"line\">        width: 28px;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        background-image: url(\"../img/icon.png\");</span><br><span class=\"line\">        background-size: cover;</span><br><span class=\"line\">        transition: transform 1s ease;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:hover &#123;</span><br><span class=\"line\">            animation: shake;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #logo.active &#123;</span><br><span class=\"line\">        color: $sudo_green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #toggle_icon &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translateY(-50%);</span><br><span class=\"line\">        right: 50px;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\"></span><br><span class=\"line\">        @extend %icon_bar;</span><br><span class=\"line\"></span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            @extend %icon_bar;</span><br><span class=\"line\"></span><br><span class=\"line\">            content: '';</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before &#123;</span><br><span class=\"line\">            margin-top: -10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            margin-top: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #toggle_icon.active &#123;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">        transition-property: background-color, transform;</span><br><span class=\"line\">        transition-duration: .2s;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before, &amp;:after &#123;</span><br><span class=\"line\">            background: $sudo_green;</span><br><span class=\"line\">            transition-property: background-color, transform;</span><br><span class=\"line\">            transition-duration: .2s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before &#123;</span><br><span class=\"line\">            transform: rotate(45deg);</span><br><span class=\"line\">            transform-origin: 0 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            transform: rotate(-45deg);</span><br><span class=\"line\">            transform-origin: 0 5px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #nav_list &#123;</span><br><span class=\"line\">        position: fixed;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">        background: #23263a;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        top: 56px;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        padding: 5px 15px;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        li &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            padding: 5px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-最外層的-global-selector\"><a href=\"#2-最外層的-global-selector\" class=\"headerlink\" title=\"2. 最外層的 global selector\"></a>2. 最外層的 global selector</h2><p>如果你有寫過 react native 的話，</p>\n<p>就能體會到 style object 的好處，</p>\n<p>假如沒有，那現在這是好好來玩玩看的時候。</p>\n<p>我們從最外層開始拆解。</p>\n<p>（其實由內而外、由外而內各有好壞，但這可能又要寫另外一篇了）</p>\n<p>最外層的當然就是原生的 nav tag，</p>\n<p>這裏其實大可直接給他 global</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global &#123;</span><br><span class=\"line\">    nav &#123;</span><br><span class=\"line\">        position: fixed;</span><br><span class=\"line\">        z-index: 5;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background: #23263a;</span><br><span class=\"line\">        padding: 14px;</span><br><span class=\"line\">        height: 28px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-沒有狀態改變的-local-selector\"><a href=\"#3-沒有狀態改變的-local-selector\" class=\"headerlink\" title=\"3. 沒有狀態改變的 local selector\"></a>3. 沒有狀態改變的 local selector</h2><p>往下看到 logo ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../../../static/img/icon.png\"</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要怎麼 import 它呢？</p>\n<p>首先別忘記在 webpack 的 config 裡開啟 css modules 的功能。</p>\n<p>再來只要這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./Nav.scss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nav</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ( </span><br><span class=\"line\">           ...</span><br><span class=\"line\">           &lt;div className=&#123;style.logo&#125;/&gt;</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>style.logo</code> 讀到的就會是 webpack 幫我們生成的唯一字串，</p>\n<p>不用擔心會跟其他 class 重複，不相信的話 console.log 看一下，</p>\n<p>而跟以往相同，webpack 也會自動去幫我們寫入 style 到 head 裡面，</p>\n<p>對應到的 class name 就是剛剛生成的唯一字串。</p>\n<p>原理大概是這樣子。</p>\n<hr>\n<h3 id=\"4-有狀態改變的-local-selector\"><a href=\"#4-有狀態改變的-local-selector\" class=\"headerlink\" title=\"4. 有狀態改變的 local selector\"></a>4. 有狀態改變的 local selector</h3><p>再來則是為什麼我仍然使用 SASS 的原因： extend</p>\n<p>來看看 toggle_icon，他就是我們平常看到手機版的選單，</p>\n<p>按了之後會變形。</p>\n<p>先直接看它原本的 CSS 長怎樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#toggle_icon &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">    right: 50px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    @extend %icon_bar;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        @extend %icon_bar;</span><br><span class=\"line\">        content: '';</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        margin-top: -10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        margin-top: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我知道有一些 PostCSS 的插件可以解決，<br>但這篇的重點在於模組化 CSS 的思考，所以就暫時先擱著啦！）</p>\n</blockquote>\n<p>因為那個 icon 有三個橫條，每個橫條的設定都差不多，</p>\n<p>所以我寫了一個 icon_bar 來被 extend。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%<span class=\"selector-tag\">icon_bar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-property</span>: background-color, transform;</span><br><span class=\"line\">    <span class=\"attribute\">transition-duration</span>: .<span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著則是重頭戲，</p>\n<p>對於畫面來說，這個 toggle_icon 會有兩個狀態，</p>\n<p>也就是說我們會有兩個 class 來處理它，</p>\n<p>但這兩個狀態又有許多共同點，怎麼辦呢？</p>\n<p>答案很簡單：</p>\n<blockquote>\n<p>抽出來當 base，讓兩個狀態的 class 去 composes 這個 base 就好啦！</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon_base &#123;</span><br><span class=\"line\">    @extend %icon_bar;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">    right: 50px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    transition-property: background-color, transform;</span><br><span class=\"line\">    transition-duration: .2s;</span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        // pseudo-selector 是不能使用 composes 的</span><br><span class=\"line\">        // 這就是為什麼我仍需要 @extend</span><br><span class=\"line\">        @extend %icon_bar; </span><br><span class=\"line\">        content: '';</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        margin-top: -10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        margin-top: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏抽出來的就是兩方都不會變的 properties，</p>\n<p>把 transition 放在 base 裏的好處就是能看到狀態之間的變化，</p>\n<p>這樣能實現一些簡單的動畫。</p>\n<p>接著就是把我們寫好的 base 組裝起來而已，</p>\n<p>toggle_icon！附身合體！</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon &#123;</span><br><span class=\"line\">    composes: toggle_icon_base; // 記得要放在其他 properties 前面</span><br><span class=\"line\">    background-color: white;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        background-color: white;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        background-color: #50e2c2;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            background-color: #50e2c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>狀態的改變每個人都有自己喜好的方式，可以自行調整：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon--active &#123;</span><br><span class=\"line\">    composes: toggle_icon_base;</span><br><span class=\"line\">    background: transparent;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before, &amp;:after &#123;</span><br><span class=\"line\">        background: #50e2c2;</span><br><span class=\"line\">        transition-property: background-color, transform;</span><br><span class=\"line\">        transition-duration: .2s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        transform: rotate(45deg);</span><br><span class=\"line\">        transform-origin: 0 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        transform: rotate(-45deg);</span><br><span class=\"line\">        transform-origin: 0 5px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 component 中該如何對應呢？</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nav</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;div className=&#123;show ? style[<span class=\"string\">\"toggle_icon--active\"</span>] : style.toggle_icon&#125;</span><br><span class=\"line\">              onClick=&#123;<span class=\"keyword\">this</span>.toggleIcon&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>沒錯，就是這麼簡單而已。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>回頭看看重構後的 CSS，</p>\n<p>你會發現我們已經不是昔日把所有東西都丟在越來越多層的 class 裡面，</p>\n<p>而是變成扁平且一塊一塊的了，</p>\n<p>如果要重構的話我們也能夠將重複的部分抽出來。</p>\n<p>再來更棒的是除了 global 的地方，</p>\n<p>我們不用再擔心全域命名污染的問題，</p>\n<p>畢竟沒有 import 到的 class 就永遠不會發生作用啊！</p>\n<p>如果有寫錯的地方或是建議，很歡迎留言告訴我。</p>\n<p>我真的最討厭寫 CSS 了。</p>\n<h2 id=\"參考連結：\"><a href=\"#參考連結：\" class=\"headerlink\" title=\"參考連結：\"></a>參考連結：</h2><ul>\n<li><p><a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"external\">css module</a></p>\n</li>\n<li><p><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"external\">autoprefixer</a></p>\n</li>\n<li><p><a href=\"http://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/\" target=\"_blank\" rel=\"external\">Using webpack to build React components and their assets</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<p>時至今日，我最討厭的東西就是亂七八糟的 CSS 還有 KMT，</p>\n<p>這兩個東西有一點很一致：</p>\n<blockquote>\n<p>不管我們再怎麼討厭它，<br>都還是得面對它、處理它。</p>\n</blockquote>\n<h2 id=\"先說結論：\"><a href=\"#先說結論：\" class=\"headerlink\" title=\"先說結論：\"></a>先說結論：</h2><ul>\n<li><p>如果討厭寫 CSS，就更應該用這種方式來寫</p>\n</li>\n<li><p>我們應該用 module 化的方式來思考每個畫面上的東西</p>\n</li>\n<li><p>讓需要「工人智慧」的地方減到最少</p>\n</li>\n</ul>\n<blockquote>\n<p>「如果你覺得 CSS 很亂的話，那代表你心中沒有架構。」</p>\n</blockquote>\n<h2 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h2><ul>\n<li><p>會使用 webpack（幾乎只要會改 config 就行了）</p>\n</li>\n<li><p>把 CSS 當一回事的人</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"為什麼需要去思考-CSS-的「架構」？\"><a href=\"#為什麼需要去思考-CSS-的「架構」？\" class=\"headerlink\" title=\"為什麼需要去思考 CSS 的「架構」？\"></a>為什麼需要去思考 CSS 的「架構」？</h2><p>曾幾何時，我也覺得 CSS 是一個他媽有夠亂七八糟的東西，</p>\n<p>直到不小心開始寫前端，我才發現前端不只是 JavaScript，</p>\n<p>從 CSS 到 html 的設計，都需要仔細去思考「架構」這件事，</p>\n<p>否則很容易讓技術債債台高築，到最後一發不可收拾。</p>\n<p>使用起來合邏輯的東西，不代表能夠用很「邏輯化」的方式寫出來，</p>\n<p>這正是 CSS 為什麼很容易亂七八糟的原因，</p>\n<p>因為我們常常需要去指定很多畫面上的細節（imperative）：</p>\n<blockquote>\n<p>「欸欸，你這邊 width 要 300px，然後 margin 要設成 0 auto 才能置中」</p>\n</blockquote>\n<p>而不是直觀的用程式碼來宣告我們想要畫面長怎樣（declarative）：</p>\n<blockquote>\n<p>「我們要一個看起來不錯的畫面」</p>\n</blockquote>\n<p>處理太多細節很容易出錯，像是螢幕或視窗大小不一樣 300px 就不一定 ok 了，</p>\n<p>而第二個 declarative way 似乎又太過理想化。</p>\n<p>而我認為折衷的方式就是 module 化 CSS，</p>\n<p>雖然也需要去實作 module 內的細節（imperative），</p>\n<p>但完成之後，就可以將這些 module 組裝起來，</p>\n<p>重複使用時就不需要去實做那麼多的細節，</p>\n<p>沒錯，我們又往 declarative programming更進一步了。</p>\n<p>現在看起來還是比較 high level 的概念，</p>\n<p>但我認為知道為什麼要這樣做很重要，</p>\n<p>稍後會在例子裏看到這樣做的好處是什麼。</p>\n<hr>\n<p>在開始之前先講解一下兩個會推薦使用的工具，</p>\n<p>（你也可以依自己喜歡的配置啦！）</p>\n<p>分別是 Autoprefixer 以及 PostCSS。</p>\n<h2 id=\"Autoprefixer\"><a href=\"#Autoprefixer\" class=\"headerlink\" title=\"Autoprefixer\"></a>Autoprefixer</h2><p>假如熟悉 postcss 和 autoprefixer 在幹嘛的人可以直接跳下一段了。</p>\n<p>其實我們平常在寫 CSS 的時候，為了處理跨瀏覽器的問題，</p>\n<p>常常需要寫很噁心的 prefix，</p>\n<p>就算有 SASS 的 include 語法，prefix 還是很噁心。</p>\n<p>看到 autoprefixer 出現真是讓人痛哭流涕的一件事，</p>\n<p>因為這代表以後有人會幫我們處理好 prefix，</p>\n<p>同時還會把太舊的 prefix 給移除掉。（像是 <code>border-radius</code>）</p>\n<p>這裏就直接來安裝進專案吧！</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:   <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader!postcss-loader\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    postcss: [ autoprefixer(&#123; browsers: [<span class=\"string\">'last 2 versions'</span>] &#125;) ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一需要說明一下的就是可以指定我們要 support 到多老舊的 browser啦！</p>\n<p>就這樣，恭喜你！</p>\n<hr>\n<h2 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h2><p>PostCSS 是一個可以用 JavaScript plugins 將 style 轉成我們想要樣子的工具。</p>\n<p>（包括 lint, variables, mixins，以及好多東西……）</p>\n<p>確切一點來說， PostCSS 是一個 node.js 的 package，</p>\n<p>它可以將我們原本的 CSS 檔案轉成 AST(Abstraction Syntax Tree)，</p>\n<p>接著我們就可以藉由這個 API 來對 CSS 做事情，</p>\n<p>做完後再將它轉成 String，輸出成我們想要的 CSS，</p>\n<p>如果你懶得自己寫 plugin 來處理也不用擔心，</p>\n<p>現在已經有兩百多個 plugins 在那裡等你愛智求真了。</p>\n<p>我知道一定有人這時候在想：「那 SASS 呢？」</p>\n<p>沒錯，這兩者看起來似乎有點像，不過可以先看一下這篇文章：</p>\n<ul>\n<li><a href=\"http://davidtheclark.com/excited-about-postcss/\">I’m Excited About PostCSS But I’m Scared to Leave Sass</a></li>\n</ul>\n<p>這裏則是值得一看的補充資料，其實官方的 readme 裏也都有寫：</p>\n<ul>\n<li><p><a href=\"http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889\">tut+的教學</a></p>\n</li>\n<li><p><a href=\"http://nicolasgallagher.com/custom-css-preprocessing/\">一個前端用 node.js 來寫 CSS 的 preprocessor 也是很正常的事</a></p>\n</li>\n</ul>\n<p>簡言之，PostCSS 跟 SASS 或 LESS 最不一樣的點是：</p>\n<p>「我們可以只採用我們想要的部分，並將其組裝起來。」</p>\n<p>這不就是 Compoasable 和模組化嗎？</p>\n<p>接著就來看看如何在 webpack 中設定 postcss，</p>\n<p>和使用各種 plugins。</p>\n<p>（坦白說這裏才是最頭痛的部分）</p>\n<p>使用 webpack 雖然簡單，但 config 的寫法太雜亂了，</p>\n<p>完成同樣一件事可以有好幾種方法，</p>\n<p>目前連官方文件上也沒有一個一致的 best practice。</p>\n<p>而<a href=\"https://github.com/ruanyf/webpack-demos\">阮義峰的這篇教學</a>是我目前看過寫的最清楚易懂的，</p>\n<p>從 entry 到跟 react 一起使用都有說到。</p>\n<hr>\n<h2 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h2><p>假如你直接跳過前兩個工具，其實也是 ok 啦！</p>\n<p>因為 webpack 的 css-loader 本身就內建 module 功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.[s]?css$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'style!css?modules!sass'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在終於要來講一下 CSS modules 可以做到什麼事情。</p>\n<ul>\n<li>組合（Composition）</li>\n</ul>\n<p>我們能夠將 selector 組合在一起</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.className</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.otherClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">composes</span>: className;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏要注意的是 composes 必須寫在其他 properties 的前面。</p>\n<p>而我們也可以 compose 多個 className：</p>\n<p><code>composes: classNameA classNameB;</code></p>\n<p>乍看之下跟 SASS 的 extend 有點像，</p>\n<p>但讓我們繼續看下去。</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>假設我們現在有另一個檔案: style.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.className &#123;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.otherClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">composes</span>: className from <span class=\"string\">\"./style.css\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這給了我們很大的彈性，但小心不要 override properties，</p>\n<p>我覺得官方文件的這一句話寫得很棒：</p>\n<blockquote>\n<p>Best if classes do a single thing and dependencies are hierarchic.</p>\n</blockquote>\n<p>這的確是我們在設計 CSS module 時，要常存心中的一句話。</p>\n<h2 id=\"Usage-with-preprocessors\"><a href=\"#Usage-with-preprocessors\" class=\"headerlink\" title=\"Usage with preprocessors\"></a>Usage with preprocessors</h2><p>這裏主要是說要如何運用 preprocessor ，</p>\n<p>因為我們有時候還是需要 global 的 class。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.global-class-name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Rewrite-with-CSS-Modules\"><a href=\"#Rewrite-with-CSS-Modules\" class=\"headerlink\" title=\"Rewrite with CSS Modules\"></a>Rewrite with CSS Modules</h2><p>如果你是打從專案一開始就使用 css module ，</p>\n<p>那恭喜你！</p>\n<p>但「通常」現有的專案上都是用 SASS 來解決，</p>\n<p>這裡就以我工作上的專案來做例子。</p>\n<p>這裏要提一下我們後端用的是 Rails，</p>\n<p>Rails 有個邪惡的好東西叫做 <a href=\"https://ihower.tw/rails4/assets-pipeline.html\">Asset Pipeline</a>，</p>\n<p>它會將靜態資源壓成一個檔案，減少 request 數。</p>\n<p>自動幫你做這件事聽起來很美好，</p>\n<p>但實際上因為 css 有 global scope 的問題，</p>\n<p>所以要怎麼確保每一頁只 load 到自己要的 style 呢？</p>\n<p>我的做法是每一頁會有一個專屬的 id，</p>\n<p>而命名的方式就是以 controller 加上 action 的名稱來命名。</p>\n<p>像是 posts_controller 的首頁，</p>\n<p>我就會給它專屬的一支檔案<code>posts_index.scss</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#posts_index &#123;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這樣做的第一個好處很明顯，</p>\n<p>就是每個頁面裡的樣式就只會影響 id 裡的 scope。</p>\n<p>那說好的 module 呢？</p>\n<p>這裏就要用到 SASS 的 <code>extend</code>，</p>\n<p>假設 posts 和 show 都有一模一樣的 header，</p>\n<p>這時候我就會把 header 抽出來像下面這樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%header &#123;</span><br><span class=\"line\">    header &#123;</span><br><span class=\"line\">        //  some style</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import \"./header.scss\";</span><br><span class=\"line\"></span><br><span class=\"line\">#posts_index &#123;</span><br><span class=\"line\">    @extend %header;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import \"./header.scss\";</span><br><span class=\"line\"></span><br><span class=\"line\">#posts_show &#123;</span><br><span class=\"line\">    @extend %header;</span><br><span class=\"line\">    // some style</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看起來挺方便，</p>\n<p>而且 Rails 的 routing 通常都是 restful 的，</p>\n<p>所以理論上這樣 CSS 的名字也有一定的規則可循，</p>\n<p>不會找不到檔案在哪裡。</p>\n<p>（就算有自動搜尋，也要知道下哪些關鍵字吧！）</p>\n<p>但，</p>\n<p>如果今天根據 user 的身份不同，</p>\n<p>會 render 不一樣的頁面呢？</p>\n<p><code>#posts_index_super_user</code>？</p>\n<p>沒錯，問題又變得開始複雜起來，</p>\n<p>原因就出在它仍然是 global scope，</p>\n<p>而我試圖想從命名來解決這件事情，</p>\n<p>我常常在想：「啊！如果 CSS 是 local scope該有多好？」</p>\n<blockquote>\n<p>A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.</p>\n</blockquote>\n<p>天啊！這解決了根本上的問題！</p>\n<p>假如能夠用 component-based 的方式來思考，</p>\n<p>讓 react component 從 css module 之間有對應的 name 來讀取樣式，</p>\n<p>那不就更棒了嗎？</p>\n<p>以後的資料夾結構會長這樣子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── components</span><br><span class=\"line\">│   ├── ui-App</span><br><span class=\"line\">│   │   ├── index.css</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   ├── ui-Avatar</span><br><span class=\"line\">│   │   ├── index.css</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   └── ui-Profile</span><br><span class=\"line\">│       ├── fonts</span><br><span class=\"line\">│       │   └── opensans-regular-webfont.woff</span><br><span class=\"line\">│       ├── images</span><br><span class=\"line\">│       │   └── icon-user.png</span><br><span class=\"line\">│       ├── index.css</span><br><span class=\"line\">│       └── index.js</span><br><span class=\"line\">└── styles</span><br><span class=\"line\">    ├── base.css</span><br><span class=\"line\">    └── theme.css</span><br></pre></td></tr></table></figure>\n<p>一個資料夾底下就放著 component.js, component.css，</p>\n<p>本身就是一個 micro-service，</p>\n<p>而我們要做的正是把這些 micro-service 給組裝起來變成一個頁面，</p>\n<p>最後再把這些頁面組裝起來變成 Application，相當舒服。</p>\n<p>不過要如何從現有的專案改寫呢？</p>\n<p>這裏就拿這個小小的部落格來舉例，</p>\n<p>因為我一開始是用<a href=\"https://github.com/abalone0204/generator-suku\">自己寫的 generator</a> 生成專案，</p>\n<p>（小打一下廣告，</p>\n<p>平常開發前端 component 就是在這個生成的專案上開發，</p>\n<p>弄好 react 和 hmr 之後，其實蠻方便的。）</p>\n<p>順帶一提，這是開始改寫前的樣子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylesheets/</span><br><span class=\"line\">    ├── animations</span><br><span class=\"line\">    │   ├── blink.scss</span><br><span class=\"line\">    │   ├── loading.scss</span><br><span class=\"line\">    │   └── spins.scss</span><br><span class=\"line\">    ├── code_highlights</span><br><span class=\"line\">    │   └── default.scss</span><br><span class=\"line\">    ├── colors.scss</span><br><span class=\"line\">    ├── components</span><br><span class=\"line\">    │   ├── Nav</span><br><span class=\"line\">    │   │   └── _icon_bar.css</span><br><span class=\"line\">    │   └── common</span><br><span class=\"line\">    │       └── loading.scss</span><br><span class=\"line\">    ├── nav.scss</span><br><span class=\"line\">    ├── pages</span><br><span class=\"line\">    │   ├── about.scss</span><br><span class=\"line\">    │   ├── home.scss</span><br><span class=\"line\">    │   └── post.scss</span><br><span class=\"line\">    └── style.scss</span><br></pre></td></tr></table></figure>\n<p>到最後 stylesheets 裡面只會剩下 global 的 css 檔案，</p>\n<p>像是 base.css 或是 theme.css 。</p>\n<p>首先第一步當然就是處理 global 的 css，</p>\n<p>思考的方向很簡單，就是哪些東西是每一個頁面都用得到的呢？</p>\n<p>所以我們把 body, a, h1~h5之類的東西先拔出來：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global &#123;</span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">        color: inherit;</span><br><span class=\"line\">        text-decoration: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        letter-spacing: 1px;</span><br><span class=\"line\">        color: #23263a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">        font-family: 'Noto Sans TC',Microsoft JhengHei,Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">        font-weight: 200;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .wf-loading &#123;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        font-family: Microsoft JhengHei, Microsoft YaHei, LiHei Pro, Heiti TC, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著來處理我們的 Nav bar，</p>\n<p>從這裡開始，就要進入 module 化的思考方式，</p>\n<p>一開始的時候你可能會覺得，欸？幹嘛這樣做？</p>\n<p>但越到後面你會發現一旦你習慣這樣思考，</p>\n<p>很多原本難解的問題都會迎刃而解，</p>\n<p>尤其是用組裝的方式來思考畫面的元件，</p>\n<p>能讓多狀態的呈現變得更簡單，</p>\n<p>也更能明白哪個部分該抽象化出來變成 base。</p>\n<p>先來看看這個 Nav 的例子。</p>\n<hr>\n<p>預計會在以下幾個步驟循序漸進地去思考如何去寫 CSS Modules：</p>\n<ul>\n<li><p>讀一下舊有的 js, css</p>\n</li>\n<li><p>最外層的 global selector</p>\n</li>\n<li><p>沒有狀態改變的 local selector</p>\n</li>\n<li><p>有狀態改變的 local selector</p>\n</li>\n</ul>\n<h3 id=\"1-分析舊有的-js-css\"><a href=\"#1-分析舊有的-js-css\" class=\"headerlink\" title=\"1. 分析舊有的 js, css\"></a>1. 分析舊有的 js, css</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;show: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toggleIcon = <span class=\"keyword\">this</span>.toggleIcon.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toggleIcon() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;show: !<span class=\"keyword\">this</span>.state.show&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;show&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> className = show ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;nav&gt;</span><br><span class=\"line\">                &lt;div id=\"logo\" className=&#123;className&#125;/&gt;</span><br><span class=\"line\">                &lt;div id=\"toggle_icon\" </span><br><span class=\"line\">                     className=&#123;className&#125;</span><br><span class=\"line\">                     onClick=&#123;this.toggleIcon&#125;</span><br><span class=\"line\">                /&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    show ? </span><br><span class=\"line\">                    (</span><br><span class=\"line\">                        &lt;ul id=\"nav_list\" className=&#123;className&#125;&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;i className=\"fa fa-github-alt\"&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class=\"line\">                            &lt;li&gt;&lt;i className=\"fa fa-facebook\"&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class=\"line\">                        &lt;/ul&gt;</span><br><span class=\"line\">                    ) :</span><br><span class=\"line\">                    null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &lt;/nav&gt;</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我們的 toggle_icon 會隨著 show 的值而改變樣式，</p>\n<p>至於怎樣改變？就來看看原先架構下的 CSS 怎麼寫。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import \"./colors.scss\";</span><br><span class=\"line\">@import \"./components/Nav/icon_bar\";</span><br><span class=\"line\"></span><br><span class=\"line\">nav &#123;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    z-index: 5;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    color: white;</span><br><span class=\"line\">    background: $deep_blue;</span><br><span class=\"line\">    padding: 14px;</span><br><span class=\"line\">    height: 28px;</span><br><span class=\"line\"></span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">        color: inherit;</span><br><span class=\"line\">        text-decoration: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #logo &#123;</span><br><span class=\"line\">        height: 28px;</span><br><span class=\"line\">        width: 28px;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        background-image: url(\"../img/icon.png\");</span><br><span class=\"line\">        background-size: cover;</span><br><span class=\"line\">        transition: transform 1s ease;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:hover &#123;</span><br><span class=\"line\">            animation: shake;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #logo.active &#123;</span><br><span class=\"line\">        color: $sudo_green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #toggle_icon &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translateY(-50%);</span><br><span class=\"line\">        right: 50px;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\"></span><br><span class=\"line\">        @extend %icon_bar;</span><br><span class=\"line\"></span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            @extend %icon_bar;</span><br><span class=\"line\"></span><br><span class=\"line\">            content: '';</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before &#123;</span><br><span class=\"line\">            margin-top: -10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            margin-top: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #toggle_icon.active &#123;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">        transition-property: background-color, transform;</span><br><span class=\"line\">        transition-duration: .2s;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before, &amp;:after &#123;</span><br><span class=\"line\">            background: $sudo_green;</span><br><span class=\"line\">            transition-property: background-color, transform;</span><br><span class=\"line\">            transition-duration: .2s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before &#123;</span><br><span class=\"line\">            transform: rotate(45deg);</span><br><span class=\"line\">            transform-origin: 0 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            transform: rotate(-45deg);</span><br><span class=\"line\">            transform-origin: 0 5px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #nav_list &#123;</span><br><span class=\"line\">        position: fixed;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">        background: #23263a;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        top: 56px;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        padding: 5px 15px;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        li &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            padding: 5px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-最外層的-global-selector\"><a href=\"#2-最外層的-global-selector\" class=\"headerlink\" title=\"2. 最外層的 global selector\"></a>2. 最外層的 global selector</h2><p>如果你有寫過 react native 的話，</p>\n<p>就能體會到 style object 的好處，</p>\n<p>假如沒有，那現在這是好好來玩玩看的時候。</p>\n<p>我們從最外層開始拆解。</p>\n<p>（其實由內而外、由外而內各有好壞，但這可能又要寫另外一篇了）</p>\n<p>最外層的當然就是原生的 nav tag，</p>\n<p>這裏其實大可直接給他 global</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global &#123;</span><br><span class=\"line\">    nav &#123;</span><br><span class=\"line\">        position: fixed;</span><br><span class=\"line\">        z-index: 5;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background: #23263a;</span><br><span class=\"line\">        padding: 14px;</span><br><span class=\"line\">        height: 28px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-沒有狀態改變的-local-selector\"><a href=\"#3-沒有狀態改變的-local-selector\" class=\"headerlink\" title=\"3. 沒有狀態改變的 local selector\"></a>3. 沒有狀態改變的 local selector</h2><p>往下看到 logo ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../../../static/img/icon.png\"</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要怎麼 import 它呢？</p>\n<p>首先別忘記在 webpack 的 config 裡開啟 css modules 的功能。</p>\n<p>再來只要這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./Nav.scss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nav</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ( </span><br><span class=\"line\">           ...</span><br><span class=\"line\">           &lt;div className=&#123;style.logo&#125;/&gt;</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>style.logo</code> 讀到的就會是 webpack 幫我們生成的唯一字串，</p>\n<p>不用擔心會跟其他 class 重複，不相信的話 console.log 看一下，</p>\n<p>而跟以往相同，webpack 也會自動去幫我們寫入 style 到 head 裡面，</p>\n<p>對應到的 class name 就是剛剛生成的唯一字串。</p>\n<p>原理大概是這樣子。</p>\n<hr>\n<h3 id=\"4-有狀態改變的-local-selector\"><a href=\"#4-有狀態改變的-local-selector\" class=\"headerlink\" title=\"4. 有狀態改變的 local selector\"></a>4. 有狀態改變的 local selector</h3><p>再來則是為什麼我仍然使用 SASS 的原因： extend</p>\n<p>來看看 toggle_icon，他就是我們平常看到手機版的選單，</p>\n<p>按了之後會變形。</p>\n<p>先直接看它原本的 CSS 長怎樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#toggle_icon &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">    right: 50px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    @extend %icon_bar;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        @extend %icon_bar;</span><br><span class=\"line\">        content: '';</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        margin-top: -10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        margin-top: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我知道有一些 PostCSS 的插件可以解決，<br>但這篇的重點在於模組化 CSS 的思考，所以就暫時先擱著啦！）</p>\n</blockquote>\n<p>因為那個 icon 有三個橫條，每個橫條的設定都差不多，</p>\n<p>所以我寫了一個 icon_bar 來被 extend。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%<span class=\"selector-tag\">icon_bar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-property</span>: background-color, transform;</span><br><span class=\"line\">    <span class=\"attribute\">transition-duration</span>: .<span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著則是重頭戲，</p>\n<p>對於畫面來說，這個 toggle_icon 會有兩個狀態，</p>\n<p>也就是說我們會有兩個 class 來處理它，</p>\n<p>但這兩個狀態又有許多共同點，怎麼辦呢？</p>\n<p>答案很簡單：</p>\n<blockquote>\n<p>抽出來當 base，讓兩個狀態的 class 去 composes 這個 base 就好啦！</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon_base &#123;</span><br><span class=\"line\">    @extend %icon_bar;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">    right: 50px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    transition-property: background-color, transform;</span><br><span class=\"line\">    transition-duration: .2s;</span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        // pseudo-selector 是不能使用 composes 的</span><br><span class=\"line\">        // 這就是為什麼我仍需要 @extend</span><br><span class=\"line\">        @extend %icon_bar; </span><br><span class=\"line\">        content: '';</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        margin-top: -10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        margin-top: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏抽出來的就是兩方都不會變的 properties，</p>\n<p>把 transition 放在 base 裏的好處就是能看到狀態之間的變化，</p>\n<p>這樣能實現一些簡單的動畫。</p>\n<p>接著就是把我們寫好的 base 組裝起來而已，</p>\n<p>toggle_icon！附身合體！</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon &#123;</span><br><span class=\"line\">    composes: toggle_icon_base; // 記得要放在其他 properties 前面</span><br><span class=\"line\">    background-color: white;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before,</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        background-color: white;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        background-color: #50e2c2;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after &#123;</span><br><span class=\"line\">            background-color: #50e2c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>狀態的改變每個人都有自己喜好的方式，可以自行調整：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.toggle_icon--active &#123;</span><br><span class=\"line\">    composes: toggle_icon_base;</span><br><span class=\"line\">    background: transparent;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before, &amp;:after &#123;</span><br><span class=\"line\">        background: #50e2c2;</span><br><span class=\"line\">        transition-property: background-color, transform;</span><br><span class=\"line\">        transition-duration: .2s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        transform: rotate(45deg);</span><br><span class=\"line\">        transform-origin: 0 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        transform: rotate(-45deg);</span><br><span class=\"line\">        transform-origin: 0 5px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 component 中該如何對應呢？</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nav</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;div className=&#123;show ? style[<span class=\"string\">\"toggle_icon--active\"</span>] : style.toggle_icon&#125;</span><br><span class=\"line\">              onClick=&#123;<span class=\"keyword\">this</span>.toggleIcon&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>沒錯，就是這麼簡單而已。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>回頭看看重構後的 CSS，</p>\n<p>你會發現我們已經不是昔日把所有東西都丟在越來越多層的 class 裡面，</p>\n<p>而是變成扁平且一塊一塊的了，</p>\n<p>如果要重構的話我們也能夠將重複的部分抽出來。</p>\n<p>再來更棒的是除了 global 的地方，</p>\n<p>我們不用再擔心全域命名污染的問題，</p>\n<p>畢竟沒有 import 到的 class 就永遠不會發生作用啊！</p>\n<p>如果有寫錯的地方或是建議，很歡迎留言告訴我。</p>\n<p>我真的最討厭寫 CSS 了。</p>\n<h2 id=\"參考連結：\"><a href=\"#參考連結：\" class=\"headerlink\" title=\"參考連結：\"></a>參考連結：</h2><ul>\n<li><p><a href=\"https://github.com/css-modules/css-modules\">css module</a></p>\n</li>\n<li><p><a href=\"https://github.com/postcss/autoprefixer\">autoprefixer</a></p>\n</li>\n<li><p><a href=\"http://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/\">Using webpack to build React components and their assets</a></p>\n</li>\n</ul>\n"},{"title":"做中學 Cycle.js（中）","date":"2016-01-23T16:00:00.000Z","intro":null,"_content":"\nDrivers 和一些簡單的例子\n\n<!--more-->\n\n還沒看過上一篇的可以先去看上一篇了解 Cycle.js，\n\n這一篇會從 driver 開始講。\n\ndrivers 是在控制畫面的 render，\n\n但是我們目前的 driver 都是只能回傳字串，\n\n這一章節我們要真的來認真的操作 DOM，\n\n並且實作幾個小例子來看看 Cycle.js 這個框架是怎樣改變我們思考資料流的方式。\n\n## Making DOM driver more flexible\n\n這裏要來認真處理一下如何去從 object 去表示一個 DOM，\n\n假如你之前實作過一個 Virtual DOM 的話，\n\n我想會相當有幫助。\n\n```js\nfunction createElement(obj) {\n    const element = document.createElement(obj.tagName);\n    obj.children\n            .filter(c => typeof c === 'object')\n            .map(createElement)\n            .forEach(c => element.appendChild(c));\n        obj.children\n            .filter(c => typeof c === 'string')\n            .forEach(c => element.innerHTML += c);\n    return element;\n}\n```\n\n目前還只是沒加上 props 的簡化版。\n\n```js\nfunction DOMDriver(obj$) {\n    obj$.subscribe(obj => {\n        const container = document.querySelector('#app');\n        const element = createElement(obj)\n        // Refresh\n        container.innerHTML = '';\n        container.appendChild(element);\n    })\n    const DOMSource = Observable.fromEvent(document, \"click\");\n    return DOMSource\n}\n```\n\n這裏使用了 appendChild，所以如果不每次都清空的話，\n\n等於每次都會 append 東西上來。\n\n## 在 DOM source 掌控更多事情\n\n回頭看一下我們的 Main，\n\n發現我們唯一能從 DOM 拿到的 event stream，\n\n居然只有 click$，這並不符合我們日常的開發情境，\n\n現在就來解決這個問題。\n\n解法很簡單，就是在 return DOMSource 的時候，\n\n給個能夠選取 tag 和 event type 的 interface。\n\n```js\nconst DOMSource = {\n    selectEvents: function(tagName, eventType) {\n        return Observable.fromEvent(document, eventType)\n            .filter(e => e.target.tagName === tagName.toUpperCase());\n    }\n};\n```\n\n這裏當然還是不夠 general 的版本，\n\n不過這樣我們在 main function 裡面就能夠簡單的選取另一個 event 了。\n\n## h()\n\n一開始我也很疑惑 h 是啥？\n\n答案很簡單， \"h\" stands for html\n\n```\nfunction h(tagName, children) {\n    return {\n        tagName,\n        children\n    }\n} \n\nfunction h1(children) {\n    return h('H1', children);\n}\n```\n\n讓我們在 main 中要建造 elements 時省去不少力氣。\n\n而 h1、h2、span⋯⋯等等你想得到的 tag，\n\n都能藉由 function 來表示，\n\n並且語法看起來也很簡單，\n\n連我到後來都不禁思考：「**我們真的需要 jsx 嗎**？」\n\n目前只是比較簡單的語法，還沒考慮到 properties，\n\n在 main 中的長相大概會像這樣：\n\n```js\nObservable.timer(0, 1000)\n          .map(i =>\n                h1([\n                    span([\n                        `Seconds elapsed ${i}`\n                    ])\n                ]))\n```\n\n## Way to Real Driver\n\n處理完語法後，我們來看看怎樣寫出一個更 serious 一點的 driver。\n\n第一個發現的問題就是我們又把整個 Component 要 mount 的地方寫死了，\n\n```js\nDOMDriver(obj$) => {\n        obj$.subscribe(obj => {\n            // hard code\n            const container = document.querySelector('#app');\n            const element = createElement(obj)\n            container.innerHTML = '';\n            container.appendChild(element);\n        })\n        const DOMSource = {\n            selectEvents: function(tagName, eventType) {\n                return Observable.fromEvent(document, eventType)\n                    .filter(e => e.target.tagName === tagName.toUpperCase());\n            }\n        };\n        return DOMSource\n    }\n```\n\n這樣的寫法讓我們必須要在 DOM 上一定要有 id 為 app 的 element，\n\n才能夠啟用 DOMDriver。\n\nDOMDriver 是一個 function，\n\n所以我們只要能回傳一個「客製化」的 function，\n\n這件事情不就解決了嗎？\n\n這裏運用到了 JavaScript 中「閉包(Closure)」的概念，\n\n\n\n```js\nfunction makeDOMDriver(mountSelector) {\n    return (obj$) => {\n        obj$.subscribe(obj => {\n            const container = document.querySelector(mountSelector);\n            const element = createElement(obj)\n            container.innerHTML = '';\n            container.appendChild(element);\n        })\n        const DOMSource = {\n            selectEvents: function(tagName, eventType) {\n                return Observable.fromEvent(document, eventType)\n                    .filter(e => e.target.tagName === tagName.toUpperCase());\n            }\n        };\n        return DOMSource\n    }\n}\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n    Log: consoleLogDriver,\n}\n```\n\n下一個問題則是：\n\n```js\ncontainer.innerHTML = '';\n```\n假如要 bind 到 DOM 上面是一個很大的 object，\n\n那我們會遭遇到效能的問題。\n\n再來則是 `selectEvents` 這個 function：\n\n```js\nselectEvents: function(tagName, eventType) {\n    ...\n}\n```\n\n它只能指定 tagName，\n\n不能用更方便的 selector 來選取想要的 element，\n\n我們應該要提供一個更聰明一點的 API 來做這件事情。\n\n關於這兩個問題點該怎麼重構，\n\n作者並沒有詳細說明，但我們可以直接去看 source code，\n\n這也是我們要將 CycleDOM import 進來的時候。\n\n> 小記一下，\n\n> 假如我們繼續用舊有版本的 run，\n\n> 那 `selectEvents` 會沒有被綁進去 source 裡面。\n\n> 蠻好玩的，可以想一想要怎麼解這一個問題。\n\n接下來的正式引進 cycle-dom 中的 makeDOMDriver，\n\n而原本的程式碼也要跟著做變動。\n\n沒有意外的，首先需要更動的就是 selectEvents \n\n```js\nconst mouseover$ = sources.DOM.select('span').events('mouseover');\n```\n\n這底下有一個 virtual dom來 handle 重繪，\n\n不會像我們先前一樣，每次一有更動，\n\n就重新 flush 整個畫面。\n\n而 h1, h 也變得更加強大，可以試試看在第一個參數傳入物件，\n\n可以自訂 attributes，以及調整 style。\n\n## Hello Wolrd\n\n啊！終於要開始 Hello world 了，\n\n跟以往不一樣的是我們已經跑了一次的底下大概會發生什麼事情，\n\n才跟世界說 hello。\n\n```js\nfunction main(sources) {\n    // return a sinks\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                label('Name:'),\n                input('.field', {\n                    type: \"text\"\n                }),\n                hr(),\n                h1('Hello !')\n            ]))\n    }\n}\n```\n\n現在我們用剛剛學到的 select跟 events 來處理一下 input 的 events。\n\n注意到我們在 input function 那裏的第一個參數寫下 `.filed`，\n\n會自動變成帶有 field class 的 input 。\n\n（準確一點來說應該是 return 一個 virtual dom 的 element）\n\n長這樣：\n\n```js\n{tagName: \"INPUT\", properties: Object, children: Array[0], key: undefined, namespace: null…}\n```\n\n再來則是把 input event 以及 值給拿出來：\n\n```js\nconst inputEv$ = sources.DOM.select('.field').events('input'); \nconst name$ = inputEv$.map(ev => ev.target.value);\n```\n\n再來要做的事情很直觀，\n\n就是把 name$ 裏的值給 map 到 DOM 上面去......嗎？\n\n```js\n\nname$.map(name => \n        div([\n            label('Name:'),\n            input('.field', {\n                type: \"text\"\n            }),\n            hr(),\n            h1('Hello !')\n        ]))\n```\n\n實際上這樣的作法會讓畫面上什麼都沒有，\n\n因為 name$ 是 inputEv$ map 過後的結果，\n\n而一開始 inputEv$ 是空的，自然沒有任何東西會 return 啦！\n\n但要解決這個問題也很簡單，只需要`startWith`這個好用的 operator 即可。\n\n```js\nfunction main(sources) {\n    const inputEv$ = sources.DOM.select('.field').events('input');\n    const name$ = inputEv$\n        .map(ev => ev.target.value)\n        .startWith('World');\n    // return a sinks\n    return {\n        DOM: name$.map(name =>\n            div([\n                label('Name:'),\n                input('.field', {\n                    type: \"text\"\n                }),\n                hr(),\n                h1(`Hello ${name}!`)\n            ]))\n    }\n}\n\n```\n\nHello world 完成啦！\n\n## Counter\n\n在開始之前得提醒一下，\n\n跟 Redux 在開發之前得先想好 StateTree 的道理有點像，\n\n在 Cycle 中，我們會體會到要怎樣設計一個 Stream 的流向，\n\n而 UI 只要跟著這個 Flow 去變化就行了\n\n（狀態顯示為 Reactive 狂粉）\n\n> 來個經典的 Counter example 。\n\n廢話不多說，\n\n就先把頁面和 increment 以及 decrement 的 click stream 弄出來：\n\n\n```js\nfunction main(sources) {\n    const decrementClick$ = sources.DOM.select('#decrement').events('click');\n    const incrementClick$=sources.DOM.select('#increment').events('click');\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                button('#decrement', 'Decrement'),\n                button('#increment', 'Increment'),\n                p([\n                    label('0')\n                    ])\n                ])\n            )\n    }\n}\n\n```\n\n拿到 Stream 之後呢？\n\n```js\nconst decrementAction$ = decrementClick$.map(ev => -1);\n    const incrementAction$ = incrementClick$.map(ev => 1);\n    const number$ = Rx.Observable.of(0)\n        .merge(decrementAction$)\n        .merge(incrementAction$);\n```\n\n這裏並沒有得到我們想要的東西，\n\n來看一下 merge stream 是怎樣運作的，\n\n```\n0---------------- number$\n--(-1)-(-1)------ decrementAction$\n-------------1---incrementAction$\n    [merge]\n0-(-1)-(-1)--1---[merged$]\n```\n\n我們必須有個東西把 Stream 上所有的值給加總，\n\n想到 array 的 reduce 了嗎？\n\n其實 Rx 有提供一個 Operator 給我們做類似的操作：\n\n它叫做 `scan`。\n\n```js\nconst number$ = Rx.Observable.of(0)\n        .merge(decrementAction$)\n        .merge(incrementAction$)\n        .scan((prev, cur) => prev+cur);\n```\n\nCycle 強迫我們在一開始就想好資料的流向，\n\n以及事件的處理，如此我們在開發的時候能夠更深思熟慮一點，\n\n不會讓整個 Project 變得很 crazy。\n\n在簡單的 Counter 下這好處還不明顯，我目前也沒用 Cycle 寫過大型的產品，\n\n所以且讓我們繼續看下去。\n\n## Cycle Http Driver\n\n開發 web，我們當然會需要送 http request，\n\n所以我們就需要 http driver。\n\n這裏我們要從 github 的 api 來拿 users 資料。\n\n一樣先把基本的頁面弄出來\n\n```js\nfunction main(sources) {\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                button('.get_first', ['Get first user']),\n                div('.user_details', [\n                    h1('.user_name', '(name)'),\n                    h4('.email', '(email)'),\n                    a('.web', {href: 'google.com'},'(url)')\n                    ])\n                ])\n            )\n    }\n}\n```\n\n我們想讓使用者點下 get_first 的按鈕後，\n\n就拿到 user 的資料。\n\n前面有提到什麼是 read effect 跟 write effect，\n\neffect 會因應 logics 規則的變化，真正影響到外在世界。\n\n實際講起來太抽象了，我們現在把這個 App 中會發生的 effect 以及分類列出來，\n\n會清楚很多：\n\n```\nDOM Read effect : button clicked\nHTTP Write effect: send request\nHTTP Read effect: receive response\nDOM Write effect: user's data displayed\n```\n\n\n\n```js\nfunction main(sources) {\n    // DOM Read effect : button clicked\n    const clickEv$ = sources.DOM\n        .select('.get_user').events('click');\n    // HTTP Write effect: send request\n    const request$ = clickEv$.map(_ => {\n\n        return {\n            url: API_URL,\n            method: 'GET',\n        }\n    })\n    // HTTP Read effect: receive response\n    const response$$ = sources.HTTP\n        .filter(response$ => response$.request.url === API_URL)\n    const response$ = response$$.switch();\n    const firstUser$ = response$.map(res => res.body)\n    .startWith({});\n\n    // DOM Write effect: user's data displayed\n    return {\n        DOM: firstUser$.map(user =>\n            div([\n                button('.get_user', ['Get user']),\n                div('.user_details', [\n                    h1('.user_name', user.name),\n                    h4('.email', user.email),\n                    a('.web', {\n                        href: user.url\n                    }, user.url)\n                ])\n            ])\n        ),\n        HTTP: request$\n    }\n}\n```\n\n## BMI\n\n\n```js\nfunction main(sources) {\n\n    const changeWeight$ = sources.select('.weight').events('input')\n        .map(ev => ev.target.value);\n    const changeHeight$ = sources.select('.height').events('input')\n        .map(ev => ev.target.value);\n    // Need to combine two $,\n    // Like we use `zip` to arrays.\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return {\n        DOM: state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    }\n}\n```\n\n在處理 Stream 時，往 Collection 的方向想會舒服很多，\n\n因為我們處理 Array 也是如此，\n\n最後一篇我們將會來看看 Cycle.js 怎樣提高我們程式碼的複用性，\n\n學習用另一種方式去思考該怎樣拆解每個 Component。\n\n\n\n----\n\n# 參考資料\n\n- [閉包](http://openhome.cc/Gossip/JavaScript/Closure.html)\n\n- [Master the JavaScript Interview: What is a Closure?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.arfskyb6g)\n\n","source":"_posts/circle-js-2.md","raw":"---\ntitle: 做中學 Cycle.js（中）\ndate: 2016/1/24\nintro: \ntags: cycle.js observable\n---\n\nDrivers 和一些簡單的例子\n\n<!--more-->\n\n還沒看過上一篇的可以先去看上一篇了解 Cycle.js，\n\n這一篇會從 driver 開始講。\n\ndrivers 是在控制畫面的 render，\n\n但是我們目前的 driver 都是只能回傳字串，\n\n這一章節我們要真的來認真的操作 DOM，\n\n並且實作幾個小例子來看看 Cycle.js 這個框架是怎樣改變我們思考資料流的方式。\n\n## Making DOM driver more flexible\n\n這裏要來認真處理一下如何去從 object 去表示一個 DOM，\n\n假如你之前實作過一個 Virtual DOM 的話，\n\n我想會相當有幫助。\n\n```js\nfunction createElement(obj) {\n    const element = document.createElement(obj.tagName);\n    obj.children\n            .filter(c => typeof c === 'object')\n            .map(createElement)\n            .forEach(c => element.appendChild(c));\n        obj.children\n            .filter(c => typeof c === 'string')\n            .forEach(c => element.innerHTML += c);\n    return element;\n}\n```\n\n目前還只是沒加上 props 的簡化版。\n\n```js\nfunction DOMDriver(obj$) {\n    obj$.subscribe(obj => {\n        const container = document.querySelector('#app');\n        const element = createElement(obj)\n        // Refresh\n        container.innerHTML = '';\n        container.appendChild(element);\n    })\n    const DOMSource = Observable.fromEvent(document, \"click\");\n    return DOMSource\n}\n```\n\n這裏使用了 appendChild，所以如果不每次都清空的話，\n\n等於每次都會 append 東西上來。\n\n## 在 DOM source 掌控更多事情\n\n回頭看一下我們的 Main，\n\n發現我們唯一能從 DOM 拿到的 event stream，\n\n居然只有 click$，這並不符合我們日常的開發情境，\n\n現在就來解決這個問題。\n\n解法很簡單，就是在 return DOMSource 的時候，\n\n給個能夠選取 tag 和 event type 的 interface。\n\n```js\nconst DOMSource = {\n    selectEvents: function(tagName, eventType) {\n        return Observable.fromEvent(document, eventType)\n            .filter(e => e.target.tagName === tagName.toUpperCase());\n    }\n};\n```\n\n這裏當然還是不夠 general 的版本，\n\n不過這樣我們在 main function 裡面就能夠簡單的選取另一個 event 了。\n\n## h()\n\n一開始我也很疑惑 h 是啥？\n\n答案很簡單， \"h\" stands for html\n\n```\nfunction h(tagName, children) {\n    return {\n        tagName,\n        children\n    }\n} \n\nfunction h1(children) {\n    return h('H1', children);\n}\n```\n\n讓我們在 main 中要建造 elements 時省去不少力氣。\n\n而 h1、h2、span⋯⋯等等你想得到的 tag，\n\n都能藉由 function 來表示，\n\n並且語法看起來也很簡單，\n\n連我到後來都不禁思考：「**我們真的需要 jsx 嗎**？」\n\n目前只是比較簡單的語法，還沒考慮到 properties，\n\n在 main 中的長相大概會像這樣：\n\n```js\nObservable.timer(0, 1000)\n          .map(i =>\n                h1([\n                    span([\n                        `Seconds elapsed ${i}`\n                    ])\n                ]))\n```\n\n## Way to Real Driver\n\n處理完語法後，我們來看看怎樣寫出一個更 serious 一點的 driver。\n\n第一個發現的問題就是我們又把整個 Component 要 mount 的地方寫死了，\n\n```js\nDOMDriver(obj$) => {\n        obj$.subscribe(obj => {\n            // hard code\n            const container = document.querySelector('#app');\n            const element = createElement(obj)\n            container.innerHTML = '';\n            container.appendChild(element);\n        })\n        const DOMSource = {\n            selectEvents: function(tagName, eventType) {\n                return Observable.fromEvent(document, eventType)\n                    .filter(e => e.target.tagName === tagName.toUpperCase());\n            }\n        };\n        return DOMSource\n    }\n```\n\n這樣的寫法讓我們必須要在 DOM 上一定要有 id 為 app 的 element，\n\n才能夠啟用 DOMDriver。\n\nDOMDriver 是一個 function，\n\n所以我們只要能回傳一個「客製化」的 function，\n\n這件事情不就解決了嗎？\n\n這裏運用到了 JavaScript 中「閉包(Closure)」的概念，\n\n\n\n```js\nfunction makeDOMDriver(mountSelector) {\n    return (obj$) => {\n        obj$.subscribe(obj => {\n            const container = document.querySelector(mountSelector);\n            const element = createElement(obj)\n            container.innerHTML = '';\n            container.appendChild(element);\n        })\n        const DOMSource = {\n            selectEvents: function(tagName, eventType) {\n                return Observable.fromEvent(document, eventType)\n                    .filter(e => e.target.tagName === tagName.toUpperCase());\n            }\n        };\n        return DOMSource\n    }\n}\nconst drivers = {\n    DOM: makeDOMDriver('#app'),\n    Log: consoleLogDriver,\n}\n```\n\n下一個問題則是：\n\n```js\ncontainer.innerHTML = '';\n```\n假如要 bind 到 DOM 上面是一個很大的 object，\n\n那我們會遭遇到效能的問題。\n\n再來則是 `selectEvents` 這個 function：\n\n```js\nselectEvents: function(tagName, eventType) {\n    ...\n}\n```\n\n它只能指定 tagName，\n\n不能用更方便的 selector 來選取想要的 element，\n\n我們應該要提供一個更聰明一點的 API 來做這件事情。\n\n關於這兩個問題點該怎麼重構，\n\n作者並沒有詳細說明，但我們可以直接去看 source code，\n\n這也是我們要將 CycleDOM import 進來的時候。\n\n> 小記一下，\n\n> 假如我們繼續用舊有版本的 run，\n\n> 那 `selectEvents` 會沒有被綁進去 source 裡面。\n\n> 蠻好玩的，可以想一想要怎麼解這一個問題。\n\n接下來的正式引進 cycle-dom 中的 makeDOMDriver，\n\n而原本的程式碼也要跟著做變動。\n\n沒有意外的，首先需要更動的就是 selectEvents \n\n```js\nconst mouseover$ = sources.DOM.select('span').events('mouseover');\n```\n\n這底下有一個 virtual dom來 handle 重繪，\n\n不會像我們先前一樣，每次一有更動，\n\n就重新 flush 整個畫面。\n\n而 h1, h 也變得更加強大，可以試試看在第一個參數傳入物件，\n\n可以自訂 attributes，以及調整 style。\n\n## Hello Wolrd\n\n啊！終於要開始 Hello world 了，\n\n跟以往不一樣的是我們已經跑了一次的底下大概會發生什麼事情，\n\n才跟世界說 hello。\n\n```js\nfunction main(sources) {\n    // return a sinks\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                label('Name:'),\n                input('.field', {\n                    type: \"text\"\n                }),\n                hr(),\n                h1('Hello !')\n            ]))\n    }\n}\n```\n\n現在我們用剛剛學到的 select跟 events 來處理一下 input 的 events。\n\n注意到我們在 input function 那裏的第一個參數寫下 `.filed`，\n\n會自動變成帶有 field class 的 input 。\n\n（準確一點來說應該是 return 一個 virtual dom 的 element）\n\n長這樣：\n\n```js\n{tagName: \"INPUT\", properties: Object, children: Array[0], key: undefined, namespace: null…}\n```\n\n再來則是把 input event 以及 值給拿出來：\n\n```js\nconst inputEv$ = sources.DOM.select('.field').events('input'); \nconst name$ = inputEv$.map(ev => ev.target.value);\n```\n\n再來要做的事情很直觀，\n\n就是把 name$ 裏的值給 map 到 DOM 上面去......嗎？\n\n```js\n\nname$.map(name => \n        div([\n            label('Name:'),\n            input('.field', {\n                type: \"text\"\n            }),\n            hr(),\n            h1('Hello !')\n        ]))\n```\n\n實際上這樣的作法會讓畫面上什麼都沒有，\n\n因為 name$ 是 inputEv$ map 過後的結果，\n\n而一開始 inputEv$ 是空的，自然沒有任何東西會 return 啦！\n\n但要解決這個問題也很簡單，只需要`startWith`這個好用的 operator 即可。\n\n```js\nfunction main(sources) {\n    const inputEv$ = sources.DOM.select('.field').events('input');\n    const name$ = inputEv$\n        .map(ev => ev.target.value)\n        .startWith('World');\n    // return a sinks\n    return {\n        DOM: name$.map(name =>\n            div([\n                label('Name:'),\n                input('.field', {\n                    type: \"text\"\n                }),\n                hr(),\n                h1(`Hello ${name}!`)\n            ]))\n    }\n}\n\n```\n\nHello world 完成啦！\n\n## Counter\n\n在開始之前得提醒一下，\n\n跟 Redux 在開發之前得先想好 StateTree 的道理有點像，\n\n在 Cycle 中，我們會體會到要怎樣設計一個 Stream 的流向，\n\n而 UI 只要跟著這個 Flow 去變化就行了\n\n（狀態顯示為 Reactive 狂粉）\n\n> 來個經典的 Counter example 。\n\n廢話不多說，\n\n就先把頁面和 increment 以及 decrement 的 click stream 弄出來：\n\n\n```js\nfunction main(sources) {\n    const decrementClick$ = sources.DOM.select('#decrement').events('click');\n    const incrementClick$=sources.DOM.select('#increment').events('click');\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                button('#decrement', 'Decrement'),\n                button('#increment', 'Increment'),\n                p([\n                    label('0')\n                    ])\n                ])\n            )\n    }\n}\n\n```\n\n拿到 Stream 之後呢？\n\n```js\nconst decrementAction$ = decrementClick$.map(ev => -1);\n    const incrementAction$ = incrementClick$.map(ev => 1);\n    const number$ = Rx.Observable.of(0)\n        .merge(decrementAction$)\n        .merge(incrementAction$);\n```\n\n這裏並沒有得到我們想要的東西，\n\n來看一下 merge stream 是怎樣運作的，\n\n```\n0---------------- number$\n--(-1)-(-1)------ decrementAction$\n-------------1---incrementAction$\n    [merge]\n0-(-1)-(-1)--1---[merged$]\n```\n\n我們必須有個東西把 Stream 上所有的值給加總，\n\n想到 array 的 reduce 了嗎？\n\n其實 Rx 有提供一個 Operator 給我們做類似的操作：\n\n它叫做 `scan`。\n\n```js\nconst number$ = Rx.Observable.of(0)\n        .merge(decrementAction$)\n        .merge(incrementAction$)\n        .scan((prev, cur) => prev+cur);\n```\n\nCycle 強迫我們在一開始就想好資料的流向，\n\n以及事件的處理，如此我們在開發的時候能夠更深思熟慮一點，\n\n不會讓整個 Project 變得很 crazy。\n\n在簡單的 Counter 下這好處還不明顯，我目前也沒用 Cycle 寫過大型的產品，\n\n所以且讓我們繼續看下去。\n\n## Cycle Http Driver\n\n開發 web，我們當然會需要送 http request，\n\n所以我們就需要 http driver。\n\n這裏我們要從 github 的 api 來拿 users 資料。\n\n一樣先把基本的頁面弄出來\n\n```js\nfunction main(sources) {\n    return {\n        DOM: Rx.Observable.of(\n            div([\n                button('.get_first', ['Get first user']),\n                div('.user_details', [\n                    h1('.user_name', '(name)'),\n                    h4('.email', '(email)'),\n                    a('.web', {href: 'google.com'},'(url)')\n                    ])\n                ])\n            )\n    }\n}\n```\n\n我們想讓使用者點下 get_first 的按鈕後，\n\n就拿到 user 的資料。\n\n前面有提到什麼是 read effect 跟 write effect，\n\neffect 會因應 logics 規則的變化，真正影響到外在世界。\n\n實際講起來太抽象了，我們現在把這個 App 中會發生的 effect 以及分類列出來，\n\n會清楚很多：\n\n```\nDOM Read effect : button clicked\nHTTP Write effect: send request\nHTTP Read effect: receive response\nDOM Write effect: user's data displayed\n```\n\n\n\n```js\nfunction main(sources) {\n    // DOM Read effect : button clicked\n    const clickEv$ = sources.DOM\n        .select('.get_user').events('click');\n    // HTTP Write effect: send request\n    const request$ = clickEv$.map(_ => {\n\n        return {\n            url: API_URL,\n            method: 'GET',\n        }\n    })\n    // HTTP Read effect: receive response\n    const response$$ = sources.HTTP\n        .filter(response$ => response$.request.url === API_URL)\n    const response$ = response$$.switch();\n    const firstUser$ = response$.map(res => res.body)\n    .startWith({});\n\n    // DOM Write effect: user's data displayed\n    return {\n        DOM: firstUser$.map(user =>\n            div([\n                button('.get_user', ['Get user']),\n                div('.user_details', [\n                    h1('.user_name', user.name),\n                    h4('.email', user.email),\n                    a('.web', {\n                        href: user.url\n                    }, user.url)\n                ])\n            ])\n        ),\n        HTTP: request$\n    }\n}\n```\n\n## BMI\n\n\n```js\nfunction main(sources) {\n\n    const changeWeight$ = sources.select('.weight').events('input')\n        .map(ev => ev.target.value);\n    const changeHeight$ = sources.select('.height').events('input')\n        .map(ev => ev.target.value);\n    // Need to combine two $,\n    // Like we use `zip` to arrays.\n    const state$ = Rx.Observable.combineLatest(\n        changeWeight$,\n        changeHeight$, (weight, height) => {\n            const heightM = height/100;\n            const bmi = Math.round(weight / (heightM * heightM));\n            return {\n                bmi, weight, height\n            }\n        })\n    return {\n        DOM: state$.map(state =>\n            div([\n                div([\n                    label(`Weight: ${state.weight}kg`),\n                    input('.weight', {\n                        type: 'range',\n                        min: 40,\n                        max: 150,\n                        value: state.weight\n                    })\n                ]),\n                div([\n                    label(`Height: ${state.height}cm`),\n                    input('.height', {\n                        type: 'range',\n                        min: 140,\n                        max: 250,\n                        value: state.height\n                    })\n\n                ]),\n                h1(`BMI is ${state.bmi}`)\n            ])\n        )\n    }\n}\n```\n\n在處理 Stream 時，往 Collection 的方向想會舒服很多，\n\n因為我們處理 Array 也是如此，\n\n最後一篇我們將會來看看 Cycle.js 怎樣提高我們程式碼的複用性，\n\n學習用另一種方式去思考該怎樣拆解每個 Component。\n\n\n\n----\n\n# 參考資料\n\n- [閉包](http://openhome.cc/Gossip/JavaScript/Closure.html)\n\n- [Master the JavaScript Interview: What is a Closure?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.arfskyb6g)\n\n","slug":"circle-js-2","published":1,"updated":"2016-04-24T13:02:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5q0004f60643ta941o","content":"<p>Drivers 和一些簡單的例子</p>\n<a id=\"more\"></a>\n<p>還沒看過上一篇的可以先去看上一篇了解 Cycle.js，</p>\n<p>這一篇會從 driver 開始講。</p>\n<p>drivers 是在控制畫面的 render，</p>\n<p>但是我們目前的 driver 都是只能回傳字串，</p>\n<p>這一章節我們要真的來認真的操作 DOM，</p>\n<p>並且實作幾個小例子來看看 Cycle.js 這個框架是怎樣改變我們思考資料流的方式。</p>\n<h2 id=\"Making-DOM-driver-more-flexible\"><a href=\"#Making-DOM-driver-more-flexible\" class=\"headerlink\" title=\"Making DOM driver more flexible\"></a>Making DOM driver more flexible</h2><p>這裏要來認真處理一下如何去從 object 去表示一個 DOM，</p>\n<p>假如你之前實作過一個 Virtual DOM 的話，</p>\n<p>我想會相當有幫助。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(obj.tagName);</span><br><span class=\"line\">    obj.children</span><br><span class=\"line\">            .filter(c =&gt; <span class=\"keyword\">typeof</span> c === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">            .map(createElement)</span><br><span class=\"line\">            .forEach(c =&gt; element.appendChild(c));</span><br><span class=\"line\">        obj.children</span><br><span class=\"line\">            .filter(c =&gt; <span class=\"keyword\">typeof</span> c === <span class=\"string\">'string'</span>)</span><br><span class=\"line\">            .forEach(c =&gt; element.innerHTML += c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前還只是沒加上 props 的簡化版。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">obj$</span>) </span>&#123;</span><br><span class=\"line\">    obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">        <span class=\"comment\">// Refresh</span></span><br><span class=\"line\">        container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">        container.appendChild(element);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = Observable.fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏使用了 appendChild，所以如果不每次都清空的話，</p>\n<p>等於每次都會 append 東西上來。</p>\n<h2 id=\"在-DOM-source-掌控更多事情\"><a href=\"#在-DOM-source-掌控更多事情\" class=\"headerlink\" title=\"在 DOM source 掌控更多事情\"></a>在 DOM source 掌控更多事情</h2><p>回頭看一下我們的 Main，</p>\n<p>發現我們唯一能從 DOM 拿到的 event stream，</p>\n<p>居然只有 click$，這並不符合我們日常的開發情境，</p>\n<p>現在就來解決這個問題。</p>\n<p>解法很簡單，就是在 return DOMSource 的時候，</p>\n<p>給個能夠選取 tag 和 event type 的 interface。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">    selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">            .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>這裏當然還是不夠 general 的版本，</p>\n<p>不過這樣我們在 main function 裡面就能夠簡單的選取另一個 event 了。</p>\n<h2 id=\"h\"><a href=\"#h\" class=\"headerlink\" title=\"h()\"></a>h()</h2><p>一開始我也很疑惑 h 是啥？</p>\n<p>答案很簡單， “h” stands for html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function h(tagName, children) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tagName,</span><br><span class=\"line\">        children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">function h1(children) &#123;</span><br><span class=\"line\">    return h(&apos;H1&apos;, children);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>讓我們在 main 中要建造 elements 時省去不少力氣。</p>\n<p>而 h1、h2、span⋯⋯等等你想得到的 tag，</p>\n<p>都能藉由 function 來表示，</p>\n<p>並且語法看起來也很簡單，</p>\n<p>連我到後來都不禁思考：「<strong>我們真的需要 jsx 嗎</strong>？」</p>\n<p>目前只是比較簡單的語法，還沒考慮到 properties，</p>\n<p>在 main 中的長相大概會像這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">          .map(i =&gt;</span><br><span class=\"line\">                h1([</span><br><span class=\"line\">                    span([</span><br><span class=\"line\">                        <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span></span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Way-to-Real-Driver\"><a href=\"#Way-to-Real-Driver\" class=\"headerlink\" title=\"Way to Real Driver\"></a>Way to Real Driver</h2><p>處理完語法後，我們來看看怎樣寫出一個更 serious 一點的 driver。</p>\n<p>第一個發現的問題就是我們又把整個 Component 要 mount 的地方寫死了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOMDriver(obj$) =&gt; &#123;</span><br><span class=\"line\">        obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// hard code</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">            container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">            container.appendChild(element);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">            selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">                    .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>這樣的寫法讓我們必須要在 DOM 上一定要有 id 為 app 的 element，</p>\n<p>才能夠啟用 DOMDriver。</p>\n<p>DOMDriver 是一個 function，</p>\n<p>所以我們只要能回傳一個「客製化」的 function，</p>\n<p>這件事情不就解決了嗎？</p>\n<p>這裏運用到了 JavaScript 中「閉包(Closure)」的概念，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeDOMDriver</span>(<span class=\"params\">mountSelector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (obj$) =&gt; &#123;</span><br><span class=\"line\">        obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(mountSelector);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">            container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">            container.appendChild(element);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">            selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">                    .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">    Log: consoleLogDriver,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一個問題則是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container.innerHTML = <span class=\"string\">''</span>;</span><br></pre></td></tr></table></figure>\n<p>假如要 bind 到 DOM 上面是一個很大的 object，</p>\n<p>那我們會遭遇到效能的問題。</p>\n<p>再來則是 <code>selectEvents</code> 這個 function：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它只能指定 tagName，</p>\n<p>不能用更方便的 selector 來選取想要的 element，</p>\n<p>我們應該要提供一個更聰明一點的 API 來做這件事情。</p>\n<p>關於這兩個問題點該怎麼重構，</p>\n<p>作者並沒有詳細說明，但我們可以直接去看 source code，</p>\n<p>這也是我們要將 CycleDOM import 進來的時候。</p>\n<blockquote>\n<p>小記一下，</p>\n<p>假如我們繼續用舊有版本的 run，</p>\n<p>那 <code>selectEvents</code> 會沒有被綁進去 source 裡面。</p>\n<p>蠻好玩的，可以想一想要怎麼解這一個問題。</p>\n</blockquote>\n<p>接下來的正式引進 cycle-dom 中的 makeDOMDriver，</p>\n<p>而原本的程式碼也要跟著做變動。</p>\n<p>沒有意外的，首先需要更動的就是 selectEvents </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mouseover$ = sources.DOM.select(<span class=\"string\">'span'</span>).events(<span class=\"string\">'mouseover'</span>);</span><br></pre></td></tr></table></figure>\n<p>這底下有一個 virtual dom來 handle 重繪，</p>\n<p>不會像我們先前一樣，每次一有更動，</p>\n<p>就重新 flush 整個畫面。</p>\n<p>而 h1, h 也變得更加強大，可以試試看在第一個參數傳入物件，</p>\n<p>可以自訂 attributes，以及調整 style。</p>\n<h2 id=\"Hello-Wolrd\"><a href=\"#Hello-Wolrd\" class=\"headerlink\" title=\"Hello Wolrd\"></a>Hello Wolrd</h2><p>啊！終於要開始 Hello world 了，</p>\n<p>跟以往不一樣的是我們已經跑了一次的底下大概會發生什麼事情，</p>\n<p>才跟世界說 hello。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return a sinks</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">                input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                hr(),</span><br><span class=\"line\">                h1(<span class=\"string\">'Hello !'</span>)</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在我們用剛剛學到的 select跟 events 來處理一下 input 的 events。</p>\n<p>注意到我們在 input function 那裏的第一個參數寫下 <code>.filed</code>，</p>\n<p>會自動變成帶有 field class 的 input 。</p>\n<p>（準確一點來說應該是 return 一個 virtual dom 的 element）</p>\n<p>長這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;tagName: <span class=\"string\">\"INPUT\"</span>, properties: <span class=\"built_in\">Object</span>, children: <span class=\"built_in\">Array</span>[<span class=\"number\">0</span>], key: <span class=\"literal\">undefined</span>, namespace: <span class=\"literal\">null</span>…&#125;</span><br></pre></td></tr></table></figure>\n<p>再來則是把 input event 以及 值給拿出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputEv$ = sources.DOM.select(<span class=\"string\">'.field'</span>).events(<span class=\"string\">'input'</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> name$ = inputEv$.map(ev =&gt; ev.target.value);</span><br></pre></td></tr></table></figure>\n<p>再來要做的事情很直觀，</p>\n<p>就是把 name$ 裏的值給 map 到 DOM 上面去……嗎？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name$.map(name =&gt; </span><br><span class=\"line\">        div([</span><br><span class=\"line\">            label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">            input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            hr(),</span><br><span class=\"line\">            h1(<span class=\"string\">'Hello !'</span>)</span><br><span class=\"line\">        ]))</span><br></pre></td></tr></table></figure>\n<p>實際上這樣的作法會讓畫面上什麼都沒有，</p>\n<p>因為 name$ 是 inputEv$ map 過後的結果，</p>\n<p>而一開始 inputEv$ 是空的，自然沒有任何東西會 return 啦！</p>\n<p>但要解決這個問題也很簡單，只需要<code>startWith</code>這個好用的 operator 即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputEv$ = sources.DOM.select(<span class=\"string\">'.field'</span>).events(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name$ = inputEv$</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value)</span><br><span class=\"line\">        .startWith(<span class=\"string\">'World'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// return a sinks</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: name$.map(name =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">                input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                hr(),</span><br><span class=\"line\">                h1(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>)</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hello world 完成啦！</p>\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><p>在開始之前得提醒一下，</p>\n<p>跟 Redux 在開發之前得先想好 StateTree 的道理有點像，</p>\n<p>在 Cycle 中，我們會體會到要怎樣設計一個 Stream 的流向，</p>\n<p>而 UI 只要跟著這個 Flow 去變化就行了</p>\n<p>（狀態顯示為 Reactive 狂粉）</p>\n<blockquote>\n<p>來個經典的 Counter example 。</p>\n</blockquote>\n<p>廢話不多說，</p>\n<p>就先把頁面和 increment 以及 decrement 的 click stream 弄出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decrementClick$ = sources.DOM.select(<span class=\"string\">'#decrement'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> incrementClick$=sources.DOM.select(<span class=\"string\">'#increment'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'#decrement'</span>, <span class=\"string\">'Decrement'</span>),</span><br><span class=\"line\">                button(<span class=\"string\">'#increment'</span>, <span class=\"string\">'Increment'</span>),</span><br><span class=\"line\">                p([</span><br><span class=\"line\">                    label(<span class=\"string\">'0'</span>)</span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>拿到 Stream 之後呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> decrementAction$ = decrementClick$.map(ev =&gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> incrementAction$ = incrementClick$.map(ev =&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> number$ = Rx.Observable.of(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .merge(decrementAction$)</span><br><span class=\"line\">        .merge(incrementAction$);</span><br></pre></td></tr></table></figure>\n<p>這裏並沒有得到我們想要的東西，</p>\n<p>來看一下 merge stream 是怎樣運作的，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0---------------- number$</span><br><span class=\"line\">--(-1)-(-1)------ decrementAction$</span><br><span class=\"line\">-------------1---incrementAction$</span><br><span class=\"line\">    [merge]</span><br><span class=\"line\">0-(-1)-(-1)--1---[merged$]</span><br></pre></td></tr></table></figure>\n<p>我們必須有個東西把 Stream 上所有的值給加總，</p>\n<p>想到 array 的 reduce 了嗎？</p>\n<p>其實 Rx 有提供一個 Operator 給我們做類似的操作：</p>\n<p>它叫做 <code>scan</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> number$ = Rx.Observable.of(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .merge(decrementAction$)</span><br><span class=\"line\">        .merge(incrementAction$)</span><br><span class=\"line\">        .scan((prev, cur) =&gt; prev+cur);</span><br></pre></td></tr></table></figure>\n<p>Cycle 強迫我們在一開始就想好資料的流向，</p>\n<p>以及事件的處理，如此我們在開發的時候能夠更深思熟慮一點，</p>\n<p>不會讓整個 Project 變得很 crazy。</p>\n<p>在簡單的 Counter 下這好處還不明顯，我目前也沒用 Cycle 寫過大型的產品，</p>\n<p>所以且讓我們繼續看下去。</p>\n<h2 id=\"Cycle-Http-Driver\"><a href=\"#Cycle-Http-Driver\" class=\"headerlink\" title=\"Cycle Http Driver\"></a>Cycle Http Driver</h2><p>開發 web，我們當然會需要送 http request，</p>\n<p>所以我們就需要 http driver。</p>\n<p>這裏我們要從 github 的 api 來拿 users 資料。</p>\n<p>一樣先把基本的頁面弄出來</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'.get_first'</span>, [<span class=\"string\">'Get first user'</span>]),</span><br><span class=\"line\">                div(<span class=\"string\">'.user_details'</span>, [</span><br><span class=\"line\">                    h1(<span class=\"string\">'.user_name'</span>, <span class=\"string\">'(name)'</span>),</span><br><span class=\"line\">                    h4(<span class=\"string\">'.email'</span>, <span class=\"string\">'(email)'</span>),</span><br><span class=\"line\">                    a(<span class=\"string\">'.web'</span>, &#123;href: <span class=\"string\">'google.com'</span>&#125;,<span class=\"string\">'(url)'</span>)</span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們想讓使用者點下 get_first 的按鈕後，</p>\n<p>就拿到 user 的資料。</p>\n<p>前面有提到什麼是 read effect 跟 write effect，</p>\n<p>effect 會因應 logics 規則的變化，真正影響到外在世界。</p>\n<p>實際講起來太抽象了，我們現在把這個 App 中會發生的 effect 以及分類列出來，</p>\n<p>會清楚很多：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM Read effect : button clicked</span><br><span class=\"line\">HTTP Write effect: send request</span><br><span class=\"line\">HTTP Read effect: receive response</span><br><span class=\"line\">DOM Write effect: user&apos;s data displayed</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM Read effect : button clicked</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> clickEv$ = sources.DOM</span><br><span class=\"line\">        .select(<span class=\"string\">'.get_user'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// HTTP Write effect: send request</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> request$ = clickEv$.map(_ =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            url: API_URL,</span><br><span class=\"line\">            method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// HTTP Read effect: receive response</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response$$ = sources.HTTP</span><br><span class=\"line\">        .filter(response$ =&gt; response$.request.url === API_URL)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response$ = response$$.<span class=\"keyword\">switch</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstUser$ = response$.map(res =&gt; res.body)</span><br><span class=\"line\">    .startWith(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DOM Write effect: user's data displayed</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: firstUser$.map(user =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'.get_user'</span>, [<span class=\"string\">'Get user'</span>]),</span><br><span class=\"line\">                div(<span class=\"string\">'.user_details'</span>, [</span><br><span class=\"line\">                    h1(<span class=\"string\">'.user_name'</span>, user.name),</span><br><span class=\"line\">                    h4(<span class=\"string\">'.email'</span>, user.email),</span><br><span class=\"line\">                    a(<span class=\"string\">'.web'</span>, &#123;</span><br><span class=\"line\">                        href: user.url</span><br><span class=\"line\">                    &#125;, user.url)</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        HTTP: request$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BMI\"><a href=\"#BMI\" class=\"headerlink\" title=\"BMI\"></a>BMI</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = sources.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = sources.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"comment\">// Need to combine two $,</span></span><br><span class=\"line\">    <span class=\"comment\">// Like we use `zip` to arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在處理 Stream 時，往 Collection 的方向想會舒服很多，</p>\n<p>因為我們處理 Array 也是如此，</p>\n<p>最後一篇我們將會來看看 Cycle.js 怎樣提高我們程式碼的複用性，</p>\n<p>學習用另一種方式去思考該怎樣拆解每個 Component。</p>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://openhome.cc/Gossip/JavaScript/Closure.html\" target=\"_blank\" rel=\"external\">閉包</a></p>\n</li>\n<li><p><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.arfskyb6g\" target=\"_blank\" rel=\"external\">Master the JavaScript Interview: What is a Closure?</a></p>\n</li>\n</ul>\n","excerpt":"<p>Drivers 和一些簡單的例子</p>","more":"<p>還沒看過上一篇的可以先去看上一篇了解 Cycle.js，</p>\n<p>這一篇會從 driver 開始講。</p>\n<p>drivers 是在控制畫面的 render，</p>\n<p>但是我們目前的 driver 都是只能回傳字串，</p>\n<p>這一章節我們要真的來認真的操作 DOM，</p>\n<p>並且實作幾個小例子來看看 Cycle.js 這個框架是怎樣改變我們思考資料流的方式。</p>\n<h2 id=\"Making-DOM-driver-more-flexible\"><a href=\"#Making-DOM-driver-more-flexible\" class=\"headerlink\" title=\"Making DOM driver more flexible\"></a>Making DOM driver more flexible</h2><p>這裏要來認真處理一下如何去從 object 去表示一個 DOM，</p>\n<p>假如你之前實作過一個 Virtual DOM 的話，</p>\n<p>我想會相當有幫助。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(obj.tagName);</span><br><span class=\"line\">    obj.children</span><br><span class=\"line\">            .filter(c =&gt; <span class=\"keyword\">typeof</span> c === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">            .map(createElement)</span><br><span class=\"line\">            .forEach(c =&gt; element.appendChild(c));</span><br><span class=\"line\">        obj.children</span><br><span class=\"line\">            .filter(c =&gt; <span class=\"keyword\">typeof</span> c === <span class=\"string\">'string'</span>)</span><br><span class=\"line\">            .forEach(c =&gt; element.innerHTML += c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前還只是沒加上 props 的簡化版。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">obj$</span>) </span>&#123;</span><br><span class=\"line\">    obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">        <span class=\"comment\">// Refresh</span></span><br><span class=\"line\">        container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">        container.appendChild(element);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = Observable.fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裏使用了 appendChild，所以如果不每次都清空的話，</p>\n<p>等於每次都會 append 東西上來。</p>\n<h2 id=\"在-DOM-source-掌控更多事情\"><a href=\"#在-DOM-source-掌控更多事情\" class=\"headerlink\" title=\"在 DOM source 掌控更多事情\"></a>在 DOM source 掌控更多事情</h2><p>回頭看一下我們的 Main，</p>\n<p>發現我們唯一能從 DOM 拿到的 event stream，</p>\n<p>居然只有 click$，這並不符合我們日常的開發情境，</p>\n<p>現在就來解決這個問題。</p>\n<p>解法很簡單，就是在 return DOMSource 的時候，</p>\n<p>給個能夠選取 tag 和 event type 的 interface。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">    selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">            .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>這裏當然還是不夠 general 的版本，</p>\n<p>不過這樣我們在 main function 裡面就能夠簡單的選取另一個 event 了。</p>\n<h2 id=\"h\"><a href=\"#h\" class=\"headerlink\" title=\"h()\"></a>h()</h2><p>一開始我也很疑惑 h 是啥？</p>\n<p>答案很簡單， “h” stands for html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function h(tagName, children) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tagName,</span><br><span class=\"line\">        children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">function h1(children) &#123;</span><br><span class=\"line\">    return h(&apos;H1&apos;, children);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>讓我們在 main 中要建造 elements 時省去不少力氣。</p>\n<p>而 h1、h2、span⋯⋯等等你想得到的 tag，</p>\n<p>都能藉由 function 來表示，</p>\n<p>並且語法看起來也很簡單，</p>\n<p>連我到後來都不禁思考：「<strong>我們真的需要 jsx 嗎</strong>？」</p>\n<p>目前只是比較簡單的語法，還沒考慮到 properties，</p>\n<p>在 main 中的長相大概會像這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">          .map(i =&gt;</span><br><span class=\"line\">                h1([</span><br><span class=\"line\">                    span([</span><br><span class=\"line\">                        <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span></span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Way-to-Real-Driver\"><a href=\"#Way-to-Real-Driver\" class=\"headerlink\" title=\"Way to Real Driver\"></a>Way to Real Driver</h2><p>處理完語法後，我們來看看怎樣寫出一個更 serious 一點的 driver。</p>\n<p>第一個發現的問題就是我們又把整個 Component 要 mount 的地方寫死了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOMDriver(obj$) =&gt; &#123;</span><br><span class=\"line\">        obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// hard code</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">            container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">            container.appendChild(element);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">            selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">                    .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>這樣的寫法讓我們必須要在 DOM 上一定要有 id 為 app 的 element，</p>\n<p>才能夠啟用 DOMDriver。</p>\n<p>DOMDriver 是一個 function，</p>\n<p>所以我們只要能回傳一個「客製化」的 function，</p>\n<p>這件事情不就解決了嗎？</p>\n<p>這裏運用到了 JavaScript 中「閉包(Closure)」的概念，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeDOMDriver</span>(<span class=\"params\">mountSelector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (obj$) =&gt; &#123;</span><br><span class=\"line\">        obj$.subscribe(obj =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(mountSelector);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = createElement(obj)</span><br><span class=\"line\">            container.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">            container.appendChild(element);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> DOMSource = &#123;</span><br><span class=\"line\">            selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Observable.fromEvent(<span class=\"built_in\">document</span>, eventType)</span><br><span class=\"line\">                    .filter(e =&gt; e.target.tagName === tagName.toUpperCase());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: makeDOMDriver(<span class=\"string\">'#app'</span>),</span><br><span class=\"line\">    Log: consoleLogDriver,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一個問題則是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container.innerHTML = <span class=\"string\">''</span>;</span><br></pre></td></tr></table></figure>\n<p>假如要 bind 到 DOM 上面是一個很大的 object，</p>\n<p>那我們會遭遇到效能的問題。</p>\n<p>再來則是 <code>selectEvents</code> 這個 function：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tagName, eventType</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它只能指定 tagName，</p>\n<p>不能用更方便的 selector 來選取想要的 element，</p>\n<p>我們應該要提供一個更聰明一點的 API 來做這件事情。</p>\n<p>關於這兩個問題點該怎麼重構，</p>\n<p>作者並沒有詳細說明，但我們可以直接去看 source code，</p>\n<p>這也是我們要將 CycleDOM import 進來的時候。</p>\n<blockquote>\n<p>小記一下，</p>\n<p>假如我們繼續用舊有版本的 run，</p>\n<p>那 <code>selectEvents</code> 會沒有被綁進去 source 裡面。</p>\n<p>蠻好玩的，可以想一想要怎麼解這一個問題。</p>\n</blockquote>\n<p>接下來的正式引進 cycle-dom 中的 makeDOMDriver，</p>\n<p>而原本的程式碼也要跟著做變動。</p>\n<p>沒有意外的，首先需要更動的就是 selectEvents </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mouseover$ = sources.DOM.select(<span class=\"string\">'span'</span>).events(<span class=\"string\">'mouseover'</span>);</span><br></pre></td></tr></table></figure>\n<p>這底下有一個 virtual dom來 handle 重繪，</p>\n<p>不會像我們先前一樣，每次一有更動，</p>\n<p>就重新 flush 整個畫面。</p>\n<p>而 h1, h 也變得更加強大，可以試試看在第一個參數傳入物件，</p>\n<p>可以自訂 attributes，以及調整 style。</p>\n<h2 id=\"Hello-Wolrd\"><a href=\"#Hello-Wolrd\" class=\"headerlink\" title=\"Hello Wolrd\"></a>Hello Wolrd</h2><p>啊！終於要開始 Hello world 了，</p>\n<p>跟以往不一樣的是我們已經跑了一次的底下大概會發生什麼事情，</p>\n<p>才跟世界說 hello。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return a sinks</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">                input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                hr(),</span><br><span class=\"line\">                h1(<span class=\"string\">'Hello !'</span>)</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在我們用剛剛學到的 select跟 events 來處理一下 input 的 events。</p>\n<p>注意到我們在 input function 那裏的第一個參數寫下 <code>.filed</code>，</p>\n<p>會自動變成帶有 field class 的 input 。</p>\n<p>（準確一點來說應該是 return 一個 virtual dom 的 element）</p>\n<p>長這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;tagName: <span class=\"string\">\"INPUT\"</span>, properties: <span class=\"built_in\">Object</span>, children: <span class=\"built_in\">Array</span>[<span class=\"number\">0</span>], key: <span class=\"literal\">undefined</span>, namespace: <span class=\"literal\">null</span>…&#125;</span><br></pre></td></tr></table></figure>\n<p>再來則是把 input event 以及 值給拿出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputEv$ = sources.DOM.select(<span class=\"string\">'.field'</span>).events(<span class=\"string\">'input'</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> name$ = inputEv$.map(ev =&gt; ev.target.value);</span><br></pre></td></tr></table></figure>\n<p>再來要做的事情很直觀，</p>\n<p>就是把 name$ 裏的值給 map 到 DOM 上面去……嗎？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name$.map(name =&gt; </span><br><span class=\"line\">        div([</span><br><span class=\"line\">            label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">            input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            hr(),</span><br><span class=\"line\">            h1(<span class=\"string\">'Hello !'</span>)</span><br><span class=\"line\">        ]))</span><br></pre></td></tr></table></figure>\n<p>實際上這樣的作法會讓畫面上什麼都沒有，</p>\n<p>因為 name$ 是 inputEv$ map 過後的結果，</p>\n<p>而一開始 inputEv$ 是空的，自然沒有任何東西會 return 啦！</p>\n<p>但要解決這個問題也很簡單，只需要<code>startWith</code>這個好用的 operator 即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputEv$ = sources.DOM.select(<span class=\"string\">'.field'</span>).events(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name$ = inputEv$</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value)</span><br><span class=\"line\">        .startWith(<span class=\"string\">'World'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// return a sinks</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: name$.map(name =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                label(<span class=\"string\">'Name:'</span>),</span><br><span class=\"line\">                input(<span class=\"string\">'.field'</span>, &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                hr(),</span><br><span class=\"line\">                h1(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>)</span><br><span class=\"line\">            ]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hello world 完成啦！</p>\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><p>在開始之前得提醒一下，</p>\n<p>跟 Redux 在開發之前得先想好 StateTree 的道理有點像，</p>\n<p>在 Cycle 中，我們會體會到要怎樣設計一個 Stream 的流向，</p>\n<p>而 UI 只要跟著這個 Flow 去變化就行了</p>\n<p>（狀態顯示為 Reactive 狂粉）</p>\n<blockquote>\n<p>來個經典的 Counter example 。</p>\n</blockquote>\n<p>廢話不多說，</p>\n<p>就先把頁面和 increment 以及 decrement 的 click stream 弄出來：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decrementClick$ = sources.DOM.select(<span class=\"string\">'#decrement'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> incrementClick$=sources.DOM.select(<span class=\"string\">'#increment'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'#decrement'</span>, <span class=\"string\">'Decrement'</span>),</span><br><span class=\"line\">                button(<span class=\"string\">'#increment'</span>, <span class=\"string\">'Increment'</span>),</span><br><span class=\"line\">                p([</span><br><span class=\"line\">                    label(<span class=\"string\">'0'</span>)</span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>拿到 Stream 之後呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> decrementAction$ = decrementClick$.map(ev =&gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> incrementAction$ = incrementClick$.map(ev =&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> number$ = Rx.Observable.of(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .merge(decrementAction$)</span><br><span class=\"line\">        .merge(incrementAction$);</span><br></pre></td></tr></table></figure>\n<p>這裏並沒有得到我們想要的東西，</p>\n<p>來看一下 merge stream 是怎樣運作的，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0---------------- number$</span><br><span class=\"line\">--(-1)-(-1)------ decrementAction$</span><br><span class=\"line\">-------------1---incrementAction$</span><br><span class=\"line\">    [merge]</span><br><span class=\"line\">0-(-1)-(-1)--1---[merged$]</span><br></pre></td></tr></table></figure>\n<p>我們必須有個東西把 Stream 上所有的值給加總，</p>\n<p>想到 array 的 reduce 了嗎？</p>\n<p>其實 Rx 有提供一個 Operator 給我們做類似的操作：</p>\n<p>它叫做 <code>scan</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> number$ = Rx.Observable.of(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .merge(decrementAction$)</span><br><span class=\"line\">        .merge(incrementAction$)</span><br><span class=\"line\">        .scan((prev, cur) =&gt; prev+cur);</span><br></pre></td></tr></table></figure>\n<p>Cycle 強迫我們在一開始就想好資料的流向，</p>\n<p>以及事件的處理，如此我們在開發的時候能夠更深思熟慮一點，</p>\n<p>不會讓整個 Project 變得很 crazy。</p>\n<p>在簡單的 Counter 下這好處還不明顯，我目前也沒用 Cycle 寫過大型的產品，</p>\n<p>所以且讓我們繼續看下去。</p>\n<h2 id=\"Cycle-Http-Driver\"><a href=\"#Cycle-Http-Driver\" class=\"headerlink\" title=\"Cycle Http Driver\"></a>Cycle Http Driver</h2><p>開發 web，我們當然會需要送 http request，</p>\n<p>所以我們就需要 http driver。</p>\n<p>這裏我們要從 github 的 api 來拿 users 資料。</p>\n<p>一樣先把基本的頁面弄出來</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Rx.Observable.of(</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'.get_first'</span>, [<span class=\"string\">'Get first user'</span>]),</span><br><span class=\"line\">                div(<span class=\"string\">'.user_details'</span>, [</span><br><span class=\"line\">                    h1(<span class=\"string\">'.user_name'</span>, <span class=\"string\">'(name)'</span>),</span><br><span class=\"line\">                    h4(<span class=\"string\">'.email'</span>, <span class=\"string\">'(email)'</span>),</span><br><span class=\"line\">                    a(<span class=\"string\">'.web'</span>, &#123;href: <span class=\"string\">'google.com'</span>&#125;,<span class=\"string\">'(url)'</span>)</span><br><span class=\"line\">                    ])</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們想讓使用者點下 get_first 的按鈕後，</p>\n<p>就拿到 user 的資料。</p>\n<p>前面有提到什麼是 read effect 跟 write effect，</p>\n<p>effect 會因應 logics 規則的變化，真正影響到外在世界。</p>\n<p>實際講起來太抽象了，我們現在把這個 App 中會發生的 effect 以及分類列出來，</p>\n<p>會清楚很多：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM Read effect : button clicked</span><br><span class=\"line\">HTTP Write effect: send request</span><br><span class=\"line\">HTTP Read effect: receive response</span><br><span class=\"line\">DOM Write effect: user&apos;s data displayed</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM Read effect : button clicked</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> clickEv$ = sources.DOM</span><br><span class=\"line\">        .select(<span class=\"string\">'.get_user'</span>).events(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// HTTP Write effect: send request</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> request$ = clickEv$.map(_ =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            url: API_URL,</span><br><span class=\"line\">            method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// HTTP Read effect: receive response</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response$$ = sources.HTTP</span><br><span class=\"line\">        .filter(response$ =&gt; response$.request.url === API_URL)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response$ = response$$.<span class=\"keyword\">switch</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstUser$ = response$.map(res =&gt; res.body)</span><br><span class=\"line\">    .startWith(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DOM Write effect: user's data displayed</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: firstUser$.map(user =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                button(<span class=\"string\">'.get_user'</span>, [<span class=\"string\">'Get user'</span>]),</span><br><span class=\"line\">                div(<span class=\"string\">'.user_details'</span>, [</span><br><span class=\"line\">                    h1(<span class=\"string\">'.user_name'</span>, user.name),</span><br><span class=\"line\">                    h4(<span class=\"string\">'.email'</span>, user.email),</span><br><span class=\"line\">                    a(<span class=\"string\">'.web'</span>, &#123;</span><br><span class=\"line\">                        href: user.url</span><br><span class=\"line\">                    &#125;, user.url)</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        HTTP: request$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BMI\"><a href=\"#BMI\" class=\"headerlink\" title=\"BMI\"></a>BMI</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">sources</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeWeight$ = sources.select(<span class=\"string\">'.weight'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHeight$ = sources.select(<span class=\"string\">'.height'</span>).events(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">        .map(ev =&gt; ev.target.value);</span><br><span class=\"line\">    <span class=\"comment\">// Need to combine two $,</span></span><br><span class=\"line\">    <span class=\"comment\">// Like we use `zip` to arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state$ = Rx.Observable.combineLatest(</span><br><span class=\"line\">        changeWeight$,</span><br><span class=\"line\">        changeHeight$, (weight, height) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> heightM = height/<span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> bmi = <span class=\"built_in\">Math</span>.round(weight / (heightM * heightM));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                bmi, weight, height</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: state$.map(state =&gt;</span><br><span class=\"line\">            div([</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Weight: <span class=\"subst\">$&#123;state.weight&#125;</span>kg`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.weight'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">40</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">150</span>,</span><br><span class=\"line\">                        value: state.weight</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                div([</span><br><span class=\"line\">                    label(<span class=\"string\">`Height: <span class=\"subst\">$&#123;state.height&#125;</span>cm`</span>),</span><br><span class=\"line\">                    input(<span class=\"string\">'.height'</span>, &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'range'</span>,</span><br><span class=\"line\">                        min: <span class=\"number\">140</span>,</span><br><span class=\"line\">                        max: <span class=\"number\">250</span>,</span><br><span class=\"line\">                        value: state.height</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                ]),</span><br><span class=\"line\">                h1(<span class=\"string\">`BMI is <span class=\"subst\">$&#123;state.bmi&#125;</span>`</span>)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在處理 Stream 時，往 Collection 的方向想會舒服很多，</p>\n<p>因為我們處理 Array 也是如此，</p>\n<p>最後一篇我們將會來看看 Cycle.js 怎樣提高我們程式碼的複用性，</p>\n<p>學習用另一種方式去思考該怎樣拆解每個 Component。</p>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://openhome.cc/Gossip/JavaScript/Closure.html\">閉包</a></p>\n</li>\n<li><p><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.arfskyb6g\">Master the JavaScript Interview: What is a Closure?</a></p>\n</li>\n</ul>"},{"title":"Travis CI + github page","date":"2016-04-24T13:48:35.000Z","_content":"\n這週把原本自幹的靜態部落格轉到 hexo 去，\n\n想說辛苦都辛苦了，來整個 CI 也不錯。\n\n這篇主要紀錄一下如何用 Travis-CI + hexo 在 github page 上發布部落格\n\n<!--more-->\n\n","source":"_posts/simple-ci.md","raw":"---\ntitle: Travis CI + github page\ndate: 2016-04-24 21:48:35\ntags: CI, Travis CI, github page\n---\n\n這週把原本自幹的靜態部落格轉到 hexo 去，\n\n想說辛苦都辛苦了，來整個 CI 也不錯。\n\n這篇主要紀錄一下如何用 Travis-CI + hexo 在 github page 上發布部落格\n\n<!--more-->\n\n","slug":"simple-ci","published":1,"updated":"2016-04-24T13:50:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5s0006f606vzym4g13","content":"<p>這週把原本自幹的靜態部落格轉到 hexo 去，</p>\n<p>想說辛苦都辛苦了，來整個 CI 也不錯。</p>\n<p>這篇主要紀錄一下如何用 Travis-CI + hexo 在 github page 上發布部落格</p>\n<a id=\"more\"></a>\n","excerpt":"<p>這週把原本自幹的靜態部落格轉到 hexo 去，</p>\n<p>想說辛苦都辛苦了，來整個 CI 也不錯。</p>\n<p>這篇主要紀錄一下如何用 Travis-CI + hexo 在 github page 上發布部落格</p>","more":""},{"title":"做中學 Cycle.js（上）","date":"2016-01-22T16:00:00.000Z","intro":"Observable 是世界上最強的，其他東西都是——","_content":"\n之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，\n\n其實軟體開發裡面沒有銀彈，\n\n不過這種爭辯也更能夠激發出我們寫出更棒的軟體，\n\n並且去反思現行流行的東西真的是「好」的嗎？\n\n<!--more-->\n\nCycle.js 的作者也寫下一篇他認為為什麼 Redux + React 不那麼好的原因：\n\n- [WHY REACT/REDUX IS AN INFERIOR PARADIGM](http://staltz.com/why-react-redux-is-an-inferior-paradigm.html)\n\n同時間在 egghead.io 上也 release 了一個 Cycle.js 的課程：\n\n- [Lessons of Cycle.js](https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects)\n\n(等等，這時機推出課程，真的不是在打廣告嗎？)\n\n我認為這個課程還蠻推薦的原因有底下兩點：\n\n- **作者會告訴我們 Cycle.js 這樣設計的理念**\n  對我來說在學習一個框架時，\n  如果你不能理解為什麼要這樣設計，\n  那你就是用硬背的，這樣很容易忘記；\n  但如果你知道為什麼要命名成這樣、為什麼要這樣設計，\n  你等於進入了框架本身去使用它，\n  而不是被它框住。\n\n- **Observable 給我們不一樣的方式來思考如何 Handle events**\n  可以看看 Netflix 的[例子](https://www.youtube.com/watch?v=XRYN2xt11Ek&hd=1)\n\n週末在家拉肚子之餘，順便把課程課完並做了一些筆記。\n\n先來看一下 Cycle.js 的 Get started code，\n\n```js\nimport Cycle from '@cycle/core';\nimport CycleDOM from '@cycle/dom';\n\nfunction main() {\n  // ...\n}\n\nconst drivers = {\n  DOM: CycleDOM.makeDOMDriver('#app')\n};\n\nCycle.run(main, drivers);\n```\n\n現在看起來很不習慣，但這篇會從無到有的建一個簡單版的 Cycle.js 出來，\n\n第一篇預計會實作很 primitve 的 drivers 以及 main，\n\n接著會把 run 給重構到幾乎跟現在 Cycle 核心中的寫法一樣。\n\n（當然還是只重概念說明的簡化版）\n\n不過這都只是個人的學習筆記，\n\n還是在大大推一下 egghead.io 上的課程\n\n- [Lessons of Cycle.js](https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects)\n\n## Prerequisite\n\n- 了解如何操作 collection \n  沒錯，Observable 和 array（或list）都是 collection\n\n- 可以試試這個互動的課程，再來看這系列會更有感覺：\n  [http://reactivex.io/learnrx/](http://reactivex.io/learnrx/)\n\n- 對於 Rx 已經有基礎的認識\n\n## Cycle.js\n\n### Basic Principle\n\n- 第一條規則就是要將「logics」跟「effect」分開\n\n要來分清楚這兩個東西是什麼就要先來看一下程式碼了：\n\n```js\n// Logic\nObservable.timer(0, 1000)\n    .map(i => `Seconds elapsed ${i}`)\n// Effect \n    .subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n```\n這是一個從 0 開始每一秒一數的計數器，\n\n詳情請見 [Timer](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md)。\n\n上半部的部分是「Logic」，\n\n而 subscribe 那一行開始，就是他怎樣呈現的 「Effect」。\n\n這裏有個很巧妙的概念，\n\n就是 Effect 才是真正影響到外面世界的地方（DOM），\n\n正如他的名字一樣；\n\n而 Logic 裏的東西只是單純的 Event stream，\n\n我們不去 Subscribe 他們，就不會有任何事情發生。\n\nCycle.js 的原則就是將這兩大部分分開，\n\n`Effect` 的部分是 Imperative 的，讓 Framework 幫你完成，\n\n身為開發者我們只要關心 `Logic` 的部分就夠了，\n\n而 Logic 的部分是 functional 的。\n\n### Main 以及 Effect \n\n前面提到我們會將 logic 和 effect 分開，\n\n在 Cycle 中我們習慣會將 Logic 放到 main 裡面。\n\n```js\nfunction main() {\n    return {\n        DOM: Observable.timer(0, 1000)\n                       .map(i => `Seconds elapsed ${i}`),\n        Log: Observable.timer(0, 2000)\n                       .map(i => 2*i)\n        }\n}\n\nfunction DOMEffect(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n}\n\nfunction consoleLogEffect (msg$) {\n    msg$.subscribe(msg => console.log(msg));\n}\n\nconst sink = main();\nDOMEffect(sink.DOM);\nconsoleLogEffect(sink.Log);\n```\n\n我們在 Main 裡面建了兩條不同的 stream，\n\n看起來已經將邏輯集中起來放，\n\n但是最下方從 sink 開始，\n\n似乎還是太 imperative 地去做這些事情。\n\n> 我們 Hard Coding 的去指定 consoleLogEffect 這個函數，\n\n> 一旦我們今天把 main 中的 log 拔掉，\n\n> 那整個程式就會報錯了，\n\n> Cycle.js 中不希望我們每次更動 Logic 時需要注意一大堆 effect\n\n再來就要介紹一下 `run` 這個 function。\n\n### `run`\n\n```js\n\nfunction run(mainFn, effects) {\n    const sinks = mainFn();\n    Object.keys(effects)\n    .forEach(key => {\n        effects[key](sinks[key])\n    })\n}\n\nconst effectsFunctions = {\n    DOM: DOMEffect,\n    Log: consoleLogEffect,\n}\n\nrun(main, effectsFunctions);\n```\n\n`run` 會吃兩個參數，第一個就是我們管邏輯的 main，\n\n第二個則是 effect，\n\n我們如果不想要他在畫面上做事情，\n\n把在 effectFunctions 中的那個 key 給註解掉就行了，\n\n因為我們並沒有很 hard coding 的去呼叫每個 effectFunction。\n\n但是這裡要重新命名一下，將 effectFunctions 改成 drivers，\n\n一來是因為 effectFunctions 聽起來並不是個好命名方式XD\n\n二來是 drivers 即是我們熟悉的驅動程式，建立了硬體和軟體中間溝通的介面；\n\n而這裡的 driver 可以想成我們的程式(logic)，和畫面(effect)中間溝通的介面；\n\n還是很抽象嗎？\n\n那就從字面上的意思來看， driver 就是駕駛員，\n\n現在有一個駕駛員負責開著一台小車車，\n\n嘟嘟嘟的把我們寫的邏輯運送到畫面上，\n\n我們只要寫好邏輯、還有要送去的地方跟方式，\n\n剩下的就交給 driver 幫我們處理啦！\n\n```js\n\nfunction run(mainFn, drivers) {\n    const sinks = mainFn();\n    Object.keys(drivers)\n    .forEach(key => {\n        drivers[key](sinks[key])\n    })\n}\n\nconst drivers = {\n    DOM: DOMDriver,\n    Log: consoleLogDriver,\n}\n\nrun(main, drivers);\n```\n\n這是我們手刻出來的簡單版本，\n\n而 Cycle.js 首頁的 get started 例子中，\n\n輪廓的確就是這樣子，\n\n只是在 driver 的部分，\n\nCycle.js 幫我們做了更多事情。\n\n```js\nfunction main() {\n  return {\n    DOM: Rx.Observable.interval(1000)\n      .map(i => CycleDOM.h1('' + i + ' seconds elapsed'))\n  };\n}\n\nconst drivers = {\n  DOM: CycleDOM.makeDOMDriver('#app')\n};\n\nCycle.run(main, drivers);\n```\n\n### Read effects from the External world\n\n前面有提過 Netflix 解決複雜電影選單的方式，\n\n就是透過 Observable 來重新思考處理 Events 的方式，\n\n但到目前為止，我們都還沒有用到最精髓的部分，\n\n而是把內部 Logic 寫好，沒有接收任何外來的 event stream。\n\n奠基於 Rx 上面的 Cycle.js 最精華的也正是這一段處理 event 的方式，\n\n同時這也是 **Cycle** 這名字的由來。\n\n\n首先先看前面寫的程式碼：\n\n```js\nfunction DOMDriver(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n}\nfunction main() {\n    return {\n        DOM: Observable.timer(0, 1000)\n            .map(i => `Seconds elapsed ${i}`),\n        Log: Observable.timer(0, 2000)\n            .map(i => 2 * i)\n    }\n}\n```\n\n可以看到它只有 input，沒有 output。\n\n而 main function 則反之，\n\n我們想從外部 read something ，就代表我們的 main 必須要有 input。\n\n> 這裏的前提是你照著 cycle.js 的單向資料流架構走\n\n所以我們先在 main 和 driver 各加上 input 和 output。\n\n接下來在 `run` 中會改回 hard code 的方式，\n\n這是為了更容易去理解，接著就會遇到最奇妙的地方：\n\n\n```js\nfunction DOMDriver(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n    const DOMSource = Observable.fromEvent(document, \"click\");\n    return DOMSource\n}\nfunction run(mainFn, drivers) {\n    const sinks = mainFn(DOMSource);\n    const DOMSource = drivers.DOM(sinks.DOM);\n \n}\n```\n\n我們看到 run 中間，DOMSource 需要 sinks 才能建立，\n\n但 sinks 也需要 DOMSource 才能被建立，\n\n形成一個很微妙的循環，是一個雞生蛋蛋生雞的問題。\n\n在更抽象化一點就是：\n\n```js\na = f(b)\nb = g(a)\n```\n\n想要解決這件事其實沒那麼難，\n\n想法上是這樣：\n\n```js\nbProxy = ...\na = f(bproxy)\nb = g(a)\nbProxy.imitate(b)\n```\n\n這裏要靠 rx 裡面的 subject 來建立我們的 proxy。\n\n> 瞭解更多關於 Subject: \n\n> from [rx-book](http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html)\n\n> 簡言之它同時繼承了 Observable 跟 Observer，\n\n> 所以我們既可以 subscribe 它，（Observable）\n\n> 又能夠對他呼叫 onNext、onError，以及 onCompleted（這就是 Observer 在做的事情）\n\n這裏就比較困難要分段看了，\n\n先到 run 裡面看看我們要怎麼按照上方的 pattern 來加入 proxy。\n\n```js\nfunction run(mainFn, drivers) {\n    const proxyDOMSource = new Subject();\n    const sinks = mainFn(proxyDOMSource);\n    const DOMSource = drivers.DOM(sinks.DOM);\n    DOMSource.subscribe(click => proxyDOMSource.onNext(click))\n}\n```\nDOMDriver 回傳了一個 click-event 的 stream（Observable），\n\n所以我們 subscribe 它，並且每一次呼叫 click 的 stream，\n\n跟我們前面創造的 proxy 整合在一起，\n\n下來再來看 proxy 傳進 main 發生了什麼事情。\n\n```js\nfunction main(DOMSource) {\n    const click$ = DOMSource;\n    return {\n        DOM: click$\n        .startWith(null)\n        .flatMapLatest(() =>\n            Observable.timer(0, 1000)\n            .map(i => `Seconds elapsed ${i}`)\n        ), \n        Log: Observable.timer(0, 2000)\n            .map(i => 2 * i)\n    }\n}\n```\n\n簡單說就是我們每次在螢幕上按一下(click)，\n\n就會重啟整個 timer。\n\n> 歸功於 flapMapLatest 這個 operator，\n\n> 假如這裡改用 flapMap 的話，會發現舊的 stream 還在繼續跑，\n\n> 整個 timer 會被搗亂，假如還不熟 flatMap 該怎麼用\n\n> 請至 prerequisite 玩一下 [learn-rx](http://reactivex.io/learnrx/)\n\n而 `startWith(null)` 則是製造一次「假的」 event，\n\n來觸發第一次還沒 click 之前的 effect。\n\n現在的 code 看起來很糟糕，尤其是在 main 中 hard code DOMSource 這一點。\n\n首先先從 run 中下手：\n\n```js\nfunction run(mainFn, drivers) {\n    const proxySources = {};\n    Object.keys(drivers).forEach(key =>{\n        proxySources[key] = new Subject();\n    })\n    const sinks = mainFn(proxySources);\n    Object.keys(drivers)\n          .forEach(key => {\n            const source = drivers[key](sinks[key])\n            source.subscribe(x => proxySources[key].onNext(x))\n          })\n}\n```\n\n如此一來我們就不用去 hard code 的指定每個 proxySource，\n\n而在 main 中簡單多了，只要把 click$ 的來源變成 sources.DOM 就好了，\n\n但在這裡我們可能會對一個 undefined 呼叫 subscribe。\n\n> consoleLogDriver 並沒有 return 任何東西（nothing to be read）\n\n要避免這點只要加個判斷式就能夠解決，\n\n不過截至目前為止，我們其實已經把 Cycle core 中的 run 給實作的差不多了！\n\n- [source code of run in Cycle.js](https://github.com/cyclejs/cycle-core/blob/master/src/cycle.js#L97:L118)\n\n> 當然還是有些差異在，像是 error-handling，\n\n> 以及在 Cycle core 的 proxy 中是用 `ReplaySubject` 而不是 `Subject`\n\n\n----\n\n# 參考資料\n\n- [WHY REACT/REDUX IS AN INFERIOR PARADIGM](http://staltz.com/why-react-redux-is-an-inferior-paradigm.html)\n\n- [UNIDIRECTIONAL USER INTERFACE ARCHITECTURES](http://staltz.com/unidirectional-user-interface-architectures.html)\n\n- [Rx-book](https://xgrommx.github.io)","source":"_posts/cycle-js-basic.md","raw":"---\ntitle: 做中學 Cycle.js（上）\ndate: 2016/1/23\nintro: Observable 是世界上最強的，其他東西都是——\ntags: cycle.js, observable\n---\n\n之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，\n\n其實軟體開發裡面沒有銀彈，\n\n不過這種爭辯也更能夠激發出我們寫出更棒的軟體，\n\n並且去反思現行流行的東西真的是「好」的嗎？\n\n<!--more-->\n\nCycle.js 的作者也寫下一篇他認為為什麼 Redux + React 不那麼好的原因：\n\n- [WHY REACT/REDUX IS AN INFERIOR PARADIGM](http://staltz.com/why-react-redux-is-an-inferior-paradigm.html)\n\n同時間在 egghead.io 上也 release 了一個 Cycle.js 的課程：\n\n- [Lessons of Cycle.js](https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects)\n\n(等等，這時機推出課程，真的不是在打廣告嗎？)\n\n我認為這個課程還蠻推薦的原因有底下兩點：\n\n- **作者會告訴我們 Cycle.js 這樣設計的理念**\n  對我來說在學習一個框架時，\n  如果你不能理解為什麼要這樣設計，\n  那你就是用硬背的，這樣很容易忘記；\n  但如果你知道為什麼要命名成這樣、為什麼要這樣設計，\n  你等於進入了框架本身去使用它，\n  而不是被它框住。\n\n- **Observable 給我們不一樣的方式來思考如何 Handle events**\n  可以看看 Netflix 的[例子](https://www.youtube.com/watch?v=XRYN2xt11Ek&hd=1)\n\n週末在家拉肚子之餘，順便把課程課完並做了一些筆記。\n\n先來看一下 Cycle.js 的 Get started code，\n\n```js\nimport Cycle from '@cycle/core';\nimport CycleDOM from '@cycle/dom';\n\nfunction main() {\n  // ...\n}\n\nconst drivers = {\n  DOM: CycleDOM.makeDOMDriver('#app')\n};\n\nCycle.run(main, drivers);\n```\n\n現在看起來很不習慣，但這篇會從無到有的建一個簡單版的 Cycle.js 出來，\n\n第一篇預計會實作很 primitve 的 drivers 以及 main，\n\n接著會把 run 給重構到幾乎跟現在 Cycle 核心中的寫法一樣。\n\n（當然還是只重概念說明的簡化版）\n\n不過這都只是個人的學習筆記，\n\n還是在大大推一下 egghead.io 上的課程\n\n- [Lessons of Cycle.js](https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects)\n\n## Prerequisite\n\n- 了解如何操作 collection \n  沒錯，Observable 和 array（或list）都是 collection\n\n- 可以試試這個互動的課程，再來看這系列會更有感覺：\n  [http://reactivex.io/learnrx/](http://reactivex.io/learnrx/)\n\n- 對於 Rx 已經有基礎的認識\n\n## Cycle.js\n\n### Basic Principle\n\n- 第一條規則就是要將「logics」跟「effect」分開\n\n要來分清楚這兩個東西是什麼就要先來看一下程式碼了：\n\n```js\n// Logic\nObservable.timer(0, 1000)\n    .map(i => `Seconds elapsed ${i}`)\n// Effect \n    .subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n```\n這是一個從 0 開始每一秒一數的計數器，\n\n詳情請見 [Timer](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md)。\n\n上半部的部分是「Logic」，\n\n而 subscribe 那一行開始，就是他怎樣呈現的 「Effect」。\n\n這裏有個很巧妙的概念，\n\n就是 Effect 才是真正影響到外面世界的地方（DOM），\n\n正如他的名字一樣；\n\n而 Logic 裏的東西只是單純的 Event stream，\n\n我們不去 Subscribe 他們，就不會有任何事情發生。\n\nCycle.js 的原則就是將這兩大部分分開，\n\n`Effect` 的部分是 Imperative 的，讓 Framework 幫你完成，\n\n身為開發者我們只要關心 `Logic` 的部分就夠了，\n\n而 Logic 的部分是 functional 的。\n\n### Main 以及 Effect \n\n前面提到我們會將 logic 和 effect 分開，\n\n在 Cycle 中我們習慣會將 Logic 放到 main 裡面。\n\n```js\nfunction main() {\n    return {\n        DOM: Observable.timer(0, 1000)\n                       .map(i => `Seconds elapsed ${i}`),\n        Log: Observable.timer(0, 2000)\n                       .map(i => 2*i)\n        }\n}\n\nfunction DOMEffect(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n}\n\nfunction consoleLogEffect (msg$) {\n    msg$.subscribe(msg => console.log(msg));\n}\n\nconst sink = main();\nDOMEffect(sink.DOM);\nconsoleLogEffect(sink.Log);\n```\n\n我們在 Main 裡面建了兩條不同的 stream，\n\n看起來已經將邏輯集中起來放，\n\n但是最下方從 sink 開始，\n\n似乎還是太 imperative 地去做這些事情。\n\n> 我們 Hard Coding 的去指定 consoleLogEffect 這個函數，\n\n> 一旦我們今天把 main 中的 log 拔掉，\n\n> 那整個程式就會報錯了，\n\n> Cycle.js 中不希望我們每次更動 Logic 時需要注意一大堆 effect\n\n再來就要介紹一下 `run` 這個 function。\n\n### `run`\n\n```js\n\nfunction run(mainFn, effects) {\n    const sinks = mainFn();\n    Object.keys(effects)\n    .forEach(key => {\n        effects[key](sinks[key])\n    })\n}\n\nconst effectsFunctions = {\n    DOM: DOMEffect,\n    Log: consoleLogEffect,\n}\n\nrun(main, effectsFunctions);\n```\n\n`run` 會吃兩個參數，第一個就是我們管邏輯的 main，\n\n第二個則是 effect，\n\n我們如果不想要他在畫面上做事情，\n\n把在 effectFunctions 中的那個 key 給註解掉就行了，\n\n因為我們並沒有很 hard coding 的去呼叫每個 effectFunction。\n\n但是這裡要重新命名一下，將 effectFunctions 改成 drivers，\n\n一來是因為 effectFunctions 聽起來並不是個好命名方式XD\n\n二來是 drivers 即是我們熟悉的驅動程式，建立了硬體和軟體中間溝通的介面；\n\n而這裡的 driver 可以想成我們的程式(logic)，和畫面(effect)中間溝通的介面；\n\n還是很抽象嗎？\n\n那就從字面上的意思來看， driver 就是駕駛員，\n\n現在有一個駕駛員負責開著一台小車車，\n\n嘟嘟嘟的把我們寫的邏輯運送到畫面上，\n\n我們只要寫好邏輯、還有要送去的地方跟方式，\n\n剩下的就交給 driver 幫我們處理啦！\n\n```js\n\nfunction run(mainFn, drivers) {\n    const sinks = mainFn();\n    Object.keys(drivers)\n    .forEach(key => {\n        drivers[key](sinks[key])\n    })\n}\n\nconst drivers = {\n    DOM: DOMDriver,\n    Log: consoleLogDriver,\n}\n\nrun(main, drivers);\n```\n\n這是我們手刻出來的簡單版本，\n\n而 Cycle.js 首頁的 get started 例子中，\n\n輪廓的確就是這樣子，\n\n只是在 driver 的部分，\n\nCycle.js 幫我們做了更多事情。\n\n```js\nfunction main() {\n  return {\n    DOM: Rx.Observable.interval(1000)\n      .map(i => CycleDOM.h1('' + i + ' seconds elapsed'))\n  };\n}\n\nconst drivers = {\n  DOM: CycleDOM.makeDOMDriver('#app')\n};\n\nCycle.run(main, drivers);\n```\n\n### Read effects from the External world\n\n前面有提過 Netflix 解決複雜電影選單的方式，\n\n就是透過 Observable 來重新思考處理 Events 的方式，\n\n但到目前為止，我們都還沒有用到最精髓的部分，\n\n而是把內部 Logic 寫好，沒有接收任何外來的 event stream。\n\n奠基於 Rx 上面的 Cycle.js 最精華的也正是這一段處理 event 的方式，\n\n同時這也是 **Cycle** 這名字的由來。\n\n\n首先先看前面寫的程式碼：\n\n```js\nfunction DOMDriver(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n}\nfunction main() {\n    return {\n        DOM: Observable.timer(0, 1000)\n            .map(i => `Seconds elapsed ${i}`),\n        Log: Observable.timer(0, 2000)\n            .map(i => 2 * i)\n    }\n}\n```\n\n可以看到它只有 input，沒有 output。\n\n而 main function 則反之，\n\n我們想從外部 read something ，就代表我們的 main 必須要有 input。\n\n> 這裏的前提是你照著 cycle.js 的單向資料流架構走\n\n所以我們先在 main 和 driver 各加上 input 和 output。\n\n接下來在 `run` 中會改回 hard code 的方式，\n\n這是為了更容易去理解，接著就會遇到最奇妙的地方：\n\n\n```js\nfunction DOMDriver(text$) {\n    text$.subscribe(text => {\n        const container = document.querySelector('#app');\n        container.textContent = text;\n    })\n    const DOMSource = Observable.fromEvent(document, \"click\");\n    return DOMSource\n}\nfunction run(mainFn, drivers) {\n    const sinks = mainFn(DOMSource);\n    const DOMSource = drivers.DOM(sinks.DOM);\n \n}\n```\n\n我們看到 run 中間，DOMSource 需要 sinks 才能建立，\n\n但 sinks 也需要 DOMSource 才能被建立，\n\n形成一個很微妙的循環，是一個雞生蛋蛋生雞的問題。\n\n在更抽象化一點就是：\n\n```js\na = f(b)\nb = g(a)\n```\n\n想要解決這件事其實沒那麼難，\n\n想法上是這樣：\n\n```js\nbProxy = ...\na = f(bproxy)\nb = g(a)\nbProxy.imitate(b)\n```\n\n這裏要靠 rx 裡面的 subject 來建立我們的 proxy。\n\n> 瞭解更多關於 Subject: \n\n> from [rx-book](http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html)\n\n> 簡言之它同時繼承了 Observable 跟 Observer，\n\n> 所以我們既可以 subscribe 它，（Observable）\n\n> 又能夠對他呼叫 onNext、onError，以及 onCompleted（這就是 Observer 在做的事情）\n\n這裏就比較困難要分段看了，\n\n先到 run 裡面看看我們要怎麼按照上方的 pattern 來加入 proxy。\n\n```js\nfunction run(mainFn, drivers) {\n    const proxyDOMSource = new Subject();\n    const sinks = mainFn(proxyDOMSource);\n    const DOMSource = drivers.DOM(sinks.DOM);\n    DOMSource.subscribe(click => proxyDOMSource.onNext(click))\n}\n```\nDOMDriver 回傳了一個 click-event 的 stream（Observable），\n\n所以我們 subscribe 它，並且每一次呼叫 click 的 stream，\n\n跟我們前面創造的 proxy 整合在一起，\n\n下來再來看 proxy 傳進 main 發生了什麼事情。\n\n```js\nfunction main(DOMSource) {\n    const click$ = DOMSource;\n    return {\n        DOM: click$\n        .startWith(null)\n        .flatMapLatest(() =>\n            Observable.timer(0, 1000)\n            .map(i => `Seconds elapsed ${i}`)\n        ), \n        Log: Observable.timer(0, 2000)\n            .map(i => 2 * i)\n    }\n}\n```\n\n簡單說就是我們每次在螢幕上按一下(click)，\n\n就會重啟整個 timer。\n\n> 歸功於 flapMapLatest 這個 operator，\n\n> 假如這裡改用 flapMap 的話，會發現舊的 stream 還在繼續跑，\n\n> 整個 timer 會被搗亂，假如還不熟 flatMap 該怎麼用\n\n> 請至 prerequisite 玩一下 [learn-rx](http://reactivex.io/learnrx/)\n\n而 `startWith(null)` 則是製造一次「假的」 event，\n\n來觸發第一次還沒 click 之前的 effect。\n\n現在的 code 看起來很糟糕，尤其是在 main 中 hard code DOMSource 這一點。\n\n首先先從 run 中下手：\n\n```js\nfunction run(mainFn, drivers) {\n    const proxySources = {};\n    Object.keys(drivers).forEach(key =>{\n        proxySources[key] = new Subject();\n    })\n    const sinks = mainFn(proxySources);\n    Object.keys(drivers)\n          .forEach(key => {\n            const source = drivers[key](sinks[key])\n            source.subscribe(x => proxySources[key].onNext(x))\n          })\n}\n```\n\n如此一來我們就不用去 hard code 的指定每個 proxySource，\n\n而在 main 中簡單多了，只要把 click$ 的來源變成 sources.DOM 就好了，\n\n但在這裡我們可能會對一個 undefined 呼叫 subscribe。\n\n> consoleLogDriver 並沒有 return 任何東西（nothing to be read）\n\n要避免這點只要加個判斷式就能夠解決，\n\n不過截至目前為止，我們其實已經把 Cycle core 中的 run 給實作的差不多了！\n\n- [source code of run in Cycle.js](https://github.com/cyclejs/cycle-core/blob/master/src/cycle.js#L97:L118)\n\n> 當然還是有些差異在，像是 error-handling，\n\n> 以及在 Cycle core 的 proxy 中是用 `ReplaySubject` 而不是 `Subject`\n\n\n----\n\n# 參考資料\n\n- [WHY REACT/REDUX IS AN INFERIOR PARADIGM](http://staltz.com/why-react-redux-is-an-inferior-paradigm.html)\n\n- [UNIDIRECTIONAL USER INTERFACE ARCHITECTURES](http://staltz.com/unidirectional-user-interface-architectures.html)\n\n- [Rx-book](https://xgrommx.github.io)","slug":"cycle-js-basic","published":1,"updated":"2016-04-24T13:02:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5v0008f606folyylec","content":"<p>之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，</p>\n<p>其實軟體開發裡面沒有銀彈，</p>\n<p>不過這種爭辯也更能夠激發出我們寫出更棒的軟體，</p>\n<p>並且去反思現行流行的東西真的是「好」的嗎？</p>\n<a id=\"more\"></a>\n<p>Cycle.js 的作者也寫下一篇他認為為什麼 Redux + React 不那麼好的原因：</p>\n<ul>\n<li><a href=\"http://staltz.com/why-react-redux-is-an-inferior-paradigm.html\" target=\"_blank\" rel=\"external\">WHY REACT/REDUX IS AN INFERIOR PARADIGM</a></li>\n</ul>\n<p>同時間在 egghead.io 上也 release 了一個 Cycle.js 的課程：</p>\n<ul>\n<li><a href=\"https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects\" target=\"_blank\" rel=\"external\">Lessons of Cycle.js</a></li>\n</ul>\n<p>(等等，這時機推出課程，真的不是在打廣告嗎？)</p>\n<p>我認為這個課程還蠻推薦的原因有底下兩點：</p>\n<ul>\n<li><p><strong>作者會告訴我們 Cycle.js 這樣設計的理念</strong><br>對我來說在學習一個框架時，<br>如果你不能理解為什麼要這樣設計，<br>那你就是用硬背的，這樣很容易忘記；<br>但如果你知道為什麼要命名成這樣、為什麼要這樣設計，<br>你等於進入了框架本身去使用它，<br>而不是被它框住。</p>\n</li>\n<li><p><strong>Observable 給我們不一樣的方式來思考如何 Handle events</strong><br>可以看看 Netflix 的<a href=\"https://www.youtube.com/watch?v=XRYN2xt11Ek&amp;hd=1\" target=\"_blank\" rel=\"external\">例子</a></p>\n</li>\n</ul>\n<p>週末在家拉肚子之餘，順便把課程課完並做了一些筆記。</p>\n<p>先來看一下 Cycle.js 的 Get started code，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Cycle <span class=\"keyword\">from</span> <span class=\"string\">'@cycle/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> CycleDOM <span class=\"keyword\">from</span> <span class=\"string\">'@cycle/dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  DOM: CycleDOM.makeDOMDriver(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cycle.run(main, drivers);</span><br></pre></td></tr></table></figure>\n<p>現在看起來很不習慣，但這篇會從無到有的建一個簡單版的 Cycle.js 出來，</p>\n<p>第一篇預計會實作很 primitve 的 drivers 以及 main，</p>\n<p>接著會把 run 給重構到幾乎跟現在 Cycle 核心中的寫法一樣。</p>\n<p>（當然還是只重概念說明的簡化版）</p>\n<p>不過這都只是個人的學習筆記，</p>\n<p>還是在大大推一下 egghead.io 上的課程</p>\n<ul>\n<li><a href=\"https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects\" target=\"_blank\" rel=\"external\">Lessons of Cycle.js</a></li>\n</ul>\n<h2 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h2><ul>\n<li><p>了解如何操作 collection<br>沒錯，Observable 和 array（或list）都是 collection</p>\n</li>\n<li><p>可以試試這個互動的課程，再來看這系列會更有感覺：<br><a href=\"http://reactivex.io/learnrx/\" target=\"_blank\" rel=\"external\">http://reactivex.io/learnrx/</a></p>\n</li>\n<li><p>對於 Rx 已經有基礎的認識</p>\n</li>\n</ul>\n<h2 id=\"Cycle-js\"><a href=\"#Cycle-js\" class=\"headerlink\" title=\"Cycle.js\"></a>Cycle.js</h2><h3 id=\"Basic-Principle\"><a href=\"#Basic-Principle\" class=\"headerlink\" title=\"Basic Principle\"></a>Basic Principle</h3><ul>\n<li>第一條規則就是要將「logics」跟「effect」分開</li>\n</ul>\n<p>要來分清楚這兩個東西是什麼就要先來看一下程式碼了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Logic</span></span><br><span class=\"line\">Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// Effect </span></span><br><span class=\"line\">    .subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>這是一個從 0 開始每一秒一數的計數器，</p>\n<p>詳情請見 <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md\" target=\"_blank\" rel=\"external\">Timer</a>。</p>\n<p>上半部的部分是「Logic」，</p>\n<p>而 subscribe 那一行開始，就是他怎樣呈現的 「Effect」。</p>\n<p>這裏有個很巧妙的概念，</p>\n<p>就是 Effect 才是真正影響到外面世界的地方（DOM），</p>\n<p>正如他的名字一樣；</p>\n<p>而 Logic 裏的東西只是單純的 Event stream，</p>\n<p>我們不去 Subscribe 他們，就不會有任何事情發生。</p>\n<p>Cycle.js 的原則就是將這兩大部分分開，</p>\n<p><code>Effect</code> 的部分是 Imperative 的，讓 Framework 幫你完成，</p>\n<p>身為開發者我們只要關心 <code>Logic</code> 的部分就夠了，</p>\n<p>而 Logic 的部分是 functional 的。</p>\n<h3 id=\"Main-以及-Effect\"><a href=\"#Main-以及-Effect\" class=\"headerlink\" title=\"Main 以及 Effect\"></a>Main 以及 Effect</h3><p>前面提到我們會將 logic 和 effect 分開，</p>\n<p>在 Cycle 中我們習慣會將 Logic 放到 main 裡面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">                       .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>),</span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">                       .map(i =&gt; <span class=\"number\">2</span>*i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMEffect</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleLogEffect</span> (<span class=\"params\">msg$</span>) </span>&#123;</span><br><span class=\"line\">    msg$.subscribe(msg =&gt; <span class=\"built_in\">console</span>.log(msg));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sink = main();</span><br><span class=\"line\">DOMEffect(sink.DOM);</span><br><span class=\"line\">consoleLogEffect(sink.Log);</span><br></pre></td></tr></table></figure>\n<p>我們在 Main 裡面建了兩條不同的 stream，</p>\n<p>看起來已經將邏輯集中起來放，</p>\n<p>但是最下方從 sink 開始，</p>\n<p>似乎還是太 imperative 地去做這些事情。</p>\n<blockquote>\n<p>我們 Hard Coding 的去指定 consoleLogEffect 這個函數，</p>\n<p>一旦我們今天把 main 中的 log 拔掉，</p>\n<p>那整個程式就會報錯了，</p>\n<p>Cycle.js 中不希望我們每次更動 Logic 時需要注意一大堆 effect</p>\n</blockquote>\n<p>再來就要介紹一下 <code>run</code> 這個 function。</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a><code>run</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, effects</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn();</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(effects)</span><br><span class=\"line\">    .forEach(key =&gt; &#123;</span><br><span class=\"line\">        effects[key](sinks[key])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> effectsFunctions = &#123;</span><br><span class=\"line\">    DOM: DOMEffect,</span><br><span class=\"line\">    Log: consoleLogEffect,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(main, effectsFunctions);</span><br></pre></td></tr></table></figure>\n<p><code>run</code> 會吃兩個參數，第一個就是我們管邏輯的 main，</p>\n<p>第二個則是 effect，</p>\n<p>我們如果不想要他在畫面上做事情，</p>\n<p>把在 effectFunctions 中的那個 key 給註解掉就行了，</p>\n<p>因為我們並沒有很 hard coding 的去呼叫每個 effectFunction。</p>\n<p>但是這裡要重新命名一下，將 effectFunctions 改成 drivers，</p>\n<p>一來是因為 effectFunctions 聽起來並不是個好命名方式XD</p>\n<p>二來是 drivers 即是我們熟悉的驅動程式，建立了硬體和軟體中間溝通的介面；</p>\n<p>而這裡的 driver 可以想成我們的程式(logic)，和畫面(effect)中間溝通的介面；</p>\n<p>還是很抽象嗎？</p>\n<p>那就從字面上的意思來看， driver 就是駕駛員，</p>\n<p>現在有一個駕駛員負責開著一台小車車，</p>\n<p>嘟嘟嘟的把我們寫的邏輯運送到畫面上，</p>\n<p>我們只要寫好邏輯、還有要送去的地方跟方式，</p>\n<p>剩下的就交給 driver 幫我們處理啦！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn();</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers)</span><br><span class=\"line\">    .forEach(key =&gt; &#123;</span><br><span class=\"line\">        drivers[key](sinks[key])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: DOMDriver,</span><br><span class=\"line\">    Log: consoleLogDriver,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(main, drivers);</span><br></pre></td></tr></table></figure>\n<p>這是我們手刻出來的簡單版本，</p>\n<p>而 Cycle.js 首頁的 get started 例子中，</p>\n<p>輪廓的確就是這樣子，</p>\n<p>只是在 driver 的部分，</p>\n<p>Cycle.js 幫我們做了更多事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    DOM: Rx.Observable.interval(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      .map(i =&gt; CycleDOM.h1(<span class=\"string\">''</span> + i + <span class=\"string\">' seconds elapsed'</span>))</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  DOM: CycleDOM.makeDOMDriver(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cycle.run(main, drivers);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Read-effects-from-the-External-world\"><a href=\"#Read-effects-from-the-External-world\" class=\"headerlink\" title=\"Read effects from the External world\"></a>Read effects from the External world</h3><p>前面有提過 Netflix 解決複雜電影選單的方式，</p>\n<p>就是透過 Observable 來重新思考處理 Events 的方式，</p>\n<p>但到目前為止，我們都還沒有用到最精髓的部分，</p>\n<p>而是把內部 Logic 寫好，沒有接收任何外來的 event stream。</p>\n<p>奠基於 Rx 上面的 Cycle.js 最精華的也正是這一段處理 event 的方式，</p>\n<p>同時這也是 <strong>Cycle</strong> 這名字的由來。</p>\n<p>首先先看前面寫的程式碼：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>),</span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"number\">2</span> * i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到它只有 input，沒有 output。</p>\n<p>而 main function 則反之，</p>\n<p>我們想從外部 read something ，就代表我們的 main 必須要有 input。</p>\n<blockquote>\n<p>這裏的前提是你照著 cycle.js 的單向資料流架構走</p>\n</blockquote>\n<p>所以我們先在 main 和 driver 各加上 input 和 output。</p>\n<p>接下來在 <code>run</code> 中會改回 hard code 的方式，</p>\n<p>這是為了更容易去理解，接著就會遇到最奇妙的地方：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = Observable.fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(DOMSource);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = drivers.DOM(sinks.DOM);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們看到 run 中間，DOMSource 需要 sinks 才能建立，</p>\n<p>但 sinks 也需要 DOMSource 才能被建立，</p>\n<p>形成一個很微妙的循環，是一個雞生蛋蛋生雞的問題。</p>\n<p>在更抽象化一點就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = f(b)</span><br><span class=\"line\">b = g(a)</span><br></pre></td></tr></table></figure>\n<p>想要解決這件事其實沒那麼難，</p>\n<p>想法上是這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bProxy = ...</span><br><span class=\"line\">a = f(bproxy)</span><br><span class=\"line\">b = g(a)</span><br><span class=\"line\">bProxy.imitate(b)</span><br></pre></td></tr></table></figure>\n<p>這裏要靠 rx 裡面的 subject 來建立我們的 proxy。</p>\n<blockquote>\n<p>瞭解更多關於 Subject: </p>\n<p>from <a href=\"http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html\" target=\"_blank\" rel=\"external\">rx-book</a></p>\n<p>簡言之它同時繼承了 Observable 跟 Observer，</p>\n<p>所以我們既可以 subscribe 它，（Observable）</p>\n<p>又能夠對他呼叫 onNext、onError，以及 onCompleted（這就是 Observer 在做的事情）</p>\n</blockquote>\n<p>這裏就比較困難要分段看了，</p>\n<p>先到 run 裡面看看我們要怎麼按照上方的 pattern 來加入 proxy。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyDOMSource = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(proxyDOMSource);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = drivers.DOM(sinks.DOM);</span><br><span class=\"line\">    DOMSource.subscribe(click =&gt; proxyDOMSource.onNext(click))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DOMDriver 回傳了一個 click-event 的 stream（Observable），</p>\n<p>所以我們 subscribe 它，並且每一次呼叫 click 的 stream，</p>\n<p>跟我們前面創造的 proxy 整合在一起，</p>\n<p>下來再來看 proxy 傳進 main 發生了什麼事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> click$ = DOMSource;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: click$</span><br><span class=\"line\">        .startWith(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        .flatMapLatest(() =&gt;</span><br><span class=\"line\">            Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">        ), </span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"number\">2</span> * i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>簡單說就是我們每次在螢幕上按一下(click)，</p>\n<p>就會重啟整個 timer。</p>\n<blockquote>\n<p>歸功於 flapMapLatest 這個 operator，</p>\n<p>假如這裡改用 flapMap 的話，會發現舊的 stream 還在繼續跑，</p>\n<p>整個 timer 會被搗亂，假如還不熟 flatMap 該怎麼用</p>\n<p>請至 prerequisite 玩一下 <a href=\"http://reactivex.io/learnrx/\" target=\"_blank\" rel=\"external\">learn-rx</a></p>\n</blockquote>\n<p>而 <code>startWith(null)</code> 則是製造一次「假的」 event，</p>\n<p>來觸發第一次還沒 click 之前的 effect。</p>\n<p>現在的 code 看起來很糟糕，尤其是在 main 中 hard code DOMSource 這一點。</p>\n<p>首先先從 run 中下手：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxySources = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers).forEach(key =&gt;&#123;</span><br><span class=\"line\">        proxySources[key] = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(proxySources);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers)</span><br><span class=\"line\">          .forEach(key =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> source = drivers[key](sinks[key])</span><br><span class=\"line\">            source.subscribe(x =&gt; proxySources[key].onNext(x))</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一來我們就不用去 hard code 的指定每個 proxySource，</p>\n<p>而在 main 中簡單多了，只要把 click$ 的來源變成 sources.DOM 就好了，</p>\n<p>但在這裡我們可能會對一個 undefined 呼叫 subscribe。</p>\n<blockquote>\n<p>consoleLogDriver 並沒有 return 任何東西（nothing to be read）</p>\n</blockquote>\n<p>要避免這點只要加個判斷式就能夠解決，</p>\n<p>不過截至目前為止，我們其實已經把 Cycle core 中的 run 給實作的差不多了！</p>\n<ul>\n<li><a href=\"https://github.com/cyclejs/cycle-core/blob/master/src/cycle.js#L97:L118\" target=\"_blank\" rel=\"external\">source code of run in Cycle.js</a></li>\n</ul>\n<blockquote>\n<p>當然還是有些差異在，像是 error-handling，</p>\n<p>以及在 Cycle core 的 proxy 中是用 <code>ReplaySubject</code> 而不是 <code>Subject</code></p>\n</blockquote>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://staltz.com/why-react-redux-is-an-inferior-paradigm.html\" target=\"_blank\" rel=\"external\">WHY REACT/REDUX IS AN INFERIOR PARADIGM</a></p>\n</li>\n<li><p><a href=\"http://staltz.com/unidirectional-user-interface-architectures.html\" target=\"_blank\" rel=\"external\">UNIDIRECTIONAL USER INTERFACE ARCHITECTURES</a></p>\n</li>\n<li><p><a href=\"https://xgrommx.github.io\" target=\"_blank\" rel=\"external\">Rx-book</a></p>\n</li>\n</ul>\n","excerpt":"<p>之前 Redux 和 Cycle.js 作者在爭辯何者才是較好的 paradigm，</p>\n<p>其實軟體開發裡面沒有銀彈，</p>\n<p>不過這種爭辯也更能夠激發出我們寫出更棒的軟體，</p>\n<p>並且去反思現行流行的東西真的是「好」的嗎？</p>","more":"<p>Cycle.js 的作者也寫下一篇他認為為什麼 Redux + React 不那麼好的原因：</p>\n<ul>\n<li><a href=\"http://staltz.com/why-react-redux-is-an-inferior-paradigm.html\">WHY REACT/REDUX IS AN INFERIOR PARADIGM</a></li>\n</ul>\n<p>同時間在 egghead.io 上也 release 了一個 Cycle.js 的課程：</p>\n<ul>\n<li><a href=\"https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects\">Lessons of Cycle.js</a></li>\n</ul>\n<p>(等等，這時機推出課程，真的不是在打廣告嗎？)</p>\n<p>我認為這個課程還蠻推薦的原因有底下兩點：</p>\n<ul>\n<li><p><strong>作者會告訴我們 Cycle.js 這樣設計的理念</strong><br>對我來說在學習一個框架時，<br>如果你不能理解為什麼要這樣設計，<br>那你就是用硬背的，這樣很容易忘記；<br>但如果你知道為什麼要命名成這樣、為什麼要這樣設計，<br>你等於進入了框架本身去使用它，<br>而不是被它框住。</p>\n</li>\n<li><p><strong>Observable 給我們不一樣的方式來思考如何 Handle events</strong><br>可以看看 Netflix 的<a href=\"https://www.youtube.com/watch?v=XRYN2xt11Ek&amp;hd=1\">例子</a></p>\n</li>\n</ul>\n<p>週末在家拉肚子之餘，順便把課程課完並做了一些筆記。</p>\n<p>先來看一下 Cycle.js 的 Get started code，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Cycle <span class=\"keyword\">from</span> <span class=\"string\">'@cycle/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> CycleDOM <span class=\"keyword\">from</span> <span class=\"string\">'@cycle/dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  DOM: CycleDOM.makeDOMDriver(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cycle.run(main, drivers);</span><br></pre></td></tr></table></figure>\n<p>現在看起來很不習慣，但這篇會從無到有的建一個簡單版的 Cycle.js 出來，</p>\n<p>第一篇預計會實作很 primitve 的 drivers 以及 main，</p>\n<p>接著會把 run 給重構到幾乎跟現在 Cycle 核心中的寫法一樣。</p>\n<p>（當然還是只重概念說明的簡化版）</p>\n<p>不過這都只是個人的學習筆記，</p>\n<p>還是在大大推一下 egghead.io 上的課程</p>\n<ul>\n<li><a href=\"https://egghead.io/lessons/rxjs-the-cycle-js-principle-separating-logic-from-effects\">Lessons of Cycle.js</a></li>\n</ul>\n<h2 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h2><ul>\n<li><p>了解如何操作 collection<br>沒錯，Observable 和 array（或list）都是 collection</p>\n</li>\n<li><p>可以試試這個互動的課程，再來看這系列會更有感覺：<br><a href=\"http://reactivex.io/learnrx/\">http://reactivex.io/learnrx/</a></p>\n</li>\n<li><p>對於 Rx 已經有基礎的認識</p>\n</li>\n</ul>\n<h2 id=\"Cycle-js\"><a href=\"#Cycle-js\" class=\"headerlink\" title=\"Cycle.js\"></a>Cycle.js</h2><h3 id=\"Basic-Principle\"><a href=\"#Basic-Principle\" class=\"headerlink\" title=\"Basic Principle\"></a>Basic Principle</h3><ul>\n<li>第一條規則就是要將「logics」跟「effect」分開</li>\n</ul>\n<p>要來分清楚這兩個東西是什麼就要先來看一下程式碼了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Logic</span></span><br><span class=\"line\">Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// Effect </span></span><br><span class=\"line\">    .subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>這是一個從 0 開始每一秒一數的計數器，</p>\n<p>詳情請見 <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md\">Timer</a>。</p>\n<p>上半部的部分是「Logic」，</p>\n<p>而 subscribe 那一行開始，就是他怎樣呈現的 「Effect」。</p>\n<p>這裏有個很巧妙的概念，</p>\n<p>就是 Effect 才是真正影響到外面世界的地方（DOM），</p>\n<p>正如他的名字一樣；</p>\n<p>而 Logic 裏的東西只是單純的 Event stream，</p>\n<p>我們不去 Subscribe 他們，就不會有任何事情發生。</p>\n<p>Cycle.js 的原則就是將這兩大部分分開，</p>\n<p><code>Effect</code> 的部分是 Imperative 的，讓 Framework 幫你完成，</p>\n<p>身為開發者我們只要關心 <code>Logic</code> 的部分就夠了，</p>\n<p>而 Logic 的部分是 functional 的。</p>\n<h3 id=\"Main-以及-Effect\"><a href=\"#Main-以及-Effect\" class=\"headerlink\" title=\"Main 以及 Effect\"></a>Main 以及 Effect</h3><p>前面提到我們會將 logic 和 effect 分開，</p>\n<p>在 Cycle 中我們習慣會將 Logic 放到 main 裡面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">                       .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>),</span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">                       .map(i =&gt; <span class=\"number\">2</span>*i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMEffect</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleLogEffect</span> (<span class=\"params\">msg$</span>) </span>&#123;</span><br><span class=\"line\">    msg$.subscribe(msg =&gt; <span class=\"built_in\">console</span>.log(msg));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sink = main();</span><br><span class=\"line\">DOMEffect(sink.DOM);</span><br><span class=\"line\">consoleLogEffect(sink.Log);</span><br></pre></td></tr></table></figure>\n<p>我們在 Main 裡面建了兩條不同的 stream，</p>\n<p>看起來已經將邏輯集中起來放，</p>\n<p>但是最下方從 sink 開始，</p>\n<p>似乎還是太 imperative 地去做這些事情。</p>\n<blockquote>\n<p>我們 Hard Coding 的去指定 consoleLogEffect 這個函數，</p>\n<p>一旦我們今天把 main 中的 log 拔掉，</p>\n<p>那整個程式就會報錯了，</p>\n<p>Cycle.js 中不希望我們每次更動 Logic 時需要注意一大堆 effect</p>\n</blockquote>\n<p>再來就要介紹一下 <code>run</code> 這個 function。</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a><code>run</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, effects</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn();</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(effects)</span><br><span class=\"line\">    .forEach(key =&gt; &#123;</span><br><span class=\"line\">        effects[key](sinks[key])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> effectsFunctions = &#123;</span><br><span class=\"line\">    DOM: DOMEffect,</span><br><span class=\"line\">    Log: consoleLogEffect,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(main, effectsFunctions);</span><br></pre></td></tr></table></figure>\n<p><code>run</code> 會吃兩個參數，第一個就是我們管邏輯的 main，</p>\n<p>第二個則是 effect，</p>\n<p>我們如果不想要他在畫面上做事情，</p>\n<p>把在 effectFunctions 中的那個 key 給註解掉就行了，</p>\n<p>因為我們並沒有很 hard coding 的去呼叫每個 effectFunction。</p>\n<p>但是這裡要重新命名一下，將 effectFunctions 改成 drivers，</p>\n<p>一來是因為 effectFunctions 聽起來並不是個好命名方式XD</p>\n<p>二來是 drivers 即是我們熟悉的驅動程式，建立了硬體和軟體中間溝通的介面；</p>\n<p>而這裡的 driver 可以想成我們的程式(logic)，和畫面(effect)中間溝通的介面；</p>\n<p>還是很抽象嗎？</p>\n<p>那就從字面上的意思來看， driver 就是駕駛員，</p>\n<p>現在有一個駕駛員負責開著一台小車車，</p>\n<p>嘟嘟嘟的把我們寫的邏輯運送到畫面上，</p>\n<p>我們只要寫好邏輯、還有要送去的地方跟方式，</p>\n<p>剩下的就交給 driver 幫我們處理啦！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn();</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers)</span><br><span class=\"line\">    .forEach(key =&gt; &#123;</span><br><span class=\"line\">        drivers[key](sinks[key])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">    DOM: DOMDriver,</span><br><span class=\"line\">    Log: consoleLogDriver,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(main, drivers);</span><br></pre></td></tr></table></figure>\n<p>這是我們手刻出來的簡單版本，</p>\n<p>而 Cycle.js 首頁的 get started 例子中，</p>\n<p>輪廓的確就是這樣子，</p>\n<p>只是在 driver 的部分，</p>\n<p>Cycle.js 幫我們做了更多事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    DOM: Rx.Observable.interval(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      .map(i =&gt; CycleDOM.h1(<span class=\"string\">''</span> + i + <span class=\"string\">' seconds elapsed'</span>))</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  DOM: CycleDOM.makeDOMDriver(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cycle.run(main, drivers);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Read-effects-from-the-External-world\"><a href=\"#Read-effects-from-the-External-world\" class=\"headerlink\" title=\"Read effects from the External world\"></a>Read effects from the External world</h3><p>前面有提過 Netflix 解決複雜電影選單的方式，</p>\n<p>就是透過 Observable 來重新思考處理 Events 的方式，</p>\n<p>但到目前為止，我們都還沒有用到最精髓的部分，</p>\n<p>而是把內部 Logic 寫好，沒有接收任何外來的 event stream。</p>\n<p>奠基於 Rx 上面的 Cycle.js 最精華的也正是這一段處理 event 的方式，</p>\n<p>同時這也是 <strong>Cycle</strong> 這名字的由來。</p>\n<p>首先先看前面寫的程式碼：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>),</span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"number\">2</span> * i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到它只有 input，沒有 output。</p>\n<p>而 main function 則反之，</p>\n<p>我們想從外部 read something ，就代表我們的 main 必須要有 input。</p>\n<blockquote>\n<p>這裏的前提是你照著 cycle.js 的單向資料流架構走</p>\n</blockquote>\n<p>所以我們先在 main 和 driver 各加上 input 和 output。</p>\n<p>接下來在 <code>run</code> 中會改回 hard code 的方式，</p>\n<p>這是為了更容易去理解，接著就會遇到最奇妙的地方：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOMDriver</span>(<span class=\"params\">text$</span>) </span>&#123;</span><br><span class=\"line\">    text$.subscribe(text =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">        container.textContent = text;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = Observable.fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DOMSource</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(DOMSource);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = drivers.DOM(sinks.DOM);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們看到 run 中間，DOMSource 需要 sinks 才能建立，</p>\n<p>但 sinks 也需要 DOMSource 才能被建立，</p>\n<p>形成一個很微妙的循環，是一個雞生蛋蛋生雞的問題。</p>\n<p>在更抽象化一點就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = f(b)</span><br><span class=\"line\">b = g(a)</span><br></pre></td></tr></table></figure>\n<p>想要解決這件事其實沒那麼難，</p>\n<p>想法上是這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bProxy = ...</span><br><span class=\"line\">a = f(bproxy)</span><br><span class=\"line\">b = g(a)</span><br><span class=\"line\">bProxy.imitate(b)</span><br></pre></td></tr></table></figure>\n<p>這裏要靠 rx 裡面的 subject 來建立我們的 proxy。</p>\n<blockquote>\n<p>瞭解更多關於 Subject: </p>\n<p>from <a href=\"http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html\">rx-book</a></p>\n<p>簡言之它同時繼承了 Observable 跟 Observer，</p>\n<p>所以我們既可以 subscribe 它，（Observable）</p>\n<p>又能夠對他呼叫 onNext、onError，以及 onCompleted（這就是 Observer 在做的事情）</p>\n</blockquote>\n<p>這裏就比較困難要分段看了，</p>\n<p>先到 run 裡面看看我們要怎麼按照上方的 pattern 來加入 proxy。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyDOMSource = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(proxyDOMSource);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DOMSource = drivers.DOM(sinks.DOM);</span><br><span class=\"line\">    DOMSource.subscribe(click =&gt; proxyDOMSource.onNext(click))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DOMDriver 回傳了一個 click-event 的 stream（Observable），</p>\n<p>所以我們 subscribe 它，並且每一次呼叫 click 的 stream，</p>\n<p>跟我們前面創造的 proxy 整合在一起，</p>\n<p>下來再來看 proxy 傳進 main 發生了什麼事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">DOMSource</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> click$ = DOMSource;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        DOM: click$</span><br><span class=\"line\">        .startWith(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        .flatMapLatest(() =&gt;</span><br><span class=\"line\">            Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"string\">`Seconds elapsed <span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">        ), </span><br><span class=\"line\">        Log: Observable.timer(<span class=\"number\">0</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">            .map(i =&gt; <span class=\"number\">2</span> * i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>簡單說就是我們每次在螢幕上按一下(click)，</p>\n<p>就會重啟整個 timer。</p>\n<blockquote>\n<p>歸功於 flapMapLatest 這個 operator，</p>\n<p>假如這裡改用 flapMap 的話，會發現舊的 stream 還在繼續跑，</p>\n<p>整個 timer 會被搗亂，假如還不熟 flatMap 該怎麼用</p>\n<p>請至 prerequisite 玩一下 <a href=\"http://reactivex.io/learnrx/\">learn-rx</a></p>\n</blockquote>\n<p>而 <code>startWith(null)</code> 則是製造一次「假的」 event，</p>\n<p>來觸發第一次還沒 click 之前的 effect。</p>\n<p>現在的 code 看起來很糟糕，尤其是在 main 中 hard code DOMSource 這一點。</p>\n<p>首先先從 run 中下手：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">mainFn, drivers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxySources = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers).forEach(key =&gt;&#123;</span><br><span class=\"line\">        proxySources[key] = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sinks = mainFn(proxySources);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(drivers)</span><br><span class=\"line\">          .forEach(key =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> source = drivers[key](sinks[key])</span><br><span class=\"line\">            source.subscribe(x =&gt; proxySources[key].onNext(x))</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一來我們就不用去 hard code 的指定每個 proxySource，</p>\n<p>而在 main 中簡單多了，只要把 click$ 的來源變成 sources.DOM 就好了，</p>\n<p>但在這裡我們可能會對一個 undefined 呼叫 subscribe。</p>\n<blockquote>\n<p>consoleLogDriver 並沒有 return 任何東西（nothing to be read）</p>\n</blockquote>\n<p>要避免這點只要加個判斷式就能夠解決，</p>\n<p>不過截至目前為止，我們其實已經把 Cycle core 中的 run 給實作的差不多了！</p>\n<ul>\n<li><a href=\"https://github.com/cyclejs/cycle-core/blob/master/src/cycle.js#L97:L118\">source code of run in Cycle.js</a></li>\n</ul>\n<blockquote>\n<p>當然還是有些差異在，像是 error-handling，</p>\n<p>以及在 Cycle core 的 proxy 中是用 <code>ReplaySubject</code> 而不是 <code>Subject</code></p>\n</blockquote>\n<hr>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><p><a href=\"http://staltz.com/why-react-redux-is-an-inferior-paradigm.html\">WHY REACT/REDUX IS AN INFERIOR PARADIGM</a></p>\n</li>\n<li><p><a href=\"http://staltz.com/unidirectional-user-interface-architectures.html\">UNIDIRECTIONAL USER INTERFACE ARCHITECTURES</a></p>\n</li>\n<li><p><a href=\"https://xgrommx.github.io\">Rx-book</a></p>\n</li>\n</ul>"},{"title":"我的前端工程師之路","date":"2016-01-17T16:00:00.000Z","_content":"\n「這個畫面幫我稍微調一下應該沒有很難吧？」\n\n<!--more-->\n\nHi 大家，先簡介一下自己背景：\n\n- 非資工資科資管系(也就是所謂的非本科系)\n\n> 其實我覺得第一點不是很重要、我也很討厭強調，\n\n> 但偏偏就是很常被問，\n\n> 要不然就是別人聽到你大學是XX系就會：「蛤？」\n\n> 索性就把它列出來了。\n\n- 興趣使然的前端工程師，擅長一鍵跑版\n\n- 沒上過資策會、巨匠，或任何各種職訓班，但買過 tree house 的課程和幾本書\n\n- 學習時間：一年半（從碼盲到現在終於可以改一些 code）\n\n- 稍微熟一點的技能： JavaScript, CSS, html, React.js\n\n- 預計未來要學的東西：Haskell, golang, Angular(2.0), Rx.js\n\n- 這是之前相關的[專訪](http://westudent-blog.sudo.com.tw/denny-sudo.html)，但我一直都想自己寫一篇，也不是 William 寫得不好，但總覺得哪裡不對勁，也許自幹就是一種工程師的浪漫吧！\n\n> 後來想想，也許是整篇文章太強調「本科」影響不大\n\n> 事實上我想說的是：「非本科不該是阻擋你寫程式的理由。」\n\n\n- 總之這篇就是來介紹一下我是怎麼慢慢上手這個職業，中間會提到一些我覺得很棒的學習資源，和吸收新知的方式。\n\n- 說到吸收新知，目前首推[碼天狗](http://weekly.codetengu.com/)，它讓我禮拜一早上都會很焦慮的重新整理，大家可以感受一下。\n\n\n# Porjects\n\n- 這是我簡介自己做過 projects 的[slide](http://slides.com/dennyku/deck-1#/)\n\n- 會放這個是因為我本來要買月費專案($7/month)，卻手滑買到年費專案($70/year)，gan，只好多多利用它了。\n\n---\n\n# Get started\n\n其實我本來立志成為一個 Data Scientist ，\n\n只是不小心被擺到前端的位置上去......\n\n回顧這一年半的旅程，前端的東西真的太多太雜了，\n\n更容易完全只知其然而不知其所以然的就開始用某個新框架、library，\n\n所以對我來說，**「學什麼」是副課題，「不學什麼」才是真正的關鍵**。\n\n---\n\n因為我前端工程師的路還沒走完，\n\n所以應該在我退休或換職業（去賣雞排）之前，\n\n都會繼續寫下去。\n\n目前寫完三點：\n\n1. 非本科系 v.s 本科系\n\n2. 從哪裡開始學習？\n\n3. 前端工程師該懂後端嗎？\n\n---\n\n## 1. 非本科系 v.s 本科系\n\n就來說說**「本科系」**來到底有沒有差。\n\n首先，我們都知道學校裡的課程，\n\n很少是真的專注在所謂「**前端工程**」上；\n\n這是可以理解的，一來因為前端變化太快，\n\n學期初才在說好棒棒的東西，\n\n到了學期末可能就變 deprecated了。\n\n所以這就代表非本科系跟本科系的人站在相同的學習立足點上了嗎？\n\nNo，你得面對現實，本科生就是有他的優勢在。\n\n這裏要講個實習的故事。\n\n我第一間去實習的新創公司，應徵的是行銷，\n\nCEO 是個自己學習 JavaScript 並且把產品做出來的人，\n\n更重要的是他是個很願意教的人，\n\n在我表示我想朝這方向前進的意願時，\n\n他很大方的說：「如果你對 JavaScript 有興趣可以教你。」\n\n當時還有另一位是資管系的同學也一起，\n\n第一次的作業是用 Angular 做表單的驗證，\n\n怎麼讓使用者不能繼續輸入資料呢？\n\n（當時的我連 JavaScript、html 都不會寫）\n\n我的做法是非常土炮的將 input 換成 div 然後加上紅色的邊框，\n\n另一位實習生則是使用了 disabled 這個 property，就搞定了。\n\n講起來也沒什麼了不起的技巧，但不知道就是不知道。\n\n我問他怎麼會知道有 disabled 這個特性，\n\n他的回答也很簡單：「查文件啊！」\n\n也是這次教訓，我知道要先**查文件**。\n\n講起來蠻白癡，\n\n不過會上 [stackoverflow](http://stackoverflow.com/) 和 google 找答案和看官方文件，\n\n都是最基本的能力。\n\n為什麼他會知道？\n\n很簡單，因為平常他們在寫作業或作專題就需要這個能力。\n\n![rtfm](http://i.imgur.com/B8wms6V.png)\n\n> 既然我們遇到不會的字會查字典，\n> 那為什麼我們寫軟體遇到問題時，不需要讀 doc 呢？\n\n而對於整個電腦的理解，非本科系的人絕對也是被甩在幾條街之外，\n\n因為我們不需要修資料結構、演算法，\n\n更別說對於資料庫，\n\n作業系統、計算機結構、計算機組織、編譯器理解的淺薄，\n\n一定要掌握上述這些知識才能寫前端嗎？\n\n這是一個很大的疑問；\n\n但一個了解底下發生什麼事情的人，才會更知道極限在哪裏，\n\n這個絕對是肯定的。\n\n有時候你寫程式時會卡在一個小小的點，想出來之後覺得沒什麼，\n\n而本科系的人能從以前上述課程中的經驗去延伸，\n\n（不管是演算法或是系統相關的事情）\n\n比你更快速得到答案。\n\n畢竟，人家花了那麼多時間了解電腦，\n\n你如果不是天縱英才，要比他們理解電腦就得更努力跟上才行。\n\n這裏推薦一個很棒的課程，[nand2tetris](http://www.nand2tetris.org/)，\n\n上面有很詳細的指示，如果你需要影片和評分系統的話，\n\ncoursera 上也有開課了:[https://www.coursera.org/course/nand2tetris1](https://www.coursera.org/course/nand2tetris1)。\n\n這門課會從最基本的 nand(not and) 邏輯閘開始講起，\n\n用模擬器組合出自己的 CPU、記憶體，定義自己的組合語言，\n\n用習慣的程式語言寫出組譯器，\n\n再寫出一個超簡易版的 JVM，最後用一個簡化過後的 Java 語言（真的超簡化），\n\n寫出一個俄羅斯方塊來。\n\n整台電腦、軟體，都是由你一手寫出來的，不覺得很熱血嗎？\n\n而且你終於也能夠看懂這張圖的笑點在哪了：\n\n![gif](https://media.giphy.com/media/3oEdv6pGyOH00ZiRH2/giphy.gif)\n\n當然，如果你在學習途中發現你對系統的東西很有興趣，\n\n那也恭喜你發現新天地啦！\n\n想當初為了所謂堅實的基礎，還跑去圖書館借白算盤來啃，\n\n那又是另一個故事了。\n\n\n總結一下這一段，\n\n**前端工程師也是軟體工程師**，\n\n對電腦一無所知的人寫出來的軟體，你敢用嗎？\n\n我認為至少玩過一輪 nand2tetris 對於非本科系的人會相當有幫助，\n\n本科系的人來寫前端確實是有一點優勢在，\n\n但這不是認輸的藉口，\n\n而是你必須比別人更努力找方法變強的原因。\n\n另外，\n\n千萬不要以為念研究所的人是只會讀書的書呆子，\n\n比你聰明、比你努力，又比你勇敢的人永遠都多的是。\n\n----\n\n## 2. 從哪裡開始學習？\n\n先來說說「單純」的前端從哪裡開始，\n\n主要分成兩塊：\n\n第一塊是 html 和 CSS：\n\n我以前學習 html 和 CSS 的方法就是把 [w3schools](http://www.w3schools.com/)看完，\n\n不能說有什麼不好，不過真的是看完大部分都忘記，\n\n畢竟很多東西都馬是要用到的時候再去查。\n\n但現在我會推薦 [codecademy](https://www.codecademy.com/)，\n\n邊寫點東西邊學絕對是很有效的學習方式。\n\n而學會基礎後，\n\n要怎麼設計出好維護又乾淨的 html and CSS 那又是另一個很長的故事。\n\n\n第二塊則是 JavaScript：\n\n坦白說一年半過去，我仍然認為自己在 JavaScript 的知識上很貧瘠。\n\n這裏有篇 [10 個面試時應該要知道的問題](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.k5wxhl2s1)，\n\n可以探一下自己到底對 JavaScript 理解多少。\n\n這裏如果把教學全部列出來，真的是完全列不完，\n\n但學習的流程是這樣子：\n\n- 掌握了基礎的語法和原則\n\n- 實作練習\n\n- 回頭研究基礎再繼續實作\n\n- 重複以上循環不斷的把你的武器磨的更亮\n\n\n至於掌握基礎的語法，你可以到以下任一網站，\n\n挑一個你喜歡的，上完基礎 JavaScript 課程：\n\n- [tree house](https://teamtreehouse.com/) \n\n- [codeschool](https://www.codeschool.com/)\n\n- [egghead.io](https://egghead.io/)\n\n練習一段時間後，你會發現又有好多新工具冒出來了，\n\n這時候你可以先辦個 github 帳號，\n\n首先 watch awesome 這個 repo: [https://github.com/sindresorhus/awesome ](https://github.com/sindresorhus/awesome)，\n\n看一下你喜歡的領域有沒有什麼好東西，\n\n再挑幾個你最有興趣的 repo 按下 watch，\n\n最後再開始訂閱各大框架或社群的 weekly，\n\n接著就是準備被源源不絕的資訊轟炸、不斷的學習和升級。\n\n而值得一提的是， JavaScript 有很多工具可以用，\n\n不管是 library 還是 framework，\n\n學習之前，真的必須想一想：\n\n**「你真的需要用它嗎？」**\n\n舉例來說：\n\nReact 的確相當的好用，\n\n但是你的畫面真的有那麼多 state 要處理嗎？\n\n有些人簡單的認為 SPA(Single Page Application)就要用 React，\n\n我得說不一定，假如根本沒有那麼複雜，\n\n也許你只是需要一個 template engine 而已，\n\n而把 React 當作 html 的 template 來用，\n\n實在是有點太小看它了。\n\n什麼時候該用 React 或是 React 到底好在哪裏，\n\n這個議題其實已經超出了本篇文章的範圍，\n\n有興趣的可以看這篇：[React Components, Elements, and Instances by Dan Abramov(Redux 作者)](https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca)\n\n這也是為什麼我一直遲遲沒有碰 Angular 的原因，\n\n（因為我還沒遇過複雜到需要用到它的情境）\n\n但我認為在選擇前端的框架時，這篇文章很值得一看再看：\n\n- [界面之下：還原真實的MV*模式 ](https://github.com/livoras/blog/issues/11)\n\n裡面並沒有太多的程式碼，只有比較 high level 的概念，\n\n但看完你會比較理解別人說 MVC、MVP、MVVM、Model 2 是在說些什麼，\n\n前端主要工作之一就是處理使用者介面（UI），\n\n我認為理解這些模式是一個前端工程師必備的 common sense，\n\n這些概念比起淘汰迅速的工具們，是比較能夠保值的，\n\n並且也會漸漸影響你挑選工具的眼光。\n\n而 medium 上也有許多好文章可以看，\n\ntwitter 上面也有很多大神可以讓你追蹤，\n\n不要把這些事情當作是在大拜拜，\n\n覺得追蹤越多人自己越屌，\n\n重要的是你看他們生產的內容時得到了什麼。\n\n另外臉書上的前端社團也很值得加入，台灣人的軟體能力是很強悍的：\n\n- [Front-End Developers Taiwan](https://www.facebook.com/groups/f2e.tw/?fref=ts)\n\n- [AngularJS.tw](https://www.facebook.com/groups/augularjs.tw/?fref=ts)\n\n- [ReactJS.tw](https://www.facebook.com/groups/reactjs.tw/?fref=ts)\n\n- [JavaScript.tw](https://www.facebook.com/groups/javascript.tw)\n\n重要的是在上面發問，也會有人很熱心的回答你。\n\n假如這樣都還是讓你資訊焦慮，可以開始訂閱一些技術週刊，\n\n像是[碼天狗](http://weekly.codetengu.com/)、[TechBridge](http://weekly.techbridge.cc/)，\n\n讓 curators 來幫你整理一些技術上的新知。\n\n已經盡量精簡了資訊來源，希望能讓新手們不要太無所適從。\n\n------\n\n## 3. 前端工程師該懂後端嗎？\n\n後端跟前端是完全不一樣的專業，\n\n有人說 Node.js 能讓前端工程師跨足到後端去。\n\n(Isomorphic？)\n\n事實上前端工程師想往後端走還是有許多需要學習的，\n\n不管是資料庫或是系統面，都不是平常前端會碰觸到的領域，\n\n認為自己會寫 JavaScript 就硬上的下場通常是：\n\n- 效能有問題\n\n- 資安有問題\n\n- 整個 server-side 的 code 都他媽很有問題\n\n聽起來是很糟糕的事情，所以請千萬尊重專業，\n\n讓我們前端歸前端、政治歸政治（欸？）。\n\n那前端到底要理解後端到怎樣的程度呢？\n\n這是一個很 tricky 的問題，\n\n大部份人會說：**「至少要會接資料啦！」**\n\n但要學到會接資料揪竟是需要怎樣的能力呢？\n\n真的有人學到剛剛好就喊停的嗎？\n\n最好的方法其實就是自己去玩一套網頁框架，\n\n後端前端都寫一遍。\n\nRails, Laravel, Django 都是我認為不錯的選擇，\n\n（Koa 也很不錯啦......）\n\n重點是去感受一下自己要怎樣設計 DB 的 Schema，\n\n怎樣做正規化、怎樣避免 N+1 Query，\n\n以及整個框架的架構為什麼要這樣設計，\n\n最後再跟自己拉的頁面整合在一起，然後部署上去，\n\n（用 heroku 是有點偷懶，不過如果你對 server 真的沒興趣，還是可以考慮這樣做沒差）\n\n等做到這一步，「至少要會接資料」這一點，\n\n早就迎刃而解了。\n\n對了，\n\n記得也不要因為自己寫過後端的 code 就說自己是 full-stack，\n\n這就跟你會收發 email 就說自己懂電腦一樣會被笑。\n\n(IT crowd 真的是個不錯的影集)\n\n有興趣可以看看這篇：\n\n- [一個前端工程師眼中的 Node.js](http://www.infoq.com/cn/articles/nodejs-in-front-end-engineer-view)\n\n可以略懂 Async 在 server 端和 client 端的差異。\n\n----\n\n目前大概走到這裡，還有很多沒說到，\n\n但學個基礎開始實作後就能體會到許多了。\n\n> 至於實作，\n\n> 可以選擇自己寫個身體健康、參與 open source，\n\n> 或是去實習都是非常好的選擇\n\n\n不管是 RWD、mobile web、跨瀏覽器的處理、SEO，\n\n動畫該用 CSS3 或是 JavaScript 還是 SVG？\n\n每天都有新的問題可以鑽研，\n\n目前就先寫到這裡啦！\n\n希望可以改變一些覺得前端工程師只是在切切版的想法，\n\n也希望能幫助到想往前端工程師邁進的人。","source":"_posts/way-to-fed.md","raw":"---\ntitle: 我的前端工程師之路\ndate: 2016/1/18\ntags: [career, front-end]\n---\n\n「這個畫面幫我稍微調一下應該沒有很難吧？」\n\n<!--more-->\n\nHi 大家，先簡介一下自己背景：\n\n- 非資工資科資管系(也就是所謂的非本科系)\n\n> 其實我覺得第一點不是很重要、我也很討厭強調，\n\n> 但偏偏就是很常被問，\n\n> 要不然就是別人聽到你大學是XX系就會：「蛤？」\n\n> 索性就把它列出來了。\n\n- 興趣使然的前端工程師，擅長一鍵跑版\n\n- 沒上過資策會、巨匠，或任何各種職訓班，但買過 tree house 的課程和幾本書\n\n- 學習時間：一年半（從碼盲到現在終於可以改一些 code）\n\n- 稍微熟一點的技能： JavaScript, CSS, html, React.js\n\n- 預計未來要學的東西：Haskell, golang, Angular(2.0), Rx.js\n\n- 這是之前相關的[專訪](http://westudent-blog.sudo.com.tw/denny-sudo.html)，但我一直都想自己寫一篇，也不是 William 寫得不好，但總覺得哪裡不對勁，也許自幹就是一種工程師的浪漫吧！\n\n> 後來想想，也許是整篇文章太強調「本科」影響不大\n\n> 事實上我想說的是：「非本科不該是阻擋你寫程式的理由。」\n\n\n- 總之這篇就是來介紹一下我是怎麼慢慢上手這個職業，中間會提到一些我覺得很棒的學習資源，和吸收新知的方式。\n\n- 說到吸收新知，目前首推[碼天狗](http://weekly.codetengu.com/)，它讓我禮拜一早上都會很焦慮的重新整理，大家可以感受一下。\n\n\n# Porjects\n\n- 這是我簡介自己做過 projects 的[slide](http://slides.com/dennyku/deck-1#/)\n\n- 會放這個是因為我本來要買月費專案($7/month)，卻手滑買到年費專案($70/year)，gan，只好多多利用它了。\n\n---\n\n# Get started\n\n其實我本來立志成為一個 Data Scientist ，\n\n只是不小心被擺到前端的位置上去......\n\n回顧這一年半的旅程，前端的東西真的太多太雜了，\n\n更容易完全只知其然而不知其所以然的就開始用某個新框架、library，\n\n所以對我來說，**「學什麼」是副課題，「不學什麼」才是真正的關鍵**。\n\n---\n\n因為我前端工程師的路還沒走完，\n\n所以應該在我退休或換職業（去賣雞排）之前，\n\n都會繼續寫下去。\n\n目前寫完三點：\n\n1. 非本科系 v.s 本科系\n\n2. 從哪裡開始學習？\n\n3. 前端工程師該懂後端嗎？\n\n---\n\n## 1. 非本科系 v.s 本科系\n\n就來說說**「本科系」**來到底有沒有差。\n\n首先，我們都知道學校裡的課程，\n\n很少是真的專注在所謂「**前端工程**」上；\n\n這是可以理解的，一來因為前端變化太快，\n\n學期初才在說好棒棒的東西，\n\n到了學期末可能就變 deprecated了。\n\n所以這就代表非本科系跟本科系的人站在相同的學習立足點上了嗎？\n\nNo，你得面對現實，本科生就是有他的優勢在。\n\n這裏要講個實習的故事。\n\n我第一間去實習的新創公司，應徵的是行銷，\n\nCEO 是個自己學習 JavaScript 並且把產品做出來的人，\n\n更重要的是他是個很願意教的人，\n\n在我表示我想朝這方向前進的意願時，\n\n他很大方的說：「如果你對 JavaScript 有興趣可以教你。」\n\n當時還有另一位是資管系的同學也一起，\n\n第一次的作業是用 Angular 做表單的驗證，\n\n怎麼讓使用者不能繼續輸入資料呢？\n\n（當時的我連 JavaScript、html 都不會寫）\n\n我的做法是非常土炮的將 input 換成 div 然後加上紅色的邊框，\n\n另一位實習生則是使用了 disabled 這個 property，就搞定了。\n\n講起來也沒什麼了不起的技巧，但不知道就是不知道。\n\n我問他怎麼會知道有 disabled 這個特性，\n\n他的回答也很簡單：「查文件啊！」\n\n也是這次教訓，我知道要先**查文件**。\n\n講起來蠻白癡，\n\n不過會上 [stackoverflow](http://stackoverflow.com/) 和 google 找答案和看官方文件，\n\n都是最基本的能力。\n\n為什麼他會知道？\n\n很簡單，因為平常他們在寫作業或作專題就需要這個能力。\n\n![rtfm](http://i.imgur.com/B8wms6V.png)\n\n> 既然我們遇到不會的字會查字典，\n> 那為什麼我們寫軟體遇到問題時，不需要讀 doc 呢？\n\n而對於整個電腦的理解，非本科系的人絕對也是被甩在幾條街之外，\n\n因為我們不需要修資料結構、演算法，\n\n更別說對於資料庫，\n\n作業系統、計算機結構、計算機組織、編譯器理解的淺薄，\n\n一定要掌握上述這些知識才能寫前端嗎？\n\n這是一個很大的疑問；\n\n但一個了解底下發生什麼事情的人，才會更知道極限在哪裏，\n\n這個絕對是肯定的。\n\n有時候你寫程式時會卡在一個小小的點，想出來之後覺得沒什麼，\n\n而本科系的人能從以前上述課程中的經驗去延伸，\n\n（不管是演算法或是系統相關的事情）\n\n比你更快速得到答案。\n\n畢竟，人家花了那麼多時間了解電腦，\n\n你如果不是天縱英才，要比他們理解電腦就得更努力跟上才行。\n\n這裏推薦一個很棒的課程，[nand2tetris](http://www.nand2tetris.org/)，\n\n上面有很詳細的指示，如果你需要影片和評分系統的話，\n\ncoursera 上也有開課了:[https://www.coursera.org/course/nand2tetris1](https://www.coursera.org/course/nand2tetris1)。\n\n這門課會從最基本的 nand(not and) 邏輯閘開始講起，\n\n用模擬器組合出自己的 CPU、記憶體，定義自己的組合語言，\n\n用習慣的程式語言寫出組譯器，\n\n再寫出一個超簡易版的 JVM，最後用一個簡化過後的 Java 語言（真的超簡化），\n\n寫出一個俄羅斯方塊來。\n\n整台電腦、軟體，都是由你一手寫出來的，不覺得很熱血嗎？\n\n而且你終於也能夠看懂這張圖的笑點在哪了：\n\n![gif](https://media.giphy.com/media/3oEdv6pGyOH00ZiRH2/giphy.gif)\n\n當然，如果你在學習途中發現你對系統的東西很有興趣，\n\n那也恭喜你發現新天地啦！\n\n想當初為了所謂堅實的基礎，還跑去圖書館借白算盤來啃，\n\n那又是另一個故事了。\n\n\n總結一下這一段，\n\n**前端工程師也是軟體工程師**，\n\n對電腦一無所知的人寫出來的軟體，你敢用嗎？\n\n我認為至少玩過一輪 nand2tetris 對於非本科系的人會相當有幫助，\n\n本科系的人來寫前端確實是有一點優勢在，\n\n但這不是認輸的藉口，\n\n而是你必須比別人更努力找方法變強的原因。\n\n另外，\n\n千萬不要以為念研究所的人是只會讀書的書呆子，\n\n比你聰明、比你努力，又比你勇敢的人永遠都多的是。\n\n----\n\n## 2. 從哪裡開始學習？\n\n先來說說「單純」的前端從哪裡開始，\n\n主要分成兩塊：\n\n第一塊是 html 和 CSS：\n\n我以前學習 html 和 CSS 的方法就是把 [w3schools](http://www.w3schools.com/)看完，\n\n不能說有什麼不好，不過真的是看完大部分都忘記，\n\n畢竟很多東西都馬是要用到的時候再去查。\n\n但現在我會推薦 [codecademy](https://www.codecademy.com/)，\n\n邊寫點東西邊學絕對是很有效的學習方式。\n\n而學會基礎後，\n\n要怎麼設計出好維護又乾淨的 html and CSS 那又是另一個很長的故事。\n\n\n第二塊則是 JavaScript：\n\n坦白說一年半過去，我仍然認為自己在 JavaScript 的知識上很貧瘠。\n\n這裏有篇 [10 個面試時應該要知道的問題](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.k5wxhl2s1)，\n\n可以探一下自己到底對 JavaScript 理解多少。\n\n這裏如果把教學全部列出來，真的是完全列不完，\n\n但學習的流程是這樣子：\n\n- 掌握了基礎的語法和原則\n\n- 實作練習\n\n- 回頭研究基礎再繼續實作\n\n- 重複以上循環不斷的把你的武器磨的更亮\n\n\n至於掌握基礎的語法，你可以到以下任一網站，\n\n挑一個你喜歡的，上完基礎 JavaScript 課程：\n\n- [tree house](https://teamtreehouse.com/) \n\n- [codeschool](https://www.codeschool.com/)\n\n- [egghead.io](https://egghead.io/)\n\n練習一段時間後，你會發現又有好多新工具冒出來了，\n\n這時候你可以先辦個 github 帳號，\n\n首先 watch awesome 這個 repo: [https://github.com/sindresorhus/awesome ](https://github.com/sindresorhus/awesome)，\n\n看一下你喜歡的領域有沒有什麼好東西，\n\n再挑幾個你最有興趣的 repo 按下 watch，\n\n最後再開始訂閱各大框架或社群的 weekly，\n\n接著就是準備被源源不絕的資訊轟炸、不斷的學習和升級。\n\n而值得一提的是， JavaScript 有很多工具可以用，\n\n不管是 library 還是 framework，\n\n學習之前，真的必須想一想：\n\n**「你真的需要用它嗎？」**\n\n舉例來說：\n\nReact 的確相當的好用，\n\n但是你的畫面真的有那麼多 state 要處理嗎？\n\n有些人簡單的認為 SPA(Single Page Application)就要用 React，\n\n我得說不一定，假如根本沒有那麼複雜，\n\n也許你只是需要一個 template engine 而已，\n\n而把 React 當作 html 的 template 來用，\n\n實在是有點太小看它了。\n\n什麼時候該用 React 或是 React 到底好在哪裏，\n\n這個議題其實已經超出了本篇文章的範圍，\n\n有興趣的可以看這篇：[React Components, Elements, and Instances by Dan Abramov(Redux 作者)](https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca)\n\n這也是為什麼我一直遲遲沒有碰 Angular 的原因，\n\n（因為我還沒遇過複雜到需要用到它的情境）\n\n但我認為在選擇前端的框架時，這篇文章很值得一看再看：\n\n- [界面之下：還原真實的MV*模式 ](https://github.com/livoras/blog/issues/11)\n\n裡面並沒有太多的程式碼，只有比較 high level 的概念，\n\n但看完你會比較理解別人說 MVC、MVP、MVVM、Model 2 是在說些什麼，\n\n前端主要工作之一就是處理使用者介面（UI），\n\n我認為理解這些模式是一個前端工程師必備的 common sense，\n\n這些概念比起淘汰迅速的工具們，是比較能夠保值的，\n\n並且也會漸漸影響你挑選工具的眼光。\n\n而 medium 上也有許多好文章可以看，\n\ntwitter 上面也有很多大神可以讓你追蹤，\n\n不要把這些事情當作是在大拜拜，\n\n覺得追蹤越多人自己越屌，\n\n重要的是你看他們生產的內容時得到了什麼。\n\n另外臉書上的前端社團也很值得加入，台灣人的軟體能力是很強悍的：\n\n- [Front-End Developers Taiwan](https://www.facebook.com/groups/f2e.tw/?fref=ts)\n\n- [AngularJS.tw](https://www.facebook.com/groups/augularjs.tw/?fref=ts)\n\n- [ReactJS.tw](https://www.facebook.com/groups/reactjs.tw/?fref=ts)\n\n- [JavaScript.tw](https://www.facebook.com/groups/javascript.tw)\n\n重要的是在上面發問，也會有人很熱心的回答你。\n\n假如這樣都還是讓你資訊焦慮，可以開始訂閱一些技術週刊，\n\n像是[碼天狗](http://weekly.codetengu.com/)、[TechBridge](http://weekly.techbridge.cc/)，\n\n讓 curators 來幫你整理一些技術上的新知。\n\n已經盡量精簡了資訊來源，希望能讓新手們不要太無所適從。\n\n------\n\n## 3. 前端工程師該懂後端嗎？\n\n後端跟前端是完全不一樣的專業，\n\n有人說 Node.js 能讓前端工程師跨足到後端去。\n\n(Isomorphic？)\n\n事實上前端工程師想往後端走還是有許多需要學習的，\n\n不管是資料庫或是系統面，都不是平常前端會碰觸到的領域，\n\n認為自己會寫 JavaScript 就硬上的下場通常是：\n\n- 效能有問題\n\n- 資安有問題\n\n- 整個 server-side 的 code 都他媽很有問題\n\n聽起來是很糟糕的事情，所以請千萬尊重專業，\n\n讓我們前端歸前端、政治歸政治（欸？）。\n\n那前端到底要理解後端到怎樣的程度呢？\n\n這是一個很 tricky 的問題，\n\n大部份人會說：**「至少要會接資料啦！」**\n\n但要學到會接資料揪竟是需要怎樣的能力呢？\n\n真的有人學到剛剛好就喊停的嗎？\n\n最好的方法其實就是自己去玩一套網頁框架，\n\n後端前端都寫一遍。\n\nRails, Laravel, Django 都是我認為不錯的選擇，\n\n（Koa 也很不錯啦......）\n\n重點是去感受一下自己要怎樣設計 DB 的 Schema，\n\n怎樣做正規化、怎樣避免 N+1 Query，\n\n以及整個框架的架構為什麼要這樣設計，\n\n最後再跟自己拉的頁面整合在一起，然後部署上去，\n\n（用 heroku 是有點偷懶，不過如果你對 server 真的沒興趣，還是可以考慮這樣做沒差）\n\n等做到這一步，「至少要會接資料」這一點，\n\n早就迎刃而解了。\n\n對了，\n\n記得也不要因為自己寫過後端的 code 就說自己是 full-stack，\n\n這就跟你會收發 email 就說自己懂電腦一樣會被笑。\n\n(IT crowd 真的是個不錯的影集)\n\n有興趣可以看看這篇：\n\n- [一個前端工程師眼中的 Node.js](http://www.infoq.com/cn/articles/nodejs-in-front-end-engineer-view)\n\n可以略懂 Async 在 server 端和 client 端的差異。\n\n----\n\n目前大概走到這裡，還有很多沒說到，\n\n但學個基礎開始實作後就能體會到許多了。\n\n> 至於實作，\n\n> 可以選擇自己寫個身體健康、參與 open source，\n\n> 或是去實習都是非常好的選擇\n\n\n不管是 RWD、mobile web、跨瀏覽器的處理、SEO，\n\n動畫該用 CSS3 或是 JavaScript 還是 SVG？\n\n每天都有新的問題可以鑽研，\n\n目前就先寫到這裡啦！\n\n希望可以改變一些覺得前端工程師只是在切切版的想法，\n\n也希望能幫助到想往前端工程師邁進的人。","slug":"way-to-fed","published":1,"updated":"2016-04-24T13:01:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinemwh5y0009f6063j49pjxi","content":"<p>「這個畫面幫我稍微調一下應該沒有很難吧？」</p>\n<a id=\"more\"></a>\n<p>Hi 大家，先簡介一下自己背景：</p>\n<ul>\n<li>非資工資科資管系(也就是所謂的非本科系)</li>\n</ul>\n<blockquote>\n<p>其實我覺得第一點不是很重要、我也很討厭強調，</p>\n<p>但偏偏就是很常被問，</p>\n<p>要不然就是別人聽到你大學是XX系就會：「蛤？」</p>\n<p>索性就把它列出來了。</p>\n</blockquote>\n<ul>\n<li><p>興趣使然的前端工程師，擅長一鍵跑版</p>\n</li>\n<li><p>沒上過資策會、巨匠，或任何各種職訓班，但買過 tree house 的課程和幾本書</p>\n</li>\n<li><p>學習時間：一年半（從碼盲到現在終於可以改一些 code）</p>\n</li>\n<li><p>稍微熟一點的技能： JavaScript, CSS, html, React.js</p>\n</li>\n<li><p>預計未來要學的東西：Haskell, golang, Angular(2.0), Rx.js</p>\n</li>\n<li><p>這是之前相關的<a href=\"http://westudent-blog.sudo.com.tw/denny-sudo.html\" target=\"_blank\" rel=\"external\">專訪</a>，但我一直都想自己寫一篇，也不是 William 寫得不好，但總覺得哪裡不對勁，也許自幹就是一種工程師的浪漫吧！</p>\n</li>\n</ul>\n<blockquote>\n<p>後來想想，也許是整篇文章太強調「本科」影響不大</p>\n<p>事實上我想說的是：「非本科不該是阻擋你寫程式的理由。」</p>\n</blockquote>\n<ul>\n<li><p>總之這篇就是來介紹一下我是怎麼慢慢上手這個職業，中間會提到一些我覺得很棒的學習資源，和吸收新知的方式。</p>\n</li>\n<li><p>說到吸收新知，目前首推<a href=\"http://weekly.codetengu.com/\" target=\"_blank\" rel=\"external\">碼天狗</a>，它讓我禮拜一早上都會很焦慮的重新整理，大家可以感受一下。</p>\n</li>\n</ul>\n<h1 id=\"Porjects\"><a href=\"#Porjects\" class=\"headerlink\" title=\"Porjects\"></a>Porjects</h1><ul>\n<li><p>這是我簡介自己做過 projects 的<a href=\"http://slides.com/dennyku/deck-1#/\" target=\"_blank\" rel=\"external\">slide</a></p>\n</li>\n<li><p>會放這個是因為我本來要買月費專案($7/month)，卻手滑買到年費專案($70/year)，gan，只好多多利用它了。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Get-started\"><a href=\"#Get-started\" class=\"headerlink\" title=\"Get started\"></a>Get started</h1><p>其實我本來立志成為一個 Data Scientist ，</p>\n<p>只是不小心被擺到前端的位置上去……</p>\n<p>回顧這一年半的旅程，前端的東西真的太多太雜了，</p>\n<p>更容易完全只知其然而不知其所以然的就開始用某個新框架、library，</p>\n<p>所以對我來說，<strong>「學什麼」是副課題，「不學什麼」才是真正的關鍵</strong>。</p>\n<hr>\n<p>因為我前端工程師的路還沒走完，</p>\n<p>所以應該在我退休或換職業（去賣雞排）之前，</p>\n<p>都會繼續寫下去。</p>\n<p>目前寫完三點：</p>\n<ol>\n<li><p>非本科系 v.s 本科系</p>\n</li>\n<li><p>從哪裡開始學習？</p>\n</li>\n<li><p>前端工程師該懂後端嗎？</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"1-非本科系-v-s-本科系\"><a href=\"#1-非本科系-v-s-本科系\" class=\"headerlink\" title=\"1. 非本科系 v.s 本科系\"></a>1. 非本科系 v.s 本科系</h2><p>就來說說<strong>「本科系」</strong>來到底有沒有差。</p>\n<p>首先，我們都知道學校裡的課程，</p>\n<p>很少是真的專注在所謂「<strong>前端工程</strong>」上；</p>\n<p>這是可以理解的，一來因為前端變化太快，</p>\n<p>學期初才在說好棒棒的東西，</p>\n<p>到了學期末可能就變 deprecated了。</p>\n<p>所以這就代表非本科系跟本科系的人站在相同的學習立足點上了嗎？</p>\n<p>No，你得面對現實，本科生就是有他的優勢在。</p>\n<p>這裏要講個實習的故事。</p>\n<p>我第一間去實習的新創公司，應徵的是行銷，</p>\n<p>CEO 是個自己學習 JavaScript 並且把產品做出來的人，</p>\n<p>更重要的是他是個很願意教的人，</p>\n<p>在我表示我想朝這方向前進的意願時，</p>\n<p>他很大方的說：「如果你對 JavaScript 有興趣可以教你。」</p>\n<p>當時還有另一位是資管系的同學也一起，</p>\n<p>第一次的作業是用 Angular 做表單的驗證，</p>\n<p>怎麼讓使用者不能繼續輸入資料呢？</p>\n<p>（當時的我連 JavaScript、html 都不會寫）</p>\n<p>我的做法是非常土炮的將 input 換成 div 然後加上紅色的邊框，</p>\n<p>另一位實習生則是使用了 disabled 這個 property，就搞定了。</p>\n<p>講起來也沒什麼了不起的技巧，但不知道就是不知道。</p>\n<p>我問他怎麼會知道有 disabled 這個特性，</p>\n<p>他的回答也很簡單：「查文件啊！」</p>\n<p>也是這次教訓，我知道要先<strong>查文件</strong>。</p>\n<p>講起來蠻白癡，</p>\n<p>不過會上 <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">stackoverflow</a> 和 google 找答案和看官方文件，</p>\n<p>都是最基本的能力。</p>\n<p>為什麼他會知道？</p>\n<p>很簡單，因為平常他們在寫作業或作專題就需要這個能力。</p>\n<p><img src=\"http://i.imgur.com/B8wms6V.png\" alt=\"rtfm\"></p>\n<blockquote>\n<p>既然我們遇到不會的字會查字典，<br>那為什麼我們寫軟體遇到問題時，不需要讀 doc 呢？</p>\n</blockquote>\n<p>而對於整個電腦的理解，非本科系的人絕對也是被甩在幾條街之外，</p>\n<p>因為我們不需要修資料結構、演算法，</p>\n<p>更別說對於資料庫，</p>\n<p>作業系統、計算機結構、計算機組織、編譯器理解的淺薄，</p>\n<p>一定要掌握上述這些知識才能寫前端嗎？</p>\n<p>這是一個很大的疑問；</p>\n<p>但一個了解底下發生什麼事情的人，才會更知道極限在哪裏，</p>\n<p>這個絕對是肯定的。</p>\n<p>有時候你寫程式時會卡在一個小小的點，想出來之後覺得沒什麼，</p>\n<p>而本科系的人能從以前上述課程中的經驗去延伸，</p>\n<p>（不管是演算法或是系統相關的事情）</p>\n<p>比你更快速得到答案。</p>\n<p>畢竟，人家花了那麼多時間了解電腦，</p>\n<p>你如果不是天縱英才，要比他們理解電腦就得更努力跟上才行。</p>\n<p>這裏推薦一個很棒的課程，<a href=\"http://www.nand2tetris.org/\" target=\"_blank\" rel=\"external\">nand2tetris</a>，</p>\n<p>上面有很詳細的指示，如果你需要影片和評分系統的話，</p>\n<p>coursera 上也有開課了:<a href=\"https://www.coursera.org/course/nand2tetris1\" target=\"_blank\" rel=\"external\">https://www.coursera.org/course/nand2tetris1</a>。</p>\n<p>這門課會從最基本的 nand(not and) 邏輯閘開始講起，</p>\n<p>用模擬器組合出自己的 CPU、記憶體，定義自己的組合語言，</p>\n<p>用習慣的程式語言寫出組譯器，</p>\n<p>再寫出一個超簡易版的 JVM，最後用一個簡化過後的 Java 語言（真的超簡化），</p>\n<p>寫出一個俄羅斯方塊來。</p>\n<p>整台電腦、軟體，都是由你一手寫出來的，不覺得很熱血嗎？</p>\n<p>而且你終於也能夠看懂這張圖的笑點在哪了：</p>\n<p><img src=\"https://media.giphy.com/media/3oEdv6pGyOH00ZiRH2/giphy.gif\" alt=\"gif\"></p>\n<p>當然，如果你在學習途中發現你對系統的東西很有興趣，</p>\n<p>那也恭喜你發現新天地啦！</p>\n<p>想當初為了所謂堅實的基礎，還跑去圖書館借白算盤來啃，</p>\n<p>那又是另一個故事了。</p>\n<p>總結一下這一段，</p>\n<p><strong>前端工程師也是軟體工程師</strong>，</p>\n<p>對電腦一無所知的人寫出來的軟體，你敢用嗎？</p>\n<p>我認為至少玩過一輪 nand2tetris 對於非本科系的人會相當有幫助，</p>\n<p>本科系的人來寫前端確實是有一點優勢在，</p>\n<p>但這不是認輸的藉口，</p>\n<p>而是你必須比別人更努力找方法變強的原因。</p>\n<p>另外，</p>\n<p>千萬不要以為念研究所的人是只會讀書的書呆子，</p>\n<p>比你聰明、比你努力，又比你勇敢的人永遠都多的是。</p>\n<hr>\n<h2 id=\"2-從哪裡開始學習？\"><a href=\"#2-從哪裡開始學習？\" class=\"headerlink\" title=\"2. 從哪裡開始學習？\"></a>2. 從哪裡開始學習？</h2><p>先來說說「單純」的前端從哪裡開始，</p>\n<p>主要分成兩塊：</p>\n<p>第一塊是 html 和 CSS：</p>\n<p>我以前學習 html 和 CSS 的方法就是把 <a href=\"http://www.w3schools.com/\" target=\"_blank\" rel=\"external\">w3schools</a>看完，</p>\n<p>不能說有什麼不好，不過真的是看完大部分都忘記，</p>\n<p>畢竟很多東西都馬是要用到的時候再去查。</p>\n<p>但現在我會推薦 <a href=\"https://www.codecademy.com/\" target=\"_blank\" rel=\"external\">codecademy</a>，</p>\n<p>邊寫點東西邊學絕對是很有效的學習方式。</p>\n<p>而學會基礎後，</p>\n<p>要怎麼設計出好維護又乾淨的 html and CSS 那又是另一個很長的故事。</p>\n<p>第二塊則是 JavaScript：</p>\n<p>坦白說一年半過去，我仍然認為自己在 JavaScript 的知識上很貧瘠。</p>\n<p>這裏有篇 <a href=\"https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.k5wxhl2s1\" target=\"_blank\" rel=\"external\">10 個面試時應該要知道的問題</a>，</p>\n<p>可以探一下自己到底對 JavaScript 理解多少。</p>\n<p>這裏如果把教學全部列出來，真的是完全列不完，</p>\n<p>但學習的流程是這樣子：</p>\n<ul>\n<li><p>掌握了基礎的語法和原則</p>\n</li>\n<li><p>實作練習</p>\n</li>\n<li><p>回頭研究基礎再繼續實作</p>\n</li>\n<li><p>重複以上循環不斷的把你的武器磨的更亮</p>\n</li>\n</ul>\n<p>至於掌握基礎的語法，你可以到以下任一網站，</p>\n<p>挑一個你喜歡的，上完基礎 JavaScript 課程：</p>\n<ul>\n<li><p><a href=\"https://teamtreehouse.com/\" target=\"_blank\" rel=\"external\">tree house</a> </p>\n</li>\n<li><p><a href=\"https://www.codeschool.com/\" target=\"_blank\" rel=\"external\">codeschool</a></p>\n</li>\n<li><p><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"external\">egghead.io</a></p>\n</li>\n</ul>\n<p>練習一段時間後，你會發現又有好多新工具冒出來了，</p>\n<p>這時候你可以先辦個 github 帳號，</p>\n<p>首先 watch awesome 這個 repo: <a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"external\">https://github.com/sindresorhus/awesome </a>，</p>\n<p>看一下你喜歡的領域有沒有什麼好東西，</p>\n<p>再挑幾個你最有興趣的 repo 按下 watch，</p>\n<p>最後再開始訂閱各大框架或社群的 weekly，</p>\n<p>接著就是準備被源源不絕的資訊轟炸、不斷的學習和升級。</p>\n<p>而值得一提的是， JavaScript 有很多工具可以用，</p>\n<p>不管是 library 還是 framework，</p>\n<p>學習之前，真的必須想一想：</p>\n<p><strong>「你真的需要用它嗎？」</strong></p>\n<p>舉例來說：</p>\n<p>React 的確相當的好用，</p>\n<p>但是你的畫面真的有那麼多 state 要處理嗎？</p>\n<p>有些人簡單的認為 SPA(Single Page Application)就要用 React，</p>\n<p>我得說不一定，假如根本沒有那麼複雜，</p>\n<p>也許你只是需要一個 template engine 而已，</p>\n<p>而把 React 當作 html 的 template 來用，</p>\n<p>實在是有點太小看它了。</p>\n<p>什麼時候該用 React 或是 React 到底好在哪裏，</p>\n<p>這個議題其實已經超出了本篇文章的範圍，</p>\n<p>有興趣的可以看這篇：<a href=\"https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca\" target=\"_blank\" rel=\"external\">React Components, Elements, and Instances by Dan Abramov(Redux 作者)</a></p>\n<p>這也是為什麼我一直遲遲沒有碰 Angular 的原因，</p>\n<p>（因為我還沒遇過複雜到需要用到它的情境）</p>\n<p>但我認為在選擇前端的框架時，這篇文章很值得一看再看：</p>\n<ul>\n<li><a href=\"https://github.com/livoras/blog/issues/11\" target=\"_blank\" rel=\"external\">界面之下：還原真實的MV*模式 </a></li>\n</ul>\n<p>裡面並沒有太多的程式碼，只有比較 high level 的概念，</p>\n<p>但看完你會比較理解別人說 MVC、MVP、MVVM、Model 2 是在說些什麼，</p>\n<p>前端主要工作之一就是處理使用者介面（UI），</p>\n<p>我認為理解這些模式是一個前端工程師必備的 common sense，</p>\n<p>這些概念比起淘汰迅速的工具們，是比較能夠保值的，</p>\n<p>並且也會漸漸影響你挑選工具的眼光。</p>\n<p>而 medium 上也有許多好文章可以看，</p>\n<p>twitter 上面也有很多大神可以讓你追蹤，</p>\n<p>不要把這些事情當作是在大拜拜，</p>\n<p>覺得追蹤越多人自己越屌，</p>\n<p>重要的是你看他們生產的內容時得到了什麼。</p>\n<p>另外臉書上的前端社團也很值得加入，台灣人的軟體能力是很強悍的：</p>\n<ul>\n<li><p><a href=\"https://www.facebook.com/groups/f2e.tw/?fref=ts\" target=\"_blank\" rel=\"external\">Front-End Developers Taiwan</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/augularjs.tw/?fref=ts\" target=\"_blank\" rel=\"external\">AngularJS.tw</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/reactjs.tw/?fref=ts\" target=\"_blank\" rel=\"external\">ReactJS.tw</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/javascript.tw\" target=\"_blank\" rel=\"external\">JavaScript.tw</a></p>\n</li>\n</ul>\n<p>重要的是在上面發問，也會有人很熱心的回答你。</p>\n<p>假如這樣都還是讓你資訊焦慮，可以開始訂閱一些技術週刊，</p>\n<p>像是<a href=\"http://weekly.codetengu.com/\" target=\"_blank\" rel=\"external\">碼天狗</a>、<a href=\"http://weekly.techbridge.cc/\" target=\"_blank\" rel=\"external\">TechBridge</a>，</p>\n<p>讓 curators 來幫你整理一些技術上的新知。</p>\n<p>已經盡量精簡了資訊來源，希望能讓新手們不要太無所適從。</p>\n<hr>\n<h2 id=\"3-前端工程師該懂後端嗎？\"><a href=\"#3-前端工程師該懂後端嗎？\" class=\"headerlink\" title=\"3. 前端工程師該懂後端嗎？\"></a>3. 前端工程師該懂後端嗎？</h2><p>後端跟前端是完全不一樣的專業，</p>\n<p>有人說 Node.js 能讓前端工程師跨足到後端去。</p>\n<p>(Isomorphic？)</p>\n<p>事實上前端工程師想往後端走還是有許多需要學習的，</p>\n<p>不管是資料庫或是系統面，都不是平常前端會碰觸到的領域，</p>\n<p>認為自己會寫 JavaScript 就硬上的下場通常是：</p>\n<ul>\n<li><p>效能有問題</p>\n</li>\n<li><p>資安有問題</p>\n</li>\n<li><p>整個 server-side 的 code 都他媽很有問題</p>\n</li>\n</ul>\n<p>聽起來是很糟糕的事情，所以請千萬尊重專業，</p>\n<p>讓我們前端歸前端、政治歸政治（欸？）。</p>\n<p>那前端到底要理解後端到怎樣的程度呢？</p>\n<p>這是一個很 tricky 的問題，</p>\n<p>大部份人會說：<strong>「至少要會接資料啦！」</strong></p>\n<p>但要學到會接資料揪竟是需要怎樣的能力呢？</p>\n<p>真的有人學到剛剛好就喊停的嗎？</p>\n<p>最好的方法其實就是自己去玩一套網頁框架，</p>\n<p>後端前端都寫一遍。</p>\n<p>Rails, Laravel, Django 都是我認為不錯的選擇，</p>\n<p>（Koa 也很不錯啦……）</p>\n<p>重點是去感受一下自己要怎樣設計 DB 的 Schema，</p>\n<p>怎樣做正規化、怎樣避免 N+1 Query，</p>\n<p>以及整個框架的架構為什麼要這樣設計，</p>\n<p>最後再跟自己拉的頁面整合在一起，然後部署上去，</p>\n<p>（用 heroku 是有點偷懶，不過如果你對 server 真的沒興趣，還是可以考慮這樣做沒差）</p>\n<p>等做到這一步，「至少要會接資料」這一點，</p>\n<p>早就迎刃而解了。</p>\n<p>對了，</p>\n<p>記得也不要因為自己寫過後端的 code 就說自己是 full-stack，</p>\n<p>這就跟你會收發 email 就說自己懂電腦一樣會被笑。</p>\n<p>(IT crowd 真的是個不錯的影集)</p>\n<p>有興趣可以看看這篇：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/articles/nodejs-in-front-end-engineer-view\" target=\"_blank\" rel=\"external\">一個前端工程師眼中的 Node.js</a></li>\n</ul>\n<p>可以略懂 Async 在 server 端和 client 端的差異。</p>\n<hr>\n<p>目前大概走到這裡，還有很多沒說到，</p>\n<p>但學個基礎開始實作後就能體會到許多了。</p>\n<blockquote>\n<p>至於實作，</p>\n<p>可以選擇自己寫個身體健康、參與 open source，</p>\n<p>或是去實習都是非常好的選擇</p>\n</blockquote>\n<p>不管是 RWD、mobile web、跨瀏覽器的處理、SEO，</p>\n<p>動畫該用 CSS3 或是 JavaScript 還是 SVG？</p>\n<p>每天都有新的問題可以鑽研，</p>\n<p>目前就先寫到這裡啦！</p>\n<p>希望可以改變一些覺得前端工程師只是在切切版的想法，</p>\n<p>也希望能幫助到想往前端工程師邁進的人。</p>\n","excerpt":"<p>「這個畫面幫我稍微調一下應該沒有很難吧？」</p>","more":"<p>Hi 大家，先簡介一下自己背景：</p>\n<ul>\n<li>非資工資科資管系(也就是所謂的非本科系)</li>\n</ul>\n<blockquote>\n<p>其實我覺得第一點不是很重要、我也很討厭強調，</p>\n<p>但偏偏就是很常被問，</p>\n<p>要不然就是別人聽到你大學是XX系就會：「蛤？」</p>\n<p>索性就把它列出來了。</p>\n</blockquote>\n<ul>\n<li><p>興趣使然的前端工程師，擅長一鍵跑版</p>\n</li>\n<li><p>沒上過資策會、巨匠，或任何各種職訓班，但買過 tree house 的課程和幾本書</p>\n</li>\n<li><p>學習時間：一年半（從碼盲到現在終於可以改一些 code）</p>\n</li>\n<li><p>稍微熟一點的技能： JavaScript, CSS, html, React.js</p>\n</li>\n<li><p>預計未來要學的東西：Haskell, golang, Angular(2.0), Rx.js</p>\n</li>\n<li><p>這是之前相關的<a href=\"http://westudent-blog.sudo.com.tw/denny-sudo.html\">專訪</a>，但我一直都想自己寫一篇，也不是 William 寫得不好，但總覺得哪裡不對勁，也許自幹就是一種工程師的浪漫吧！</p>\n</li>\n</ul>\n<blockquote>\n<p>後來想想，也許是整篇文章太強調「本科」影響不大</p>\n<p>事實上我想說的是：「非本科不該是阻擋你寫程式的理由。」</p>\n</blockquote>\n<ul>\n<li><p>總之這篇就是來介紹一下我是怎麼慢慢上手這個職業，中間會提到一些我覺得很棒的學習資源，和吸收新知的方式。</p>\n</li>\n<li><p>說到吸收新知，目前首推<a href=\"http://weekly.codetengu.com/\">碼天狗</a>，它讓我禮拜一早上都會很焦慮的重新整理，大家可以感受一下。</p>\n</li>\n</ul>\n<h1 id=\"Porjects\"><a href=\"#Porjects\" class=\"headerlink\" title=\"Porjects\"></a>Porjects</h1><ul>\n<li><p>這是我簡介自己做過 projects 的<a href=\"http://slides.com/dennyku/deck-1#/\">slide</a></p>\n</li>\n<li><p>會放這個是因為我本來要買月費專案($7/month)，卻手滑買到年費專案($70/year)，gan，只好多多利用它了。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Get-started\"><a href=\"#Get-started\" class=\"headerlink\" title=\"Get started\"></a>Get started</h1><p>其實我本來立志成為一個 Data Scientist ，</p>\n<p>只是不小心被擺到前端的位置上去……</p>\n<p>回顧這一年半的旅程，前端的東西真的太多太雜了，</p>\n<p>更容易完全只知其然而不知其所以然的就開始用某個新框架、library，</p>\n<p>所以對我來說，<strong>「學什麼」是副課題，「不學什麼」才是真正的關鍵</strong>。</p>\n<hr>\n<p>因為我前端工程師的路還沒走完，</p>\n<p>所以應該在我退休或換職業（去賣雞排）之前，</p>\n<p>都會繼續寫下去。</p>\n<p>目前寫完三點：</p>\n<ol>\n<li><p>非本科系 v.s 本科系</p>\n</li>\n<li><p>從哪裡開始學習？</p>\n</li>\n<li><p>前端工程師該懂後端嗎？</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"1-非本科系-v-s-本科系\"><a href=\"#1-非本科系-v-s-本科系\" class=\"headerlink\" title=\"1. 非本科系 v.s 本科系\"></a>1. 非本科系 v.s 本科系</h2><p>就來說說<strong>「本科系」</strong>來到底有沒有差。</p>\n<p>首先，我們都知道學校裡的課程，</p>\n<p>很少是真的專注在所謂「<strong>前端工程</strong>」上；</p>\n<p>這是可以理解的，一來因為前端變化太快，</p>\n<p>學期初才在說好棒棒的東西，</p>\n<p>到了學期末可能就變 deprecated了。</p>\n<p>所以這就代表非本科系跟本科系的人站在相同的學習立足點上了嗎？</p>\n<p>No，你得面對現實，本科生就是有他的優勢在。</p>\n<p>這裏要講個實習的故事。</p>\n<p>我第一間去實習的新創公司，應徵的是行銷，</p>\n<p>CEO 是個自己學習 JavaScript 並且把產品做出來的人，</p>\n<p>更重要的是他是個很願意教的人，</p>\n<p>在我表示我想朝這方向前進的意願時，</p>\n<p>他很大方的說：「如果你對 JavaScript 有興趣可以教你。」</p>\n<p>當時還有另一位是資管系的同學也一起，</p>\n<p>第一次的作業是用 Angular 做表單的驗證，</p>\n<p>怎麼讓使用者不能繼續輸入資料呢？</p>\n<p>（當時的我連 JavaScript、html 都不會寫）</p>\n<p>我的做法是非常土炮的將 input 換成 div 然後加上紅色的邊框，</p>\n<p>另一位實習生則是使用了 disabled 這個 property，就搞定了。</p>\n<p>講起來也沒什麼了不起的技巧，但不知道就是不知道。</p>\n<p>我問他怎麼會知道有 disabled 這個特性，</p>\n<p>他的回答也很簡單：「查文件啊！」</p>\n<p>也是這次教訓，我知道要先<strong>查文件</strong>。</p>\n<p>講起來蠻白癡，</p>\n<p>不過會上 <a href=\"http://stackoverflow.com/\">stackoverflow</a> 和 google 找答案和看官方文件，</p>\n<p>都是最基本的能力。</p>\n<p>為什麼他會知道？</p>\n<p>很簡單，因為平常他們在寫作業或作專題就需要這個能力。</p>\n<p><img src=\"http://i.imgur.com/B8wms6V.png\" alt=\"rtfm\"></p>\n<blockquote>\n<p>既然我們遇到不會的字會查字典，<br>那為什麼我們寫軟體遇到問題時，不需要讀 doc 呢？</p>\n</blockquote>\n<p>而對於整個電腦的理解，非本科系的人絕對也是被甩在幾條街之外，</p>\n<p>因為我們不需要修資料結構、演算法，</p>\n<p>更別說對於資料庫，</p>\n<p>作業系統、計算機結構、計算機組織、編譯器理解的淺薄，</p>\n<p>一定要掌握上述這些知識才能寫前端嗎？</p>\n<p>這是一個很大的疑問；</p>\n<p>但一個了解底下發生什麼事情的人，才會更知道極限在哪裏，</p>\n<p>這個絕對是肯定的。</p>\n<p>有時候你寫程式時會卡在一個小小的點，想出來之後覺得沒什麼，</p>\n<p>而本科系的人能從以前上述課程中的經驗去延伸，</p>\n<p>（不管是演算法或是系統相關的事情）</p>\n<p>比你更快速得到答案。</p>\n<p>畢竟，人家花了那麼多時間了解電腦，</p>\n<p>你如果不是天縱英才，要比他們理解電腦就得更努力跟上才行。</p>\n<p>這裏推薦一個很棒的課程，<a href=\"http://www.nand2tetris.org/\">nand2tetris</a>，</p>\n<p>上面有很詳細的指示，如果你需要影片和評分系統的話，</p>\n<p>coursera 上也有開課了:<a href=\"https://www.coursera.org/course/nand2tetris1\">https://www.coursera.org/course/nand2tetris1</a>。</p>\n<p>這門課會從最基本的 nand(not and) 邏輯閘開始講起，</p>\n<p>用模擬器組合出自己的 CPU、記憶體，定義自己的組合語言，</p>\n<p>用習慣的程式語言寫出組譯器，</p>\n<p>再寫出一個超簡易版的 JVM，最後用一個簡化過後的 Java 語言（真的超簡化），</p>\n<p>寫出一個俄羅斯方塊來。</p>\n<p>整台電腦、軟體，都是由你一手寫出來的，不覺得很熱血嗎？</p>\n<p>而且你終於也能夠看懂這張圖的笑點在哪了：</p>\n<p><img src=\"https://media.giphy.com/media/3oEdv6pGyOH00ZiRH2/giphy.gif\" alt=\"gif\"></p>\n<p>當然，如果你在學習途中發現你對系統的東西很有興趣，</p>\n<p>那也恭喜你發現新天地啦！</p>\n<p>想當初為了所謂堅實的基礎，還跑去圖書館借白算盤來啃，</p>\n<p>那又是另一個故事了。</p>\n<p>總結一下這一段，</p>\n<p><strong>前端工程師也是軟體工程師</strong>，</p>\n<p>對電腦一無所知的人寫出來的軟體，你敢用嗎？</p>\n<p>我認為至少玩過一輪 nand2tetris 對於非本科系的人會相當有幫助，</p>\n<p>本科系的人來寫前端確實是有一點優勢在，</p>\n<p>但這不是認輸的藉口，</p>\n<p>而是你必須比別人更努力找方法變強的原因。</p>\n<p>另外，</p>\n<p>千萬不要以為念研究所的人是只會讀書的書呆子，</p>\n<p>比你聰明、比你努力，又比你勇敢的人永遠都多的是。</p>\n<hr>\n<h2 id=\"2-從哪裡開始學習？\"><a href=\"#2-從哪裡開始學習？\" class=\"headerlink\" title=\"2. 從哪裡開始學習？\"></a>2. 從哪裡開始學習？</h2><p>先來說說「單純」的前端從哪裡開始，</p>\n<p>主要分成兩塊：</p>\n<p>第一塊是 html 和 CSS：</p>\n<p>我以前學習 html 和 CSS 的方法就是把 <a href=\"http://www.w3schools.com/\">w3schools</a>看完，</p>\n<p>不能說有什麼不好，不過真的是看完大部分都忘記，</p>\n<p>畢竟很多東西都馬是要用到的時候再去查。</p>\n<p>但現在我會推薦 <a href=\"https://www.codecademy.com/\">codecademy</a>，</p>\n<p>邊寫點東西邊學絕對是很有效的學習方式。</p>\n<p>而學會基礎後，</p>\n<p>要怎麼設計出好維護又乾淨的 html and CSS 那又是另一個很長的故事。</p>\n<p>第二塊則是 JavaScript：</p>\n<p>坦白說一年半過去，我仍然認為自己在 JavaScript 的知識上很貧瘠。</p>\n<p>這裏有篇 <a href=\"https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.k5wxhl2s1\">10 個面試時應該要知道的問題</a>，</p>\n<p>可以探一下自己到底對 JavaScript 理解多少。</p>\n<p>這裏如果把教學全部列出來，真的是完全列不完，</p>\n<p>但學習的流程是這樣子：</p>\n<ul>\n<li><p>掌握了基礎的語法和原則</p>\n</li>\n<li><p>實作練習</p>\n</li>\n<li><p>回頭研究基礎再繼續實作</p>\n</li>\n<li><p>重複以上循環不斷的把你的武器磨的更亮</p>\n</li>\n</ul>\n<p>至於掌握基礎的語法，你可以到以下任一網站，</p>\n<p>挑一個你喜歡的，上完基礎 JavaScript 課程：</p>\n<ul>\n<li><p><a href=\"https://teamtreehouse.com/\">tree house</a> </p>\n</li>\n<li><p><a href=\"https://www.codeschool.com/\">codeschool</a></p>\n</li>\n<li><p><a href=\"https://egghead.io/\">egghead.io</a></p>\n</li>\n</ul>\n<p>練習一段時間後，你會發現又有好多新工具冒出來了，</p>\n<p>這時候你可以先辦個 github 帳號，</p>\n<p>首先 watch awesome 這個 repo: <a href=\"https://github.com/sindresorhus/awesome\">https://github.com/sindresorhus/awesome </a>，</p>\n<p>看一下你喜歡的領域有沒有什麼好東西，</p>\n<p>再挑幾個你最有興趣的 repo 按下 watch，</p>\n<p>最後再開始訂閱各大框架或社群的 weekly，</p>\n<p>接著就是準備被源源不絕的資訊轟炸、不斷的學習和升級。</p>\n<p>而值得一提的是， JavaScript 有很多工具可以用，</p>\n<p>不管是 library 還是 framework，</p>\n<p>學習之前，真的必須想一想：</p>\n<p><strong>「你真的需要用它嗎？」</strong></p>\n<p>舉例來說：</p>\n<p>React 的確相當的好用，</p>\n<p>但是你的畫面真的有那麼多 state 要處理嗎？</p>\n<p>有些人簡單的認為 SPA(Single Page Application)就要用 React，</p>\n<p>我得說不一定，假如根本沒有那麼複雜，</p>\n<p>也許你只是需要一個 template engine 而已，</p>\n<p>而把 React 當作 html 的 template 來用，</p>\n<p>實在是有點太小看它了。</p>\n<p>什麼時候該用 React 或是 React 到底好在哪裏，</p>\n<p>這個議題其實已經超出了本篇文章的範圍，</p>\n<p>有興趣的可以看這篇：<a href=\"https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca\">React Components, Elements, and Instances by Dan Abramov(Redux 作者)</a></p>\n<p>這也是為什麼我一直遲遲沒有碰 Angular 的原因，</p>\n<p>（因為我還沒遇過複雜到需要用到它的情境）</p>\n<p>但我認為在選擇前端的框架時，這篇文章很值得一看再看：</p>\n<ul>\n<li><a href=\"https://github.com/livoras/blog/issues/11\">界面之下：還原真實的MV*模式 </a></li>\n</ul>\n<p>裡面並沒有太多的程式碼，只有比較 high level 的概念，</p>\n<p>但看完你會比較理解別人說 MVC、MVP、MVVM、Model 2 是在說些什麼，</p>\n<p>前端主要工作之一就是處理使用者介面（UI），</p>\n<p>我認為理解這些模式是一個前端工程師必備的 common sense，</p>\n<p>這些概念比起淘汰迅速的工具們，是比較能夠保值的，</p>\n<p>並且也會漸漸影響你挑選工具的眼光。</p>\n<p>而 medium 上也有許多好文章可以看，</p>\n<p>twitter 上面也有很多大神可以讓你追蹤，</p>\n<p>不要把這些事情當作是在大拜拜，</p>\n<p>覺得追蹤越多人自己越屌，</p>\n<p>重要的是你看他們生產的內容時得到了什麼。</p>\n<p>另外臉書上的前端社團也很值得加入，台灣人的軟體能力是很強悍的：</p>\n<ul>\n<li><p><a href=\"https://www.facebook.com/groups/f2e.tw/?fref=ts\">Front-End Developers Taiwan</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/augularjs.tw/?fref=ts\">AngularJS.tw</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/reactjs.tw/?fref=ts\">ReactJS.tw</a></p>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/javascript.tw\">JavaScript.tw</a></p>\n</li>\n</ul>\n<p>重要的是在上面發問，也會有人很熱心的回答你。</p>\n<p>假如這樣都還是讓你資訊焦慮，可以開始訂閱一些技術週刊，</p>\n<p>像是<a href=\"http://weekly.codetengu.com/\">碼天狗</a>、<a href=\"http://weekly.techbridge.cc/\">TechBridge</a>，</p>\n<p>讓 curators 來幫你整理一些技術上的新知。</p>\n<p>已經盡量精簡了資訊來源，希望能讓新手們不要太無所適從。</p>\n<hr>\n<h2 id=\"3-前端工程師該懂後端嗎？\"><a href=\"#3-前端工程師該懂後端嗎？\" class=\"headerlink\" title=\"3. 前端工程師該懂後端嗎？\"></a>3. 前端工程師該懂後端嗎？</h2><p>後端跟前端是完全不一樣的專業，</p>\n<p>有人說 Node.js 能讓前端工程師跨足到後端去。</p>\n<p>(Isomorphic？)</p>\n<p>事實上前端工程師想往後端走還是有許多需要學習的，</p>\n<p>不管是資料庫或是系統面，都不是平常前端會碰觸到的領域，</p>\n<p>認為自己會寫 JavaScript 就硬上的下場通常是：</p>\n<ul>\n<li><p>效能有問題</p>\n</li>\n<li><p>資安有問題</p>\n</li>\n<li><p>整個 server-side 的 code 都他媽很有問題</p>\n</li>\n</ul>\n<p>聽起來是很糟糕的事情，所以請千萬尊重專業，</p>\n<p>讓我們前端歸前端、政治歸政治（欸？）。</p>\n<p>那前端到底要理解後端到怎樣的程度呢？</p>\n<p>這是一個很 tricky 的問題，</p>\n<p>大部份人會說：<strong>「至少要會接資料啦！」</strong></p>\n<p>但要學到會接資料揪竟是需要怎樣的能力呢？</p>\n<p>真的有人學到剛剛好就喊停的嗎？</p>\n<p>最好的方法其實就是自己去玩一套網頁框架，</p>\n<p>後端前端都寫一遍。</p>\n<p>Rails, Laravel, Django 都是我認為不錯的選擇，</p>\n<p>（Koa 也很不錯啦……）</p>\n<p>重點是去感受一下自己要怎樣設計 DB 的 Schema，</p>\n<p>怎樣做正規化、怎樣避免 N+1 Query，</p>\n<p>以及整個框架的架構為什麼要這樣設計，</p>\n<p>最後再跟自己拉的頁面整合在一起，然後部署上去，</p>\n<p>（用 heroku 是有點偷懶，不過如果你對 server 真的沒興趣，還是可以考慮這樣做沒差）</p>\n<p>等做到這一步，「至少要會接資料」這一點，</p>\n<p>早就迎刃而解了。</p>\n<p>對了，</p>\n<p>記得也不要因為自己寫過後端的 code 就說自己是 full-stack，</p>\n<p>這就跟你會收發 email 就說自己懂電腦一樣會被笑。</p>\n<p>(IT crowd 真的是個不錯的影集)</p>\n<p>有興趣可以看看這篇：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/articles/nodejs-in-front-end-engineer-view\">一個前端工程師眼中的 Node.js</a></li>\n</ul>\n<p>可以略懂 Async 在 server 端和 client 端的差異。</p>\n<hr>\n<p>目前大概走到這裡，還有很多沒說到，</p>\n<p>但學個基礎開始實作後就能體會到許多了。</p>\n<blockquote>\n<p>至於實作，</p>\n<p>可以選擇自己寫個身體健康、參與 open source，</p>\n<p>或是去實習都是非常好的選擇</p>\n</blockquote>\n<p>不管是 RWD、mobile web、跨瀏覽器的處理、SEO，</p>\n<p>動畫該用 CSS3 或是 JavaScript 還是 SVG？</p>\n<p>每天都有新的問題可以鑽研，</p>\n<p>目前就先寫到這裡啦！</p>\n<p>希望可以改變一些覺得前端工程師只是在切切版的想法，</p>\n<p>也希望能幫助到想往前端工程師邁進的人。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cinemwh5e0000f606tc19k7h2","tag_id":"cinemwh5m0002f606nvecv45u","_id":"cinemwh5u0007f606hdwqgct7"},{"post_id":"cinemwh5j0001f606n1lrjlhe","tag_id":"cinemwh5r0005f606nkxr8x8a","_id":"cinemwh62000bf606oehio9yx"},{"post_id":"cinemwh5p0003f606un7m4rdf","tag_id":"cinemwh61000af606vdi6pvlt","_id":"cinemwh63000df6069r7lv3cu"},{"post_id":"cinemwh5q0004f60643ta941o","tag_id":"cinemwh5r0005f606nkxr8x8a","_id":"cinemwh64000ff6068bv4lurz"},{"post_id":"cinemwh5s0006f606vzym4g13","tag_id":"cinemwh64000ef606goub33ib","_id":"cinemwh64000hf606jiandasg"},{"post_id":"cinemwh5v0008f606folyylec","tag_id":"cinemwh64000gf606jvw2n1lz","_id":"cinemwh65000jf606ujghn12k"},{"post_id":"cinemwh5y0009f6063j49pjxi","tag_id":"cinemwh65000if606zcct29k9","_id":"cinemwh66000lf606gd5113i9"},{"post_id":"cinemwh5y0009f6063j49pjxi","tag_id":"cinemwh66000kf60670ya6mwk","_id":"cinemwh67000mf606j50tlk6e"}],"Tag":[{"name":"auto-realease JavaScript CI","_id":"cinemwh5m0002f606nvecv45u"},{"name":"cycle.js observable","_id":"cinemwh5r0005f606nkxr8x8a"},{"name":"CSS Modules, PostCSS","_id":"cinemwh61000af606vdi6pvlt"},{"name":"CI, Travis CI, github page","_id":"cinemwh64000ef606goub33ib"},{"name":"cycle.js, observable","_id":"cinemwh64000gf606jvw2n1lz"},{"name":"career","_id":"cinemwh65000if606zcct29k9"},{"name":"front-end","_id":"cinemwh66000kf60670ya6mwk"}]}}